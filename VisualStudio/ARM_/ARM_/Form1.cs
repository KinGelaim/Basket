using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
//using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Word = Microsoft.Office.Interop.Word;
using Excel = Microsoft.Office.Interop.Excel;
using System.IO;
using System.Text.RegularExpressions;

namespace ARM
{
    public partial class Form1 : Form
    {
        //sqliteConnection sqlConnection;
        //string connectionString = @"Data Source=(LocalDB)\v11.0;AttachDbFilename=" + mainDirectoryForSave + @"BD\DB_ARM.mdf;Integrated Security=True";
        //SqlDataReader sqlReader = null;
        SQLiteConnection sqliteConnection;
        string connectionSQLiteString = Properties.Settings.Default.SettingPatch + @"BD\DB_ARM.db";
        SQLiteDataReader sqliteReader = null;
        //------------------------------Начальные данные------------------------------
        DateTime dateNow;
        static string mainDirectoryForSave = Properties.Settings.Default.SettingPatch;
        //------------------------------Уровень доступа------------------------------
        bool authUser = false;
        bool authAdmin = false;
        //------------------------------Переменные для справочников------------------------------
        //Спарвочник наименований элементов
        bool spElementNTIIM = false;
        bool spElementGVC = false;
        List<ClassElements> elementsList = new List<ClassElements>();
        int positionElementList = -1;
        bool spElementEdit = false;
        //Справочник предприятий
        int positionFactoryList = -1;
        List<ClassFactorys> factorysList = new List<ClassFactorys>();
        bool spFactoryEdit = false;
        //Справочник преград
        int positionPregradList = -1;
        List<ClassPregrads> pregradsList = new List<ClassPregrads>();
        bool spPregradEdit = false;
        List<ClassPregradsName> pregradsListName = new List<ClassPregradsName>();
        //Справочник видов испытаний
        int positionVidIspList = -1;
        List<ClassVidIsp> vidIspList = new List<ClassVidIsp>();
        bool spVidIspEdit = false;
        //Справочник ненужных вк
        int positionNoneVk = -1;
        List<ClassNoneVk> noneVkList = new List<ClassNoneVk>();
        bool spNoneVkEdit = false;
        //Справочник единиц измерений
        int positionEdIzm = -1;
        List<ClassEdIzm> edIzmList = new List<ClassEdIzm>();
        bool spEdIzmEdit = false;
        //Справочник мат части
        int positionMC = -1;
        List<ClassMC> mcList = new List<ClassMC>();
        bool spMCEdit = false;
        //Справочник полигонов
        int positionPoligonsList = -1;
        List<ClassPoligons> poligonsList = new List<ClassPoligons>();
        bool spPoligonsEdit = false;
        //Справочник цен видов испытания
        int positionCenVidIspList = -1;
        List<ClassCenaVidIsp> cenaVidIspList = new List<ClassCenaVidIsp>();
        bool spCenaVidIspEdit = false;
        //Справочник цен на комплектующие элементы
        int positionCenaKEList = -1;
        List<ClassCenaKE> cenaKEList = new List<ClassCenaKE>();
        bool spCenaKEEdit = false;
        //Справочник нормы времени на проведение испытаний
        int positionNormTimeIsp = -1;
        List<ClassNormTimeIsp> normTimeIspList = new List<ClassNormTimeIsp>();
        bool spNormTimeIspEdit = false;
        //------------------------------МЕСЯЧНЫЙ ПЛАН------------------------------
        //------------------------------ФОРМАТКИ ИСПЫТАНИЯ------------------------------
        int positionFIMesplList = -1;
        List<ClassFI> fiList = new List<ClassFI>();
        bool spFIMesplEdit = false;
        //------------------------------ВЕДОМОСТЬ КОМПЛЕКТАЦИЙ------------------------------
        //Прямая ВК
        int positionVKMesplList = -1;
        //ВК общая
        List<ClassVKMespl> vkMesplList = new List<ClassVKMespl>();
        //ВК на сборку
        List<ClassVKMespl> vkMesplSbList = new List<ClassVKMespl>();
        //Словарик!!!
        Dictionary<string, ClassVKMespl> vkMesplList2 = new Dictionary<string, ClassVKMespl>();
        Dictionary<string, ClassVKMespl> vkMesplSbList2 = new Dictionary<string, ClassVKMespl>();
        Dictionary<string, ClassVKMesplElements> vkMesplElementList2 = new Dictionary<string, ClassVKMesplElements>();
        Dictionary<string, ClassVKMesplElements> vkMesplSbElementList2 = new Dictionary<string, ClassVKMesplElements>();
        //Через хеш таблицу
        HashSet<ClassVKMespl> vkMesplList3 = new HashSet<ClassVKMespl>();
        HashSet<ClassVKMespl> vkMesplSbList3 = new HashSet<ClassVKMespl>();
        HashSet<ClassVKMesplElements> vkMesplElementList3 = new HashSet<ClassVKMesplElements>();
        HashSet<ClassVKMesplElements> vkMesplSbElementList3 = new HashSet<ClassVKMesplElements>(); 
        HashSet<ClassVKMespl> vkMesplList4 = new HashSet<ClassVKMespl>();
        HashSet<ClassVKMespl> vkMesplSbList4 = new HashSet<ClassVKMespl>();
        HashSet<ClassVKMesplElements> vkMesplElementList4 = new HashSet<ClassVKMesplElements>();
        HashSet<ClassVKMesplElements> vkMesplSbElementList4 = new HashSet<ClassVKMesplElements>();
        bool spVKMesplEdit = false;
        //Пременная для определения общая/сборка
        bool typeVKMespl = true;
        //Обратная ВК
        List<ClassVKMesplElements> vkMesplElementList = new List<ClassVKMesplElements>();
        List<ClassVKMesplElements> vkMesplSbElementList = new List<ClassVKMesplElements>();
        //Пременная для определения прямая/обратная
        bool typeVKMesplElement = true;
        //------------------------------ПЛАН ИСПЫТАНИЙ------------------------------
        int positionVIspMesplList = -1;
        int positionPlIspMesplList = -1;
        bool spPlIspMesplEdit = false;
        bool spVIspMesplEdit = false;
        List<ClassVIspMespl> vIspMesplList = new List<ClassVIspMespl>();
        List<ClassPlIspMespl> plIspMesplList = new List<ClassPlIspMespl>();
        bool vOrPlIspMespl = true;
        string yearVIspMespl;
        string yearPlIspMespl;
        string monthPlIspMespl;
        //------------------------------ПОТРЕБНОСТЬ В КОМПЛЕКТУЮЩИХ ЭЛЕМЕНТАХ------------------------------
        private string templateFileNameWord = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН СПРАВКА-ОБОСНОВАНИЯ.docx";
        private string templateFileNameExcel = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН СПРАВКА-ОБОСНОВАНИЯ.xlsx";
        private DateTime dateNowFileName;
        List<ClassPKEMespl> pkEMesplList = new List<ClassPKEMespl>();
        List<ClassPlIspMespl> pkENoneVKMesplList = new List<ClassPlIspMespl>();
        string yearKEMespl;
        string monthKEMespl;
        List<ClassPKENSMespl> pkENSMesplList = new List<ClassPKENSMespl>();
        IOrderedEnumerable<ClassPKENSMespl> sortedPKENSMesplList;
        //------------------------------ПЕЧАТЬ ЗАПРОСОВ И ПЛАНОВ------------------------------
        private string templateFileNameWordControlPlan = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН ПЛАН КОНТРОЛЬНЫХ ИСПЫТАНИЙ.docx";
        private string templateFileNameWordPlanOnYear = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН ПЛАН ИСПЫТАНИЙ НА ГОД.docx";
        private string templateFileNameWordQueryOnYear = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН ПЕЧАСТЬ ЗАПРОСОВ НА ГОД.docx";
        private string templateFileNameWordQueryOnMonth = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН ПЕЧАСТЬ ЗАПРОСОВ НА МЕСЯЦ.docx";
        //Печать запросов
        List<ClassPrintQueryOnYear> printQueryOnYear = new List<ClassPrintQueryOnYear>();
        List<string> sortingListQueryOnUear = new List<string>();
        //Потребность в комплектующиъ элементах для обеспечения контрольных испытаний
        private string templateFileNameWordQueryPotr = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН ПОТРЕБНОСТЬ.docx";
        private string templateFileNameWordQueryPotrNoSecret = mainDirectoryForSave + @"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН ПОТРЕБНОСТЬ (НС).docx";
        //------------------------------ГОДОВОЙ ПЛАН------------------------------
        //------------------------------ФОРМАТКИ ИСПЫТАНИЯ------------------------------
        int positionFIKontrolList = -1;
        bool spFIKontrolEdit = false;
        //------------------------------ВЕДОМОСТЬ КОМПЛЕКТАЦИЙ------------------------------
        //Прямая ВК
        int positionVKKontrolList = -1;
        bool spVKKontrolEdit = false;
        //Пременная для определения общая/сборка
        bool typeVKKontrol = true;
        //Пременная для определения прямая/обратная
        bool typeVKKontrolElement = true;
        //------------------------------ПЛАН ИСПЫТАНИЙ------------------------------
        int positionPlIspKontrolList = -1;
        List<ClassPlIspKontrol> plIspKontrolList = new List<ClassPlIspKontrol>();
        bool spPlIspKontrolEdit = false;
        string yearPlIspKontrol;
        string numberPlIspKontrol;
        //------------------------------ПЛАН ПОРИЗВОДСТВА------------------------------
        int positionPlIndKontrolList = -1;
        List<ClassPlIndKontrol> plIndKontrolList = new List<ClassPlIndKontrol>();
        bool spPlIndKontrolEdit = false;
        string yearPlIndKontrol;
        string numberPlIndKontrol;
        //------------------------------ПОТРЕБНОСТЬ В КОМПЛЕКТУЮЩИХ ЭЛЕМЕНТАХ------------------------------
        int positionPotrVKEKontrolList = -1;
        List<ClassPotrVKEKontrol> potrVKEKontrolList = new List<ClassPotrVKEKontrol>();
        bool spPotrVKEKontrolEdit = false;
        string yearPotrVKEKontrol;
        string numberPotrVKEKontrol;
        List<ClassPlIspKontrol> potrNoneVKKontrolList = new List<ClassPlIspKontrol>();
        //------------------------------ПЕЧАТЬ------------------------------
        string yearPrintKontrol;
        string numberPrintKontrol;
        private string templateFileNameWordPlanSbKontrol = mainDirectoryForSave+@"ШАБЛОНЫ\ГОДОВОЙ ШАБЛОН ПЛАН СБОРКИ.docx";
        private string templateFileNameWordPlanIspKontrol = mainDirectoryForSave+@"ШАБЛОНЫ\ГОДОВОЙ ШАБЛОН ПЛАН КОНТРОЛЬНЫХ ИСПЫТАНИЙ.docx";
        private string templateFileNameWordVKESbKontrol = mainDirectoryForSave+@"ШАБЛОНЫ\ГОДОВОЙ ШАБЛОН СПРАВКА-ОБОСНОВАНИЕ ДЛЯ СБОРКИ.docx";
        private string templateFileNameWordVKEIspKontrol = mainDirectoryForSave+@"ШАБЛОНЫ\ГОДОВОЙ ШАБЛОН СПРАВКА-ОБОСНОВАНИЕ ДЛЯ ОБЕСПЕЧЕНИЯ ИСПЫТАНИЙ.docx";
        private string templateFileNameWordPotrVKESbKontrol = mainDirectoryForSave+@"ШАБЛОНЫ\ГОДОВОЙ ШАБЛОН Результ ПОТРЕБНОСТИ ДЛЯ СБОРКИ.docx";
        private string templateFileNameWordPotrVKEIspKontrol = mainDirectoryForSave+@"ШАБЛОНЫ\ГОДОВОЙ ШАБЛОН Результ ПОТРЕБНОСТИ ДЛЯ ОБЕСПЕЧЕНИЯ ИСПЫТАНИЙ.docx";
        //------------------------------Результ ПЛАН------------------------------
        //------------------------------ФОРМАТКИ ИСПЫТАНИЯ------------------------------
        int positionFIResultList = -1;
        bool spFIResultEdit = false;
        //------------------------------ВЕДОМОСТЬ КОМПЛЕКТАЦИЙ------------------------------
        //Прямая ВК
        int positionVKResultList = -1;
        bool spVKResultEdit = false;
        //Пременная для определения общая/сборка
        bool typeVKResult = true;
        //Пременная для определения прямая/обратная
        bool typeVKResultElement = true;
        //------------------------------ПЛАН ИСПЫТАНИЙ------------------------------
        int positionPlIspResultList = -1;
        List<ClassPlIspKontrol> plIspResultList = new List<ClassPlIspKontrol>();
        bool spPlIspResultEdit = false;
        string yearPlIspResult;
        string numberPlIspResult;
        //------------------------------ПЛАН ПОРИЗВОДСТВА------------------------------
        int positionPlIndResultList = -1;
        List<ClassPlIndKontrol> plIndResultList = new List<ClassPlIndKontrol>();
        bool spPlIndResultEdit = false;
        string yearPlIndResult;
        string numberPlIndResult;
        //------------------------------ПОТРЕБНОСТЬ В КОМПЛЕКТУЮЩИХ ЭЛЕМЕНТАХ------------------------------
        int positionPotrVKEResultList = -1;
        List<ClassPotrVKEKontrol> potrVKEResultList = new List<ClassPotrVKEKontrol>();
        bool spPotrVKEResultEdit = false;
        string yearPotrVKEResult;
        string numberPotrVKEResult;
        List<ClassPlIspKontrol> potrNoneVKResultList = new List<ClassPlIspKontrol>();
        //------------------------------ПОТРЕБНОСТЬ В КРЕШЕРНОМ ИМУЩЕСТВЕ------------------------------
        int positionPotrVKIResultList = -1;
        List<ClassPotrVKIResult> potrVKIResultList = new List<ClassPotrVKIResult>();
        bool spPotrVKIResultEdit = false;
        string yearPotrVKIResult;
        string numberPotrVKIResult;
        //------------------------------ПЕЧАТЬ------------------------------
        string yearPrintResult;
        string numberPrintResult;
        private string templateFileNameWordPlanSbResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН ПЛАН НА СБОРКУ.docx";
        private string templateFileNameWordPlanIspResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН ПЛАН ИСПЫТАНИЙ.docx";
        private string templateFileNameWordVKESbResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН СПРАВКА-ОБОСНОВАНИЕ ДЛЯ СБОРКИ.docx";
        private string templateFileNameWordVKEIspResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН СПРАВКА-ОБОСНОВАНИЕ ДЛЯ ОБЕСПЕЧЕНИЯ ИСПЫТАНИЙ.docx";
        private string templateFileNameWordPotrVKESbResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН Результ ПОТРЕБНОСТИ ДЛЯ СБОРКИ.docx";
        private string templateFileNameWordPotrVKEIspResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН Результ ПОТРЕБНОСТИ ДЛЯ ОБЕСПЕЧЕНИЯ ИСПЫТАНИЙ.docx";
        private string templateFileNameWordPotrVBPResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН СПРАВКА-ОБОСНОВАНИЕ ПОТРЕБНОСТИ В БРОНЕПЛИТАХ.docx";
        private string templateFileNameWordSvPotrVBPResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН СВОДНАЯ ВЕДОМОСТЬ ПОТРЕБНОСТИ В БРОНЕПЛИТАХ.docx";
        private string templateFileNameWordKrImuResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН ЗАЯВКИ НА ПОСТАВКУ КРЕШЕРНОГО ИМУЩЕСТВА.docx";
        private string templateFileNameWordPotrMCResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН СПРАВКА-ОБОСНОВАНИЕ ПОТРЕБНОСТИ В МАТЧАСТИ.docx";
        private string templateFileNameWordMCResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН МАТЧАСТЬ Результ ПЛАНА.docx";
        private string templateFileNameWordCallMCResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН ЗАЯВКИ НА ПОСТАВКУ МАТЧАСТИ.docx";
        private string templateFileNameWordNotmTimeResult = mainDirectoryForSave + @"ШАБЛОНЫ\Результ ШАБЛОН ТРУДОЗАТРАТ.docx";
        private string templateFileNameWordQueryResult = mainDirectoryForSave + @"ШАБЛОНЫ\Результ ШАБЛОН ЗАЯВКИ НА ПОСТАВКУ.docx";
        //------------------------------МАТЧАСТЬ------------------------------
        List<ClassPotrMC> potrMCList = new List<ClassPotrMC>();
        List<ClassPotrMCFactorys> potrMCFactorysList = new List<ClassPotrMCFactorys>();
        //------------------------------БРОНЕПЛИТЫ------------------------------
        List<ClassPotrVBP> potrVBPList = new List<ClassPotrVBP>();


        public Form1()
        {
            InitializeComponent();
            groupBox4.Visible = true;
            tabControl1.Visible = false;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            dateNow = DateTime.Today;
        }

        private void loadAllBD()
        {
            bool timeQuery = false;
            if (DialogResult.Yes == MessageBox.Show("Провести учет временит?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
            {
                timeQuery = true;
            }
            try
            {
                groupBox4.BeginInvoke((MethodInvoker)(() => this.groupBox4.Visible = false));
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Visible = true));
                label422.BeginInvoke((MethodInvoker)(() => this.label422.Visible = true));

                //sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 0 ));
                functionQueryElements();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 10));
                functionQueryFactorys();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 17));
                functionQueryPregrads();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 24));
                functionQueryPregradsName();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 28));
                functionQueryVidIsp();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 35));
                functionQueryPoligons();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 40));
                functionQueryNoneVk();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 47));
                functionQueryEdIzm();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 52));
                functionQueryMC();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 54));
                functionQueryCenaKE();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 58));
                functionQueryCenaVidIsp();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 64));
                functionQueryFI();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 70));
                functionQueryVK(timeQuery);
                //functionQueryVKDic(timeQuery);
                /*functionQueryVKHash(timeQuery);
                functionQueryVKHash2(timeQuery);
                functionQueryVKThread(timeQuery);*/
                //functionQueryVKBreak(timeQuery);
                //functionQueryVKComment(timeQuery);
                //functionQueryVKGroup(timeQuery);
                //functionQueryVKReslut(timeQuery);
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 80));
                functionQueryCenaKE();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 87));
                functionQueryCenaVidIsp();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 95));
                functionQueryNormTimeIsp();
                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Value = 100));

                progressBar1.BeginInvoke((MethodInvoker)(() => this.progressBar1.Visible = false));
                label422.BeginInvoke((MethodInvoker)(() => this.label422.Visible = false));
                tabControl1.BeginInvoke((MethodInvoker)(() => this.tabControl1.Visible = true));
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
            }
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (sqliteConnection != null && sqliteConnection.State != ConnectionState.Closed)
                sqliteConnection.Close();
            Application.Exit();
        }

        //Открытие папки основной дирректирии
        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (Directory.Exists(mainDirectoryForSave))
                System.Diagnostics.Process.Start("explorer", mainDirectoryForSave);
            else
                functionMessageShow(1, "Проверьте выбранную директорию!");
        }

        //Настройки
        private void settingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Form22 form22 = new Form22(authAdmin);
            form22.ShowDialog();
            //Посещаемость

            //Смена пароля (change password)
            //Резервное копирование данных (backup_data or save data)
            //Очистка БД (clear data) !!!!!
            //Загрузка БД (load data)

            //Выбор мейн директории
            if (form22.typeSettings == 4)
            {
                folderBrowserDialog1.ShowDialog();
                if (folderBrowserDialog1.SelectedPath.Length > 0)
                {
                    Properties.Settings.Default.SettingPatch = folderBrowserDialog1.SelectedPath + @"\";
                    Properties.Settings.Default.Save();
                    functionRenamePath();
                    functionMessageShow(2, "Сохранен новый путь!\n" + folderBrowserDialog1.SelectedPath + @"\");
                }
                folderBrowserDialog1.SelectedPath = "";
            }
        }

        private void functionRenamePath()
        {
            mainDirectoryForSave = Properties.Settings.Default.SettingPatch;
            //connectionString = @"Data Source=(LocalDB)\v11.0;AttachDbFilename=" + mainDirectoryForSave + @"BD\DB_ARM.mdf;Integrated Security=True";
            connectionSQLiteString = mainDirectoryForSave + @"BD\DB_ARM.db";
            //Месячный план
            templateFileNameWord = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН СПРАВКА-ОБОСНОВАНИЯ.docx";
            templateFileNameExcel = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН СПРАВКА-ОБОСНОВАНИЯ.xlsx";
            templateFileNameWordControlPlan = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН ПЛАН КОНТРОЛЬНЫХ ИСПЫТАНИЙ.docx";
            templateFileNameWordPlanOnYear = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН ПЛАН ИСПЫТАНИЙ НА ГОД.docx";
            templateFileNameWordQueryOnYear = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН ПЕЧАСТЬ ЗАПРОСОВ НА ГОД.docx";
            templateFileNameWordQueryOnMonth = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН ПЕЧАСТЬ ЗАПРОСОВ НА МЕСЯЦ.docx";
            templateFileNameWordQueryPotr = mainDirectoryForSave+@"ШАБЛОНЫ\МЕСЯЧНЫЙ ШАБЛОН ПОТРЕБНОСТЬ.docx";
            //Годовой план
            templateFileNameWordPlanSbKontrol = mainDirectoryForSave+@"ШАБЛОНЫ\ГОДОВОЙ ШАБЛОН ПЛАН СБОРКИ.docx";
            templateFileNameWordPlanIspKontrol = mainDirectoryForSave+@"ШАБЛОНЫ\ГОДОВОЙ ШАБЛОН ПЛАН КОНТРОЛЬНЫХ ИСПЫТАНИЙ.docx";
            templateFileNameWordVKESbKontrol = mainDirectoryForSave+@"ШАБЛОНЫ\ГОДОВОЙ ШАБЛОН СПРАВКА-ОБОСНОВАНИЕ ДЛЯ СБОРКИ.docx";
            templateFileNameWordVKEIspKontrol = mainDirectoryForSave+@"ШАБЛОНЫ\ГОДОВОЙ ШАБЛОН СПРАВКА-ОБОСНОВАНИЕ ДЛЯ ОБЕСПЕЧЕНИЯ ИСПЫТАНИЙ.docx";
            templateFileNameWordPotrVKESbKontrol = mainDirectoryForSave+@"ШАБЛОНЫ\ГОДОВОЙ ШАБЛОН Результ ПОТРЕБНОСТИ ДЛЯ СБОРКИ.docx";
            templateFileNameWordPotrVKEIspKontrol = mainDirectoryForSave+@"ШАБЛОНЫ\ГОДОВОЙ ШАБЛОН Результ ПОТРЕБНОСТИ ДЛЯ ОБЕСПЕЧЕНИЯ ИСПЫТАНИЙ.docx";
            //Результ план
            templateFileNameWordPlanSbResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН ПЛАН НА СБОРКУ.docx";
            templateFileNameWordPlanIspResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН ПЛАН ИСПЫТАНИЙ.docx";
            templateFileNameWordVKESbResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН СПРАВКА-ОБОСНОВАНИЕ ДЛЯ СБОРКИ.docx";
            templateFileNameWordVKEIspResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН СПРАВКА-ОБОСНОВАНИЕ ДЛЯ ОБЕСПЕЧЕНИЯ ИСПЫТАНИЙ.docx";
            templateFileNameWordPotrVKESbResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН Результ ПОТРЕБНОСТИ ДЛЯ СБОРКИ.docx";
            templateFileNameWordPotrVKEIspResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН Результ ПОТРЕБНОСТИ ДЛЯ ОБЕСПЕЧЕНИЯ ИСПЫТАНИЙ.docx";
            templateFileNameWordPotrVBPResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН СПРАВКА-ОБОСНОВАНИЕ ПОТРЕБНОСТИ В БРОНЕПЛИТАХ.docx";
            templateFileNameWordSvPotrVBPResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН СВОДНАЯ ВЕДОМОСТЬ ПОТРЕБНОСТИ В БРОНЕПЛИТАХ.docx";
            templateFileNameWordKrImuResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН ЗАЯВКИ НА ПОСТАВКУ КРЕШЕРНОГО ИМУЩЕСТВА.docx";
            templateFileNameWordPotrMCResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН СПРАВКА-ОБОСНОВАНИЕ ПОТРЕБНОСТИ В МАТЧАСТИ.docx";
            templateFileNameWordMCResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН МАТЧАСТЬ Результ ПЛАНА.docx";
            templateFileNameWordCallMCResult = mainDirectoryForSave+@"ШАБЛОНЫ\Результ ШАБЛОН ЗАЯВКИ НА ПОСТАВКУ МАТЧАСТИ.docx";
            templateFileNameWordNotmTimeResult = mainDirectoryForSave + @"ШАБЛОНЫ\Результ ШАБЛОН ТРУДОЗАТРАТ.docx";
            templateFileNameWordQueryResult = mainDirectoryForSave + @"ШАБЛОНЫ\Результ ШАБЛОН ЗАЯВКИ НА ПОСТАВКУ.docx";
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
        }

        //О программе
        private void programmInfoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Версия программы: " + System.Reflection.Assembly.GetExecutingAssembly().GetName().Version);
        }

        //Закрытие формы
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (sqliteConnection != null && sqliteConnection.State != ConnectionState.Closed)
                sqliteConnection.Close();
        }

        //------------------------------БЕЗОПАСНОСТЬ------------------------------
        private void button217_Click_1(object sender, EventArgs e)
        {
            authUser = functionAuthUser(textBox355.Text, textBox356.Text);
            if (authUser)
            {
                //Загрузка справочников
                if (File.Exists(connectionSQLiteString))
                {
                    Thread loadThread = new Thread(new ThreadStart(loadAllBD));
                    loadThread.Start();
                }
                else
                {
                    functionMessageShow(1, "База данных не найдена!\nПроверьте в настройках правильность заданного пути!");
                }
            }
            else
                functionMessageShow(1, "Неверный логин или пароль!");
        }

        private bool functionAuthUser(string login, string password)
        {
            bool authCheck = false;
            int idUser = 0;
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT id, userComp, userAdmin FROM Users WHERE userLogin=@userLogin AND userPassword=@userPassword", sqliteConnection);
            command.Parameters.AddWithValue("userLogin", login);
            command.Parameters.AddWithValue("userPassword", password);
            try
            {
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    authCheck = true;
                    authAdmin = Convert.ToBoolean(sqliteReader["userAdmin"]);
                    idUser = Convert.ToInt32(sqliteReader["id"]);
                }
                sqliteReader.Close();
                if (idUser > 0)
                    command = new SQLiteCommand("INSERT INTO [UsersHistoryAuth] (idUser, loginUser, passwordUser, authCheck, dateAuth) VALUES (@idUser, @loginUser, @passwordUser, @authCheck, @dateAuth)", sqliteConnection);
                else
                    command = new SQLiteCommand("INSERT INTO [UsersHistoryAuth] (loginUser, passwordUser, authCheck, dateAuth) VALUES (@loginUser, @passwordUser, @authCheck, @dateAuth)", sqliteConnection);
                command.Parameters.AddWithValue("idUser", idUser);
                command.Parameters.AddWithValue("loginUser", login);
                command.Parameters.AddWithValue("passwordUser", password);
                if (authCheck)
                    command.Parameters.AddWithValue("authCheck", 1);
                else
                    command.Parameters.AddWithValue("authCheck", 0);
                command.Parameters.AddWithValue("dateAuth", string.Format("{0:dd.MM.yyyy HH:mm:ss}", DateTime.Now));
                command.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
            return authCheck;
        }
        //------------------------------СПРАВОЧНИКИ------------------------------
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            String strComboBoxSp = comboBox1.Text;
            switch (strComboBoxSp) { 
                case "Справочник наименований элементов":
                    functionQueryFactorys();
                    functionQueryElements();
                    functionVisibleSp(0);
                    break;
                case "Справочник предприятий":
                    functionQueryFactorys();
                    functionVisibleSp(1);
                    positionFactoryList = 0;
                    functionShowFactorys(positionFactoryList);
                    break;
                case "Справочник преград":
                    functionQueryPregradsName();
                    functionQueryPregrads();
                    functionShowVidPregrad();
                    positionPregradList = 0;
                    functionShowPregradi(positionPregradList);
                    functionVisibleSp(2);
                    break;
                case "Таблица ненужных ВК":
                    functionQueryElements();
                    functionQueryVidIsp();
                    functionQueryNoneVk();
                    functionFillComboBoxNoneVk();
                    positionNoneVk = 0;
                    functionShowNoneVk(positionNoneVk);
                    functionVisibleSp(3);
                    break;
                case "Справочник видов испытаний":
                    functionQueryVidIsp();
                    positionVidIspList = 0;
                    functionShowVidIsp(positionVidIspList);
                    functionVisibleSp(4);
                    break;
                case "Справочник наименований систем":
                    functionVisibleSp(5);
                    break;
                case "Справочник наименований матчасти":
                    functionQueryFactorys();
                    functionQueryMC();
                    positionMC = 0;
                    functionShowMC(positionMC);
                    functionVisibleSp(6);
                    break;
                case "Справочник наименований единиц измерений":
                    functionQueryEdIzm();
                    positionEdIzm = 0;
                    functionShowEdIzm(positionEdIzm);
                    functionVisibleSp(7);
                    break;
                case "Справочник полигонов,  полигон-заводов":
                    functionQueryFactorys();
                    functionQueryPoligons();
                    positionPoligonsList = 0;
                    functionShowPoligons(positionPoligonsList);
                    functionVisibleSp(8);
                    break;
                case "Справочник цен видов испытаний":
                    functionQueryCenaVidIsp();
                    positionCenVidIspList = 0;
                    functionShowCenaVidIsp(positionCenVidIspList);
                    functionVisibleSp(9);
                    break;
                case "Справочник цен на компл. элементы":
                    functionQueryCenaKE();
                    positionCenaKEList = 0;
                    functionShowCenaKE(positionCenaKEList);
                    functionVisibleSp(10);
                    break;
                case "Нормы времени на проведение испытаний":
                    functionQueryNormTimeIsp();
                    positionNormTimeIsp = 0;
                    functionShowNormTimeIsp(positionNormTimeIsp);
                    functionVisibleSp(11);
                    break;
                default:
                    break;
            }
        }

        //Отображение панели нужного справочника
        private void functionVisibleSp(int sp) {
            panel1.Visible = false;
            panel2.Visible = false;
            panel3.Visible = false;
            panel4.Visible = false;
            panel5.Visible = false;
            panel6.Visible = false;
            panel7.Visible = false;
            panel8.Visible = false;
            panel16.Visible = false;
            panel17.Visible = false;
            panel18.Visible = false;
            switch(sp){
                case 0:
                    panel1.Visible = true;
                    break;
                case 1:
                    panel2.Visible = true;
                    break;
                case 2:
                    panel3.Visible = true;
                    break;
                case 3:
                    panel5.Visible = true;
                    break;
                case 4:
                    panel4.Visible = true;
                    break;
                case 5:
                    break;
                case 6:
                    panel7.Visible = true;
                    break;
                case 7:
                    panel6.Visible = true;
                    break;
                case 8:
                    panel8.Visible = true;
                    break;
                case 9:
                    panel16.Visible = true;
                    break;
                case 10:
                    panel17.Visible = true;
                    break;
                case 11:
                    panel18.Visible = true;
                    break;
                default:
                    break;
            }
        }

        //------------------------------СПРАВОЧНИК НАИМЕНОВАНИЙ ЭЛЕМЕНТОВ------------------------------
        //Выбор справочника элементов
        private void checkedListBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            String strSelectSp = Convert.ToString(checkedListBox1.SelectedItem);
            if (strSelectSp == "НТИИМ")
                spElementNTIIM = !spElementNTIIM;
            if (strSelectSp == "ГВЦ")
                spElementGVC = !spElementGVC;
            positionElementList = -1;
            if (spElementNTIIM && spElementGVC)
            {
                positionElementList = 0;
            }
            else if (spElementNTIIM)
            {
                for (int i = 0; i < elementsList.Count; i++)
                    if (elementsList[i].getSp() == 1)
                    {
                        positionElementList = i;
                        break;
                    }
            }
            else if (spElementGVC) {
                for (int i = 0; i < elementsList.Count; i++)
                    if (elementsList[i].getSp() == 2)
                    {
                        positionElementList = i;
                        break;
                    }
            }
            visibleElementInfo(positionElementList);
        }

        //Отображение элемента
        private void visibleElementInfo(int pos) {
            if (!spElementEdit)
            {
                if (elementsList.Count > 0)
                {
                    if (pos >= 0)
                    {
                        textBox1.Text = Convert.ToString(elementsList[pos].getId());
                        textBox2.Text = Convert.ToString(elementsList[pos].getCode());
                        textBox3.Text = Convert.ToString(elementsList[pos].getPicture());
                        textBox4.Text = Convert.ToString(elementsList[pos].getIndex());
                        textBox5.Text = Convert.ToString(elementsList[pos].getName());
                        textBox246.Text = Convert.ToString(elementsList[pos].codeFactory);
                        textBox247.Text = Convert.ToString(elementsList[pos].nameFactory);
                    }
                    else
                    {
                        textBox2.Text = "";
                        textBox3.Text = "";
                        textBox4.Text = "";
                        textBox5.Text = "";
                        textBox246.Text = "";
                        textBox247.Text = "";
                    }
                }
            }
        }

        //Кнопка назад
        private void button2_Click(object sender, EventArgs e)
        {
            createPositionElement(0);
        }

        //Кнопка вперед
        private void button3_Click(object sender, EventArgs e)
        {
            createPositionElement(1);
        }

        //Результ следующих элементов
        private void createPositionElement(int s) {
            if (s == 0)
            {
                if (spElementNTIIM && spElementGVC)
                {
                    if (positionElementList - 1 >= 0)
                        positionElementList--;
                }
                else if (spElementNTIIM)
                {
                    int k = positionElementList;
                    while(k > 0)
                    {
                        k--;
                        if(elementsList[k].getSp() == 1)
                        {
                            positionElementList = k;
                            break;
                        }
                    }
                }
                else if (spElementGVC)
                {
                    int k = positionElementList;
                    while (k > 0)
                    {
                        k--;
                        if (elementsList[k].getSp() == 2)
                        {
                            positionElementList = k;
                            break;
                        }
                    }
                }
                visibleElementInfo(positionElementList);
            }
            else
            {
                if (spElementNTIIM && spElementGVC)
                {
                    if (positionElementList + 1 < elementsList.Count)
                        positionElementList++;
                }
                else if (spElementNTIIM)
                {
                    int k = positionElementList;
                    while (k < elementsList.Count-1)
                    {
                        k++;
                        if (elementsList[k].getSp() == 1)
                        {
                            positionElementList = k;
                            break;
                        }
                    }
                }
                else if (spElementGVC)
                {
                    int k = positionElementList;
                    while (k < elementsList.Count-1)
                    {
                        k++;
                        if (elementsList[k].getSp() == 2)
                        {
                            positionElementList = k;
                            break;
                        }
                    }
                }
                visibleElementInfo(positionElementList);
            }
        }

        //Добавление нового элемента
        private void button6_Click(object sender, EventArgs e)
        {
            button1.Visible = false;
            button2.Visible = false;
            button3.Visible = false;
            button4.Visible = false;
            button5.Visible = false;
            button6.Visible = false;
            button7.Visible = true;
            button8.Visible = true;
            textBox2.ReadOnly = false;
            textBox3.ReadOnly = false;
            textBox4.ReadOnly = false;
            textBox5.ReadOnly = false;
            textBox246.ReadOnly = false;
            textBox2.Text = "";
            textBox3.Text = "";
            textBox4.Text = "";
            textBox5.Text = "";
            textBox246.Text = "";
            textBox247.Text = "";
            spElementEdit = true;
            label5.Visible = true;
            comboBox2.Visible = true;
            checkedListBox1.Visible = false;
            textBox2.Focus();
        }

        //Редактирование элемента
        private void button5_Click(object sender, EventArgs e)
        {
            if (positionElementList != -1)
            {
                button1.Visible = false;
                button2.Visible = false;
                button3.Visible = false;
                button4.Visible = false;
                button5.Visible = false;
                button6.Visible = false;
                button7.Visible = true;
                button9.Visible = true;
                textBox2.ReadOnly = false;
                textBox3.ReadOnly = false;
                textBox4.ReadOnly = false;
                textBox5.ReadOnly = false;
                textBox246.ReadOnly = false;
                textBox247.Text = "";
                spElementEdit = true;
                label5.Visible = true;
                comboBox2.Visible = true;
                checkedListBox1.Visible = false;
                textBox2.Focus();
                if (elementsList[positionElementList].getSp() == 1)
                {
                    comboBox2.SelectedIndex = 0;
                }
                else if (elementsList[positionElementList].getSp() == 2)
                {
                    comboBox2.SelectedIndex = 1;
                }
            }
            else
            {
                functionMessageShow(2, "Выберите элемент для редактирования");
            }
        }

        //Подтверждение редактирования
        private void button9_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(comboBox2.Text) && !string.IsNullOrWhiteSpace(comboBox2.Text) && !string.IsNullOrEmpty(textBox2.Text) && !string.IsNullOrWhiteSpace(textBox2.Text) && !string.IsNullOrEmpty(textBox5.Text) && !string.IsNullOrWhiteSpace(textBox5.Text))
            {
                if (textBox2.Text.Length <= 10)
                {
                    String codeElementText = textBox2.Text;
                    if (codeElementText.Length < 10)
                    {
                        String newCodeElementText = "";
                        int countNewCode = 10 - codeElementText.Length;
                        while (countNewCode > 0)
                        {
                            newCodeElementText += "0";
                            countNewCode--;
                        }
                        codeElementText = newCodeElementText + codeElementText;
                    }
                    int idFactoryPost = -1;
                    foreach (ClassFactorys fc in factorysList)
                        if (fc.getCode() == textBox246.Text)
                            idFactoryPost = fc.getId();
                    if (idFactoryPost > 0 && textBox246.Text.Length > 0 || textBox246.Text.Length == 0)
                    {
                        int sp = 1;
                        if (comboBox2.Text == "ГВЦ")
                            sp = 2;
                        sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                        sqliteConnection.Open();
                        SQLiteCommand command;
                        if(textBox246.Text.Length > 0)
                            command = new SQLiteCommand("UPDATE [Elements] SET [codeElement]=@codeElement,[picture]=@picture,[indexElement]=@indexElement,[nameElement]=@nameElement,[sp]=@sp,[idFactoryPostElements]=@idFactoryPostElements WHERE [id]=@id", sqliteConnection);
                        else
                            command = new SQLiteCommand("UPDATE [Elements] SET [codeElement]=@codeElement,[picture]=@picture,[indexElement]=@indexElement,[nameElement]=@nameElement,[sp]=@sp WHERE [id]=@id", sqliteConnection);
                        command.Parameters.AddWithValue("id", textBox1.Text);
                        command.Parameters.AddWithValue("codeElement", codeElementText);
                        command.Parameters.AddWithValue("picture", textBox3.Text);
                        command.Parameters.AddWithValue("indexElement", textBox4.Text);
                        command.Parameters.AddWithValue("nameElement", textBox5.Text);
                        command.Parameters.AddWithValue("sp", sp);
                        command.Parameters.AddWithValue("idFactoryPostElements", idFactoryPost);
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionQueryElements();
                        visibleElementInfo(positionElementList);
                        functionVisibleAddNewElement();
                        functionMessageShow(2, "Данные успешно обновлены");
                    }
                    else
                        functionMessageShow(1, "Завод с данным кодом не найден в справочнике!");
                }
                else
                {
                    functionMessageShow(1, "Превышена длина поля 'Код элемента'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Справочник', 'Код элемента' и 'Наименование' должны быть заполнены!");
            }
        }

        //Удаление элемента
        private void button4_Click(object sender, EventArgs e)
        {
            if (positionElementList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить элемент?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                    sqliteConnection.Open();
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [Elements] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox1.Text);
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Элемент успешно удален");
                    createPositionElement(0);
                    functionQueryElements();
                    visibleElementInfo(positionElementList);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите элемент для удаления");
            }
        }

        //Отмена добавления и редактирования
        private void button7_Click(object sender, EventArgs e)
        {
            functionVisibleAddNewElement();
        }

        //Подтверждение добавления
        private void button8_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(comboBox2.Text) && !string.IsNullOrWhiteSpace(comboBox2.Text) && !string.IsNullOrEmpty(textBox2.Text) && !string.IsNullOrWhiteSpace(textBox2.Text) && !string.IsNullOrEmpty(textBox5.Text) && !string.IsNullOrWhiteSpace(textBox5.Text))
            {
                if (textBox2.Text.Length <= 10)
                {
                    String codeElementText = textBox2.Text;
                    if (codeElementText.Length < 10)
                    {
                        String newCodeElementText = "";
                        int countNewCode = 10 - codeElementText.Length;
                        while (countNewCode > 0)
                        {
                            newCodeElementText += "0";
                            countNewCode--;
                        }
                        codeElementText = newCodeElementText + codeElementText;
                    }
                    bool proverkaElement = false;
                    foreach (ClassElements el in elementsList)
                        if (el.getCode() == codeElementText)
                            proverkaElement = true;
                    int idFactoryPost = -1;
                    foreach (ClassFactorys fc in factorysList)
                        if (fc.getCode() == textBox246.Text)
                            idFactoryPost = fc.getId();
                    if (idFactoryPost > 0 && textBox246.Text.Length > 0 || textBox246.Text.Length == 0)
                    {
                        if (!proverkaElement)
                        {
                            int sp = 1;
                            if (comboBox2.Text == "ГВЦ")
                                sp = 2;
                            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                            sqliteConnection.Open();
                            SQLiteCommand command;
                            if(textBox246.Text.Length > 0)
                                command = new SQLiteCommand("INSERT INTO [Elements] (codeElement,picture,indexElement,nameElement,sp,idFactoryPostElements) VALUES (@codeElement,@picture,@indexElement,@nameElement,@sp,@idFactoryPostElements)", sqliteConnection);
                            else
                                command = new SQLiteCommand("INSERT INTO [Elements] (codeElement,picture,indexElement,nameElement,sp) VALUES (@codeElement,@picture,@indexElement,@nameElement,@sp)", sqliteConnection);
                            command.Parameters.AddWithValue("codeElement", codeElementText);
                            command.Parameters.AddWithValue("picture", textBox3.Text);
                            command.Parameters.AddWithValue("indexElement", textBox4.Text);
                            command.Parameters.AddWithValue("nameElement", textBox5.Text);
                            command.Parameters.AddWithValue("sp", sp);
                            command.Parameters.AddWithValue("idFactoryPostElements", idFactoryPost);
                            command.ExecuteNonQuery();
                            sqliteConnection.Close();
                            functionQueryElements();
                            visibleElementInfo(positionElementList);
                            functionVisibleAddNewElement();
                            functionMessageShow(2, "Данные успешно добавлены");
                        }
                        else
                        {
                            functionMessageShow(1, "Элемент с данным кодом уже записан в справочник!");
                        }
                    }
                    else
                        functionMessageShow(1, "Завод с данным кодом не найден в справочнике!");
                }
                else
                {
                    functionMessageShow(1, "Превышена длина поля 'Код элемента'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Справочник', 'Код элемента' и 'Наименование' должны быть заполнены!");
            }
        }

        //Смена отображения при добавлении
        private void functionVisibleAddNewElement() {
            button1.Visible = true;
            button2.Visible = true;
            button3.Visible = true;
            button4.Visible = true;
            button5.Visible = true;
            button6.Visible = true;
            button7.Visible = false;
            button8.Visible = false;
            button9.Visible = false;
            textBox2.ReadOnly = true;
            textBox3.ReadOnly = true;
            textBox4.ReadOnly = true;
            textBox5.ReadOnly = true;
            textBox246.ReadOnly = true;
            spElementEdit = false;
            label5.Visible = false;
            comboBox2.Visible = false;
            checkedListBox1.Visible = true;
            visibleElementInfo(positionElementList);
            textBox2.Focus();
        }

        //Поиск по элементам
        private void button1_Click(object sender, EventArgs e)
        {
            Form2 form2 = new Form2(elementsList);
            form2.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionElementList = ClassSearchStatic.position;
                    visibleElementInfo(positionElementList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "Элемент с данным " + ClassSearchStatic.searchtype + " не найдена!");
                }
            }
        }

        //------------------------------СПРАВОЧНИК ПРЕДПРИЯТИЙ------------------------------
        //Отображение предприятия
        private void functionShowFactorys(int pos) 
        {
            if (!spFactoryEdit)
            {
                if (pos >= 0 && factorysList.Count > 0)
                {
                    textBox6.Text = Convert.ToString(factorysList[pos].getCode());
                    textBox7.Text = Convert.ToString(factorysList[pos].getUdal());
                    textBox8.Text = Convert.ToString(factorysList[pos].getName());
                    textBox9.Text = Convert.ToString(factorysList[pos].getAdress());
                    textBox10.Text = Convert.ToString(factorysList[pos].getFIO());
                    textBox11.Text = Convert.ToString(factorysList[pos].getINN());
                    textBox12.Text = Convert.ToString(factorysList[pos].getId());
                    textBox13.Text = Convert.ToString(factorysList[pos].getSend());
                }
                else
                {
                    textBox6.Text = "";
                    textBox7.Text = "";
                    textBox8.Text = "";
                    textBox9.Text = "";
                    textBox10.Text = "";
                    textBox11.Text = "";
                    textBox12.Text = "";
                    textBox13.Text = "";
                }
            }
        }

        //Кнопка назад
        private void button10_Click(object sender, EventArgs e)
        {
            createPositionFactory(0);
        }

        //Кнопка вперед
        private void button14_Click(object sender, EventArgs e)
        {
            createPositionFactory(1);
        }

        //Результ следующих предприятий
        private void createPositionFactory(int s)
        {
            if (s == 0)
            {
                if (positionFactoryList - 1 >= 0)
                    positionFactoryList--;
            }
            else
            {
                if (positionFactoryList + 1 < factorysList.Count)
                    positionFactoryList++;
            }
            functionShowFactorys(positionFactoryList);
        }

        //Кнопка добавления
        private void button11_Click(object sender, EventArgs e)
        {
            spFactoryEdit = true;
            textBox6.ReadOnly = false;
            textBox7.ReadOnly = false;
            textBox8.ReadOnly = false;
            textBox9.ReadOnly = false;
            textBox10.ReadOnly = false;
            textBox11.ReadOnly = false;
            textBox13.ReadOnly = false;
            textBox6.Text = "";
            textBox7.Text = "";
            textBox8.Text = "";
            textBox9.Text = "";
            textBox10.Text = "";
            textBox11.Text = "";
            textBox13.Text = "";
            button10.Visible = false;
            button11.Visible = false;
            button12.Visible = false;
            button13.Visible = false;
            button14.Visible = false;
            button15.Visible = false;
            button16.Visible = true;
            button17.Visible = true;
        }

        //Кнопка отмены добавления и редактирования
        private void button16_Click(object sender, EventArgs e)
        {
            functionDisableShowNewFactory();
        }

        //Функция отображения отмены добавления и редактирования
        private void functionDisableShowNewFactory()
        {
            spFactoryEdit = false;
            textBox6.ReadOnly = true;
            textBox7.ReadOnly = true;
            textBox8.ReadOnly = true;
            textBox9.ReadOnly = true;
            textBox10.ReadOnly = true;
            textBox11.ReadOnly = true;
            textBox13.ReadOnly = true;
            button10.Visible = true;
            button11.Visible = true;
            button12.Visible = true;
            button13.Visible = true;
            button14.Visible = true;
            button15.Visible = true;
            button16.Visible = false;
            button17.Visible = false;
            button18.Visible = false;
            functionShowFactorys(positionFactoryList);
        }

        //Кнопка подтверждение добавления
        private void button17_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox6.Text) && !string.IsNullOrWhiteSpace(textBox6.Text) && !string.IsNullOrEmpty(textBox8.Text) && !string.IsNullOrWhiteSpace(textBox8.Text) && !string.IsNullOrEmpty(textBox9.Text) && !string.IsNullOrWhiteSpace(textBox9.Text))
            {
                if (textBox6.Text.Length <= 6)
                {
                    String codeElementText = textBox6.Text;
                    if (codeElementText.Length < 6)
                    {
                        String newCodeElementText = "";
                        int countNewCode = 6 - codeElementText.Length;
                        while (countNewCode > 0)
                        {
                            newCodeElementText += "0";
                            countNewCode--;
                        }
                        codeElementText = newCodeElementText + codeElementText;
                    }
                    bool proverkaElement = false;
                    foreach (ClassFactorys el in factorysList)
                        if (el.getCode() == codeElementText)
                            proverkaElement = true;
                    if (!proverkaElement)
                    {
                        sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                        sqliteConnection.Open();
                        SQLiteCommand command = new SQLiteCommand("INSERT INTO [Factorys] (codeFactory,nameFactory,adress,FIO,INN,udal,send) VALUES (@codeFactory,@nameFactory,@adress,@FIO,@INN,@udal,@send)", sqliteConnection);
                        command.Parameters.AddWithValue("codeFactory", codeElementText);
                        command.Parameters.AddWithValue("nameFactory", textBox8.Text);
                        command.Parameters.AddWithValue("adress", textBox9.Text);
                        command.Parameters.AddWithValue("FIO", textBox10.Text);
                        command.Parameters.AddWithValue("INN", textBox11.Text);
                        command.Parameters.AddWithValue("udal", textBox7.Text);
                        command.Parameters.AddWithValue("send", textBox13.Text);
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно добавлены");
                        functionQueryFactorys();
                        functionDisableShowNewFactory();
                        positionFactoryList = factorysList.Count - 1;
                        functionShowFactorys(positionFactoryList);
                    }
                    else
                    {
                        functionMessageShow(1, "Предприятие с данным кодом уже записано в справочник!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Превышена длина поля 'Код завода'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код завода', 'Наименование' и 'Адрес' должны быть заполнены!");
            }
        }

        //Кнопка редактирования
        private void button12_Click(object sender, EventArgs e)
        {
            spFactoryEdit = true;
            textBox6.ReadOnly = false;
            textBox7.ReadOnly = false;
            textBox8.ReadOnly = false;
            textBox9.ReadOnly = false;
            textBox10.ReadOnly = false;
            textBox11.ReadOnly = false;
            textBox13.ReadOnly = false;
            button10.Visible = false;
            button11.Visible = false;
            button12.Visible = false;
            button13.Visible = false;
            button14.Visible = false;
            button15.Visible = false;
            button16.Visible = true;
            button18.Visible = true;
        }

        //Кнопка подтверждения редактирования
        private void button18_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox6.Text) && !string.IsNullOrWhiteSpace(textBox6.Text) && !string.IsNullOrEmpty(textBox8.Text) && !string.IsNullOrWhiteSpace(textBox8.Text) && !string.IsNullOrEmpty(textBox9.Text) && !string.IsNullOrWhiteSpace(textBox9.Text))
            {
                if (textBox6.Text.Length <= 6)
                {
                    String codeElementText = textBox6.Text;
                    if (codeElementText.Length < 6)
                    {
                        String newCodeElementText = "";
                        int countNewCode = 6 - codeElementText.Length;
                        while (countNewCode > 0)
                        {
                            newCodeElementText += "0";
                            countNewCode--;
                        }
                        codeElementText = newCodeElementText + codeElementText;
                    }
                    sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                    sqliteConnection.Open();
                    SQLiteCommand command = new SQLiteCommand("UPDATE [Factorys] SET [codeFactory]=@codeFactory,[nameFactory]=@nameFactory,[adress]=@adress,[FIO]=@FIO,[INN]=@INN,[udal]=@udal,[send]=@send WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox12.Text);
                    command.Parameters.AddWithValue("codeFactory", codeElementText);
                    command.Parameters.AddWithValue("nameFactory", textBox8.Text);
                    command.Parameters.AddWithValue("adress", textBox9.Text);
                    command.Parameters.AddWithValue("FIO", textBox10.Text);
                    command.Parameters.AddWithValue("INN", textBox11.Text);
                    command.Parameters.AddWithValue("udal", textBox7.Text);
                    command.Parameters.AddWithValue("send", textBox13.Text);
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Данные успешно обновлены");
                    functionQueryFactorys();
                    functionDisableShowNewFactory();
                    functionShowFactorys(positionFactoryList);
                }
                else
                {
                    functionMessageShow(1, "Превышена длина поля 'Код завода'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код завода', 'Наименование' и 'Адрес' должны быть заполнены!");
            }
        }

        //Кнопка удаления
        private void button13_Click(object sender, EventArgs e)
        {
            if (positionFactoryList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить предприятие?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                    sqliteConnection.Open();
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [Factorys] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox12.Text);
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Предприятие успешно удалено");
                    createPositionFactory(0);
                    functionShowFactorys(positionFactoryList);
                    functionQueryFactorys();
                }
            }
            else
            {
                functionMessageShow(2, "Выберите предприятие для удаления");
            }
        }

        //Кнопка поиска
        private void button15_Click(object sender, EventArgs e)
        {
            Form3 form3 = new Form3(factorysList);
            form3.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionFactoryList = ClassSearchStatic.position;
                    functionShowFactorys(positionFactoryList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "Предприятие с данным " + ClassSearchStatic.searchtype + " не найдена!");
                }
            }
        }

        //------------------------------СПРАВОЧНИК ПРЕГРАД------------------------------
        //Отображение преграды
        private void functionShowPregradi(int pos)
        {
            if (!spPregradEdit)
            {
                if (pos >= 0 && pregradsList.Count > 0)
                {
                    textBox15.Text = Convert.ToString(pregradsList[pos].getId());
                    textBox14.Text = Convert.ToString(pregradsList[pos].getCode());
                    comboBox3.Text = Convert.ToString(pregradsList[pos].getName());
                    textBox16.Text = Convert.ToString(pregradsList[pos].getSize());
                    textBox17.Text = Convert.ToString(pregradsList[pos].getVes());
                    textBox18.Text = Convert.ToString(pregradsList[pos].getCena());
                }
                else
                {
                    textBox15.Text = "";
                    textBox14.Text = "";
                    textBox16.Text = "";
                    textBox17.Text = "";
                    textBox18.Text = "";
                }
            }
        }

        //Кнопка назад
        private void button19_Click(object sender, EventArgs e)
        {
            createPositionPregrad(0);
        }

        //Кнопка добавления новых преград
        private void button20_Click(object sender, EventArgs e)
        {
            spPregradEdit = true;
            button19.Visible = false;
            button20.Visible = false;
            button21.Visible = false;
            button22.Visible = false;
            button23.Visible = false;
            button24.Visible = false;
            button25.Visible = true;
            button26.Visible = true;
            textBox14.ReadOnly = false;
            comboBox3.Enabled = true;
            textBox16.ReadOnly = false;
            textBox17.ReadOnly = false;
            textBox18.ReadOnly = false;
            textBox14.Text = "";
            textBox16.Text = "";
            textBox17.Text = "";
            textBox18.Text = "";
        }

        //Результ следующих преград
        private void createPositionPregrad(int s)
        {
            if (s == 0)
            {
                if (positionPregradList - 1 >= 0)
                    positionPregradList--;
            }
            else
            {
                if (positionPregradList + 1 < pregradsList.Count)
                    positionPregradList++;
            }
            functionShowPregradi(positionPregradList);
        }

        //Кнопка редактирования преград
        private void button21_Click(object sender, EventArgs e)
        {
            spPregradEdit = true;
            button19.Visible = false;
            button20.Visible = false;
            button21.Visible = false;
            button22.Visible = false;
            button23.Visible = false;
            button24.Visible = false;
            button25.Visible = true;
            button27.Visible = true;
            textBox14.ReadOnly = false;
            comboBox3.Enabled = true;
            textBox16.ReadOnly = false;
            textBox17.ReadOnly = false;
            textBox18.ReadOnly = false;
        }

        //Удаление преграды
        private void button22_Click(object sender, EventArgs e)
        {
            if (positionPregradList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить преграду?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                    sqliteConnection.Open();
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [PregradInfo] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox15.Text);
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Преграда успешно удалена");
                    functionQueryPregrads();
                    positionPregradList = pregradsList.Count - 1;
                    createPositionPregrad(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите преграду для удаления");
            }
        }

        //Кнопка вперед
        private void button23_Click(object sender, EventArgs e)
        {
            createPositionPregrad(1);
        }

        //Кнопка поиска
        private void button24_Click(object sender, EventArgs e)
        {
            Form4 form4 = new Form4(pregradsList);
            form4.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionPregradList = ClassSearchStatic.position;
                    functionShowPregradi(positionPregradList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "Преграда с данным " + ClassSearchStatic.searchtype + " не найдена!");
                }
            }
        }

        //Кнопка отмена
        private void button25_Click(object sender, EventArgs e)
        {
            functionDisableShowNewPregrad();
        }

        //Функция отмены добавления и редактирования
        private void functionDisableShowNewPregrad()
        {
            spPregradEdit = false;
            button19.Visible = true;
            button20.Visible = true;
            button21.Visible = true;
            button22.Visible = true;
            button23.Visible = true;
            button24.Visible = true;
            button25.Visible = false;
            button26.Visible = false;
            button27.Visible = false;
            textBox14.ReadOnly = true;
            comboBox3.Enabled = false;
            textBox16.ReadOnly = true;
            textBox17.ReadOnly = true;
            textBox18.ReadOnly = true;
            functionShowPregradi(positionPregradList);
        }

        //Кнопка подтверждение добавления
        private void button26_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox14.Text) && !string.IsNullOrWhiteSpace(textBox14.Text) && !string.IsNullOrEmpty(textBox16.Text) && !string.IsNullOrWhiteSpace(textBox16.Text) && !string.IsNullOrEmpty(comboBox3.Text) && !string.IsNullOrWhiteSpace(comboBox3.Text))
            {
                if (textBox14.Text.Length <= 10)
                {
                    String codeElementText = textBox14.Text;
                    int namePregrad = 0;
                    bool proverkaElement = false;
                    foreach (ClassPregradsName el in pregradsListName)
                    {
                        if (el.name == comboBox3.Text)
                            namePregrad = el.id;
                    }
                    foreach (ClassPregrads el in pregradsList)
                        if (el.getCode() == codeElementText)
                            proverkaElement = true;
                    if (!proverkaElement)
                    {
                        sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                        sqliteConnection.Open();
                        SQLiteCommand command = new SQLiteCommand("INSERT INTO [PregradInfo] (codePregradi,sizePregradi,vesPregradi,cenaPregradi,namePregradi) VALUES (@codePregradi,@sizePregradi,@vesPregradi,@cenaPregradi,@namePregradi)", sqliteConnection);
                        command.Parameters.AddWithValue("codePregradi", codeElementText);
                        command.Parameters.AddWithValue("sizePregradi", textBox16.Text);
                        double prPregrada = 0.0;
                        if (textBox17.Text.Length > 0)
                            prPregrada = Convert.ToDouble(textBox17.Text);
                        double prCena = 0.0;
                        if (textBox18.Text.Length > 0)
                            prCena = Convert.ToDouble(textBox18.Text);
                        command.Parameters.AddWithValue("vesPregradi", prPregrada);
                        command.Parameters.AddWithValue("cenaPregradi", prCena);
                        command.Parameters.AddWithValue("namePregradi", namePregrad);
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно добавлены");
                        functionQueryPregrads();
                        functionDisableShowNewPregrad();
                        positionPregradList = pregradsList.Count - 1;
                        functionShowPregradi(positionPregradList);
                    }
                    else
                    {
                        functionMessageShow(1, "Преграда с данным кодом уже записана в справочник!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Превышена длина поля 'Код преграды'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код преграды', 'Наименование' и 'Размер преграды' должны быть заполнены!");
            }
        }

        //Функция отображения видов преград
        private void functionShowVidPregrad()
        {
            foreach (ClassPregradsName namePr in pregradsListName)
                comboBox3.Items.Add(namePr.name);
        }

        //Подтверждение редактирования
        private void button27_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox14.Text) && !string.IsNullOrWhiteSpace(textBox14.Text) && !string.IsNullOrEmpty(textBox16.Text) && !string.IsNullOrWhiteSpace(textBox16.Text) && !string.IsNullOrEmpty(comboBox3.Text) && !string.IsNullOrWhiteSpace(comboBox3.Text))
            {
                if (textBox14.Text.Length <= 10)
                {
                    String codeElementText = textBox14.Text;
                    int namePregrad = 0;
                    foreach (ClassPregradsName el in pregradsListName)
                    {
                        if (el.name == comboBox3.Text)
                            namePregrad = el.id;
                    }
                    sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                    sqliteConnection.Open();
                    SQLiteCommand command = new SQLiteCommand("UPDATE [PregradInfo] SET [codePregradi]=@codePregradi,[sizePregradi]=@sizePregradi,[vesPregradi]=@vesPregradi,[cenaPregradi]=@cenaPregradi,[namePregradi]=@namePregradi WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox15.Text);
                    command.Parameters.AddWithValue("codePregradi", codeElementText);
                    command.Parameters.AddWithValue("sizePregradi", textBox16.Text);
                    command.Parameters.AddWithValue("vesPregradi", textBox17.Text);
                    command.Parameters.AddWithValue("cenaPregradi", textBox18.Text);
                    command.Parameters.AddWithValue("namePregradi", namePregrad);
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Данные успешно обновлены");
                    functionQueryPregrads();
                    functionDisableShowNewPregrad();
                    functionShowPregradi(positionPregradList);
                }
                else
                {
                    functionMessageShow(1, "Превышена длина поля 'Код преграды'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код преграды', 'Наименование' и 'Размер преграды' должны быть заполнены!");
            }
        }
        //------------------------------СПРАВОЧНИК НЕНУЖНЫХ ВК------------------------------
        //Отображение ненужных вк
        private void functionShowNoneVk(int pos)
        {
            if (!spNoneVkEdit)
            {
                if (pos >= 0 && noneVkList.Count > 0)
                {
                    comboBox4.Text = Convert.ToString(noneVkList[pos].codeElement);
                    textBox23.Text = Convert.ToString(noneVkList[pos].nameVida);
                    textBox24.Text = Convert.ToString(noneVkList[pos].nameElement);
                    comboBox5.Text = Convert.ToString(noneVkList[pos].codeVida);
                    textBox26.Text = Convert.ToString(noneVkList[pos].id);
                }
                else
                {
                    textBox23.Text = "";
                    textBox24.Text = "";
                }
            }
        }

        //Кнопка назад
        private void button37_Click(object sender, EventArgs e)
        {
            createPositionNoneVk(0);
        }

        //Позиция ненужных вк
        private void createPositionNoneVk(int s)
        {
            if (s == 0)
            {
                if (positionNoneVk - 1 >= 0)
                    positionNoneVk--;
            }
            else
            {
                if (positionNoneVk + 1 < noneVkList.Count)
                    positionNoneVk++;
            }
            functionShowNoneVk(positionNoneVk);
        }

        //Кнопка добавить
        private void button38_Click(object sender, EventArgs e)
        {
            spNoneVkEdit = true;
            functionFillComboBoxNoneVk();
            comboBox4.Enabled = true;
            comboBox5.Enabled = true;
            button37.Visible = false;
            button38.Visible = false;
            button39.Visible = false;
            button40.Visible = false;
            button41.Visible = false;
            button42.Visible = false;
            button43.Visible = true;
            button44.Visible = true;
            comboBox4.Focus();
        }

        //Кнопка редактировать
        private void button39_Click(object sender, EventArgs e)
        {
            spNoneVkEdit = true;
            functionFillComboBoxNoneVk();
            comboBox4.Enabled = true;
            comboBox5.Enabled = true;
            button37.Visible = false;
            button38.Visible = false;
            button39.Visible = false;
            button40.Visible = false;
            button41.Visible = false;
            button42.Visible = false;
            button43.Visible = true;
            button45.Visible = true;
            comboBox4.Focus();
        }

        //Кнопка удалить
        private void button40_Click(object sender, EventArgs e)
        {
            if (positionNoneVk != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить элемент?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                    sqliteConnection.Open();
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [noneVK] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox26.Text);
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Элемент успешно удалено");
                    functionQueryNoneVk();
                    createPositionNoneVk(0);
                    functionShowNoneVk(positionNoneVk);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите элемент для удаления");
            }
        }

        //Кнопка вперед
        private void button41_Click(object sender, EventArgs e)
        {
            createPositionNoneVk(1);
        }

        //Кнопка поиска
        private void button42_Click(object sender, EventArgs e)
        {
            functionFillComboBoxNoneVk();
            Form6 form6 = new Form6(noneVkList);
            form6.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionNoneVk = ClassSearchStatic.position;
                    functionShowNoneVk(positionNoneVk);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "Элемент с данным " + ClassSearchStatic.searchtype + " не найден!");
                }
            }
        }

        //Заполнение комбобоксов ненужных вк
        private void functionFillComboBoxNoneVk()
        {
            comboBox4.Items.Clear();
            comboBox5.Items.Clear();
            foreach (ClassElements el in elementsList)
                comboBox4.Items.Add(el.getCode());
            foreach (ClassVidIsp el in vidIspList)
                comboBox5.Items.Add(el.code);
        }

        private void comboBox4_SelectedIndexChanged(object sender, EventArgs e)
        {
            foreach (ClassElements el in elementsList)
                if (el.getCode() == comboBox4.Text)
                    textBox24.Text = el.getName();
        }

        private void comboBox5_SelectedIndexChanged(object sender, EventArgs e)
        {
            foreach (ClassVidIsp el in vidIspList)
                if (el.code == comboBox5.Text)
                    textBox23.Text = el.name;
        }

        //Кнопка отмены добавления и редактирования
        private void button43_Click(object sender, EventArgs e)
        {
            functionDisableShowNewNoneVk();
        }

        //Функция отмены отображения кнопки
        private void functionDisableShowNewNoneVk()
        {
            spNoneVkEdit = false;
            comboBox4.Enabled = false;
            comboBox5.Enabled = false;
            button37.Visible = true;
            button38.Visible = true;
            button39.Visible = true;
            button40.Visible = true;
            button41.Visible = true;
            button42.Visible = true;
            button43.Visible = false;
            button44.Visible = false;
            button45.Visible = false;
        }

        //Кнопка подтверждения добавления
        private void button44_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(comboBox4.Text) && !string.IsNullOrWhiteSpace(comboBox4.Text) && !string.IsNullOrEmpty(comboBox5.Text) && !string.IsNullOrWhiteSpace(comboBox5.Text))
            {
                int codeEl = 1;
                int vidIsp = 1;
                foreach (ClassElements el in elementsList)
                    if (el.getCode() == comboBox4.Text)
                    {
                        codeEl = el.getId();
                        break;
                    }
                foreach (ClassVidIsp el in vidIspList)
                    if (el.code == comboBox5.Text)
                    {
                        vidIsp = el.id;
                        break;
                    }
                sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                sqliteConnection.Open();
                SQLiteCommand command = new SQLiteCommand("INSERT INTO [noneVK] (codeElementVK,vidIspVK) VALUES (@codeElementVK,@vidIspVK)", sqliteConnection);
                command.Parameters.AddWithValue("codeElementVK", codeEl);
                command.Parameters.AddWithValue("vidIspVK", vidIsp);
                command.ExecuteNonQuery();
                sqliteConnection.Close();
                functionMessageShow(2, "Данные успешно добавлены");
                functionQueryNoneVk();
                functionDisableShowNewNoneVk();
                positionNoneVk = noneVkList.Count - 1;
                functionShowNoneVk(positionNoneVk);
            }
            else
            {
                functionMessageShow(1, "Поля 'Код элемента' и 'Код вида испытания' должны быть заполнены!");
            }
        }

        //Подтверждение редактирования
        private void button45_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(comboBox4.Text) && !string.IsNullOrWhiteSpace(comboBox4.Text) && !string.IsNullOrEmpty(comboBox5.Text) && !string.IsNullOrWhiteSpace(comboBox5.Text))
            {
                int codeEl = 1;
                int vidIsp = 1;
                foreach (ClassElements el in elementsList)
                    if (el.getCode() == comboBox4.Text)
                    {
                        codeEl = el.getId();
                        break;
                    }
                foreach (ClassVidIsp el in vidIspList)
                    if (el.code == comboBox4.Text)
                    {
                        vidIsp = el.id;
                        break;
                    }
                sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                sqliteConnection.Open();
                SQLiteCommand command = new SQLiteCommand("UPDATE [noneVK] [codeElementVK]=@codeElementVK,[vidIspVK]=@vidIspVK WHERE [id]=@id", sqliteConnection);
                command.Parameters.AddWithValue("codeElementVK", codeEl);
                command.Parameters.AddWithValue("vidIspVK", vidIsp);
                command.Parameters.AddWithValue("id", textBox26.Text);
                command.ExecuteNonQuery();
                sqliteConnection.Close();
                functionMessageShow(2, "Данные успешно обновлены");
                functionQueryNoneVk();
                functionDisableShowNewNoneVk();
                functionShowNoneVk(positionNoneVk);
            }
            else
            {
                functionMessageShow(1, "Поля 'Код элемента' и 'Код вида испытания' должны быть заполнены!");
            }
        }
        //------------------------------СПРАВОЧНИК ВИДОВ ИСПЫТАНИЙ------------------------------
        //Отображение вида испытаний
        private void functionShowVidIsp(int pos)
        {
            if (!spVidIspEdit)
            {
                if (pos >= 0 && vidIspList.Count > 0)
                {
                    textBox21.Text = Convert.ToString(vidIspList[pos].id);
                    textBox19.Text = Convert.ToString(vidIspList[pos].code);
                    textBox20.Text = Convert.ToString(vidIspList[pos].name);
                }
                else
                {
                    textBox21.Text = "";
                    textBox19.Text = "";
                    textBox20.Text = "";
                }
            }
        }

        //Кнопка назад
        private void button28_Click(object sender, EventArgs e)
        {
            createPositionVidIsp(0);
        }

        //Позиция вида испытаний
        private void createPositionVidIsp(int s)
        {
            if (s == 0)
            {
                if (positionVidIspList - 1 >= 0)
                    positionVidIspList--;
            }
            else
            {
                if (positionVidIspList + 1 < vidIspList.Count)
                    positionVidIspList++;
            }
            functionShowVidIsp(positionVidIspList);
        }

        //Кнопка добавить
        private void button29_Click(object sender, EventArgs e)
        {
            spVidIspEdit = true;
            button28.Visible = false;
            button29.Visible = false;
            button30.Visible = false;
            button31.Visible = false;
            button32.Visible = false;
            button33.Visible = false;
            textBox19.ReadOnly = false;
            textBox20.ReadOnly = false;
            button34.Visible = true;
            button35.Visible = true;
            textBox19.Text = "";
            textBox20.Text = "";
        }

        //Кнопка редактировать
        private void button30_Click(object sender, EventArgs e)
        {
            spVidIspEdit = true;
            button28.Visible = false;
            button29.Visible = false;
            button30.Visible = false;
            button31.Visible = false;
            button32.Visible = false;
            button33.Visible = false;
            textBox19.ReadOnly = false;
            textBox20.ReadOnly = false;
            button34.Visible = true;
            button36.Visible = true;
        }

        //Кнопка удалить
        private void button31_Click(object sender, EventArgs e)
        {
            if (positionVidIspList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить вид испытания?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                    sqliteConnection.Open();
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [VidIsp] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox21.Text);
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Вид испытания успешно удален");
                    functionQueryVidIsp();
                    createPositionVidIsp(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите вид испытания для удаления");
            }
        }

        //Кнопка вперед
        private void button32_Click(object sender, EventArgs e)
        {
            createPositionVidIsp(1);
        }

        //Кнопка поиска
        private void button33_Click(object sender, EventArgs e)
        {
            Form5 form5 = new Form5(vidIspList);
            form5.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionVidIspList = ClassSearchStatic.position;
                    functionShowVidIsp(positionVidIspList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "Вид испытания с данным " + ClassSearchStatic.searchtype + " не найден!");
                }
            }
        }

        //Кнопка отмены добавления и редактирования
        private void button34_Click(object sender, EventArgs e)
        {
            functionDisableShoeNewVidIsp();
        }

        //Функция отмены отображения
        private void functionDisableShoeNewVidIsp()
        {
            spVidIspEdit = false;
            button28.Visible = true;
            button29.Visible = true;
            button30.Visible = true;
            button31.Visible = true;
            button32.Visible = true;
            button33.Visible = true;
            textBox19.ReadOnly = true;
            textBox20.ReadOnly = true;
            button34.Visible = false;
            button35.Visible = false;
            button36.Visible = false;
            functionShowVidIsp(positionVidIspList);
        }

        //Подтверждение добавления
        private void button35_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox19.Text) && !string.IsNullOrWhiteSpace(textBox19.Text) && !string.IsNullOrEmpty(textBox20.Text) && !string.IsNullOrWhiteSpace(textBox20.Text))
            {
                if (textBox19.Text.Length <= 3)
                {
                    String codeElementText = textBox19.Text;
                    bool proverkaElement = false;
                    foreach (ClassVidIsp el in vidIspList)
                        if (el.code == codeElementText)
                            proverkaElement = true;
                    if (!proverkaElement)
                    {
                        sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                        sqliteConnection.Open();
                        SQLiteCommand command = new SQLiteCommand("INSERT INTO [VidIsp] (codeVida,nameVida) VALUES (@codeVida,@nameVida)", sqliteConnection);
                        command.Parameters.AddWithValue("codeVida", codeElementText);
                        command.Parameters.AddWithValue("nameVida", textBox20.Text);
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно добавлены");
                        functionQueryVidIsp();
                        functionDisableShoeNewVidIsp();
                        positionVidIspList = vidIspList.Count - 1;
                        functionShowVidIsp(positionVidIspList);
                    }
                    else
                    {
                        functionMessageShow(1, "Вид испытания с данным кодом уже записан в справочник!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Превышена длина поля 'Код вида испытания'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код вида испытания' и 'Наименование вида испытания' должны быть заполнены!");
            }
        }

        //Кнопка подтверждение редактирования
        private void button36_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox19.Text) && !string.IsNullOrWhiteSpace(textBox19.Text) && !string.IsNullOrEmpty(textBox20.Text) && !string.IsNullOrWhiteSpace(textBox20.Text))
            {
                if (textBox19.Text.Length <= 3)
                {
                    sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                    sqliteConnection.Open();
                    String codeElementText = textBox19.Text;
                    SQLiteCommand command = new SQLiteCommand("UPDATE [VidIsp] SET [codeVida]=@codeVida,[nameVida]=@nameVida WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox21.Text);
                    command.Parameters.AddWithValue("codeVida", codeElementText);
                    command.Parameters.AddWithValue("nameVida", textBox20.Text);
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Данные успешно обновлены");
                    functionQueryVidIsp();
                    functionDisableShoeNewVidIsp();
                    functionShowVidIsp(positionVidIspList);
                }
                else
                {
                    functionMessageShow(1, "Превышена длина поля 'Код вида испытания'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код вида испытания' и 'Наименование вида испытания' должны быть заполнены!");
            }
        }

        //------------------------------СПРАВОЧНИК МАТ ЧАСТИ------------------------------
        //Функция отображение мат части
        private void functionShowMC(int pos)
        {
            if (!spMCEdit)
            {
                if (pos >= 0 && mcList.Count > 0)
                {
                    textBox30.Text = Convert.ToString(mcList[pos].codeMC3);
                    textBox31.Text = Convert.ToString(mcList[pos].codeMC5);
                    textBox32.Text = Convert.ToString(mcList[pos].codeMVN);
                    textBox33.Text = Convert.ToString(mcList[pos].socrName);
                    textBox34.Text = Convert.ToString(mcList[pos].fullName);
                    textBox35.Text = Convert.ToString(mcList[pos].codeFactory);
                    textBox36.Text = Convert.ToString(mcList[pos].cena);
                    textBox37.Text = Convert.ToString(mcList[pos].id);
                    textBox73.Text = Convert.ToString(mcList[pos].verySocrName);
                }
                else
                {
                    textBox30.Text = "";
                    textBox31.Text = "";
                    textBox32.Text = "";
                    textBox33.Text = "";
                    textBox34.Text = "";
                    textBox35.Text = "";
                    textBox36.Text = "";
                    textBox37.Text = "";
                    textBox73.Text = "";
                }
            }
        }

        //Позиция мат части
        private void createPositionMC(int s)
        {
            if (s == 0)
            {
                if (positionMC - 1 >= 0)
                    positionMC--;
            }
            else
            {
                if (positionMC + 1 < mcList.Count)
                    positionMC++;
            }
            functionShowMC(positionMC);
        }

        //Назад
        private void button59_Click(object sender, EventArgs e)
        {
            createPositionMC(0);
        }

        //Добавить
        private void button58_Click(object sender, EventArgs e)
        {
            spMCEdit = true;
            button55.Visible = false;
            button56.Visible = false;
            button57.Visible = false;
            button58.Visible = false;
            button59.Visible = false;
            button60.Visible = false;
            button61.Visible = true;
            button62.Visible = true;
            textBox30.ReadOnly = false;
            textBox31.ReadOnly = false;
            textBox32.ReadOnly = false;
            textBox33.ReadOnly = false;
            textBox34.ReadOnly = false;
            textBox35.ReadOnly = false;
            textBox36.ReadOnly = false;
            textBox37.ReadOnly = false;
            textBox73.ReadOnly = false;
            textBox30.Text = "";
            textBox31.Text = "";
            textBox32.Text = "";
            textBox33.Text = "";
            textBox34.Text = "";
            textBox35.Text = "";
            textBox36.Text = "";
            textBox37.Text = "";
            textBox73.Text = "";
        }

        //Редактировать
        private void button57_Click(object sender, EventArgs e)
        {
            spMCEdit = true;
            button55.Visible = false;
            button56.Visible = false;
            button57.Visible = false;
            button58.Visible = false;
            button59.Visible = false;
            button60.Visible = false;
            button61.Visible = true;
            button63.Visible = true;
            textBox30.ReadOnly = false;
            textBox31.ReadOnly = false;
            textBox32.ReadOnly = false;
            textBox33.ReadOnly = false;
            textBox34.ReadOnly = false;
            textBox35.ReadOnly = false;
            textBox36.ReadOnly = false;
            textBox37.ReadOnly = false;
            textBox73.ReadOnly = false;
        }

        //Удалить
        private void button56_Click(object sender, EventArgs e)
        {
            if (positionMC != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить матчасть?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                    sqliteConnection.Open();
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [MatChast] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox37.Text);
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Матчасть успешно удалена");
                    functionQueryMC();
                    createPositionMC(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите матчасть для удаления");
            }
        }

        //Вперед
        private void button55_Click(object sender, EventArgs e)
        {
            createPositionMC(1);
        }

        //Поиск
        private void button60_Click(object sender, EventArgs e)
        {
            Form7 form7 = new Form7(mcList);
            form7.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionMC = ClassSearchStatic.position;
                    functionShowMC(positionMC);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "МатЧасть с данным " + ClassSearchStatic.searchtype + " не найдена!");
                }
            }
        }

        //Кнопка отмены добавления и редактирования
        private void button61_Click(object sender, EventArgs e)
        {
            functionDisableShowNewMC();
        }

        //Функция отмены добавления и редактирования
        private void functionDisableShowNewMC()
        {
            spMCEdit = false;
            button55.Visible = true;
            button56.Visible = true;
            button57.Visible = true;
            button58.Visible = true;
            button59.Visible = true;
            button60.Visible = true;
            button61.Visible = false;
            button62.Visible = false;
            button63.Visible = false;
            textBox30.ReadOnly = true;
            textBox31.ReadOnly = true;
            textBox32.ReadOnly = true;
            textBox33.ReadOnly = true;
            textBox34.ReadOnly = true;
            textBox35.ReadOnly = true;
            textBox36.ReadOnly = true;
            textBox37.ReadOnly = true;
            textBox73.ReadOnly = true;
            functionShowMC(positionMC);
        }

        //Подтверждение добавления
        private void button62_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox30.Text) && !string.IsNullOrWhiteSpace(textBox30.Text) && !string.IsNullOrEmpty(textBox31.Text) && !string.IsNullOrWhiteSpace(textBox31.Text))
            {
                if (textBox30.Text.Length <= 4)
                {
                    if (textBox31.Text.Length <= 5)
                    {
                        String codeElementText = textBox30.Text;
                        bool proverkaElement = false;
                        foreach (ClassMC el in mcList)
                            if (el.codeMC3 == codeElementText)
                                proverkaElement = true;
                        if (!proverkaElement)
                        {
                            string factoryId = "";
                            foreach (ClassFactorys el in factorysList)
                                if (el.getCode() == textBox35.Text)
                                    factoryId = Convert.ToString(el.getId());
                            double cenaMC = 0;
                            if (textBox36.Text.Length > 0)
                                cenaMC = Convert.ToDouble(textBox36.Text);
                            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                            sqliteConnection.Open();
                            SQLiteCommand command;
                            if (factoryId.Length > 0)
                                command = new SQLiteCommand("INSERT INTO [MatChast] (codeMC3,codeMC5,codeMVN,socrNameSistem,nameSistem,fullNameSistem,codeFactoryMC,cenaMC) VALUES (@codeMC3,@codeMC5,@codeMVN,@socrNameSistem,@nameSistem,@fullNameSistem,@codeFactoryMC,@cenaMC)", sqliteConnection);
                            else
                                command = new SQLiteCommand("INSERT INTO [MatChast] (codeMC3,codeMC5,codeMVN,socrNameSistem,nameSistem,fullNameSistem,cenaMC) VALUES (@codeMC3,@codeMC5,@codeMVN,@socrNameSistem,@nameSistem,@fullNameSistem,@cenaMC)", sqliteConnection);
                            command.Parameters.AddWithValue("codeMC3", codeElementText);
                            command.Parameters.AddWithValue("codeMC5", textBox31.Text);
                            command.Parameters.AddWithValue("codeMVN", textBox32.Text);
                            command.Parameters.AddWithValue("socrNameSistem", textBox73.Text);
                            command.Parameters.AddWithValue("nameSistem", textBox33.Text);
                            command.Parameters.AddWithValue("fullNameSistem", textBox34.Text);
                            command.Parameters.AddWithValue("codeFactoryMC", factoryId);
                            command.Parameters.AddWithValue("cenaMC", cenaMC);
                            command.ExecuteNonQuery();
                            sqliteConnection.Close();
                            functionMessageShow(2, "Данные успешно добавлены");
                            functionQueryMC();
                            functionDisableShowNewMC();
                            positionMC = mcList.Count - 1;
                            functionShowMC(positionMC);
                        }
                        else
                        {
                            functionMessageShow(1, "МатЧасть с данным 3-х значным кодом уже записана в справочник!");
                        }
                    }
                    else
                    {
                        functionMessageShow(1, "Превышена длина поля '5-ти значный код'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Превышена длина поля '3-х значный код'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля '3-х значный код' и '5-ти значный код' должны быть заполнены!");
            }
        }

        //Подтверждение редактирования
        private void button63_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox30.Text) && !string.IsNullOrWhiteSpace(textBox30.Text) && !string.IsNullOrEmpty(textBox31.Text) && !string.IsNullOrWhiteSpace(textBox31.Text))
            {
                if (textBox30.Text.Length <= 4)
                {
                    if (textBox31.Text.Length <= 5)
                    {
                        String codeElementText = textBox30.Text;
                        string factoryId = "";
                        foreach (ClassFactorys el in factorysList)
                            if (el.getCode() == textBox35.Text)
                                factoryId = Convert.ToString(el.getId());
                        double cenaMC = 0;
                        if (textBox36.Text.Length > 0)
                            cenaMC = Convert.ToDouble(textBox36.Text);
                        sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                        sqliteConnection.Open();
                        SQLiteCommand command;
                        if (factoryId.Length > 0)
                            command = new SQLiteCommand("UPDATE [MatChast] SET [codeMC3]=@codeMC3,[codeMC5]=@codeMC5,[codeMVN]=@codeMVN,[socrNameSistem]=@socrNameSistem,[nameSistem]=@nameSistem,[fullNameSistem]=@fullNameSistem,[codeFactoryMC]=@codeFactoryMC,[cenaMC]=@cenaMC WHERE [id]=@id", sqliteConnection);
                        else
                            command = new SQLiteCommand("UPDATE [MatChast] SET [codeMC3]=@codeMC3,[codeMC5]=@codeMC5,[codeMVN]=@codeMVN,[socrNameSistem]=@socrNameSistem,[nameSistem]=@nameSistem,[fullNameSistem]=@fullNameSistem,[cenaMC]=@cenaMC WHERE [id]=@id", sqliteConnection);
                        command.Parameters.AddWithValue("id", textBox37.Text);
                        command.Parameters.AddWithValue("codeMC3", codeElementText);
                        command.Parameters.AddWithValue("codeMC5", textBox31.Text);
                        command.Parameters.AddWithValue("codeMVN", textBox32.Text);
                        command.Parameters.AddWithValue("socrNameSistem", textBox73.Text);
                        command.Parameters.AddWithValue("nameSistem", textBox33.Text);
                        command.Parameters.AddWithValue("fullNameSistem", textBox34.Text);
                        command.Parameters.AddWithValue("codeFactoryMC", factoryId);
                        command.Parameters.AddWithValue("cenaMC", cenaMC);
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно обновлены");
                        functionQueryMC();
                        functionDisableShowNewMC();
                        functionShowMC(positionMC);
                    }
                    else
                    {
                        functionMessageShow(1, "Превышена длина поля '5-ти значный код'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Превышена длина поля '3-х значный код'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля '3-х значный код' и '5-ти значный код' должны быть заполнены!");
            }
        }
        //------------------------------СПРАВОЧНИК ЕДИНИЦ ИЗМЕРЕНИЙ------------------------------
        //Функция отображение единиц измерений
        private void functionShowEdIzm(int pos)
        {
            if (!spEdIzmEdit)
            {
                if (pos >= 0 && edIzmList.Count > 0)
                {
                    textBox29.Text = Convert.ToString(edIzmList[pos].id);
                    textBox22.Text = Convert.ToString(edIzmList[pos].code2);
                    textBox25.Text = Convert.ToString(edIzmList[pos].code3);
                    textBox27.Text = Convert.ToString(edIzmList[pos].fName);
                    textBox28.Text = Convert.ToString(edIzmList[pos].sName);
                }
                else
                {
                    textBox29.Text = "";
                    textBox22.Text = "";
                    textBox25.Text = "";
                    textBox27.Text = "";
                    textBox28.Text = "";
                }
            }
        }

        //Кнопка назад
        private void button50_Click(object sender, EventArgs e)
        {
            createPositionEdIzm(0);
        }

        //Позиция единиц измерений
        private void createPositionEdIzm(int s)
        {
            if (s == 0)
            {
                if (positionEdIzm - 1 >= 0)
                    positionEdIzm--;
            }
            else
            {
                if (positionEdIzm + 1 < edIzmList.Count)
                    positionEdIzm++;
            }
            functionShowEdIzm(positionEdIzm);
        }

        //Кнопка добавить
        private void button49_Click(object sender, EventArgs e)
        {
            spEdIzmEdit = true;
            textBox22.ReadOnly = false;
            textBox25.ReadOnly = false;
            textBox27.ReadOnly = false;
            textBox28.ReadOnly = false;
            button46.Visible = false;
            button47.Visible = false;
            button48.Visible = false;
            button49.Visible = false;
            button50.Visible = false;
            button51.Visible = false;
            button52.Visible = true;
            button53.Visible = true;
            textBox22.Text = "";
            textBox25.Text = "";
            textBox27.Text = "";
            textBox28.Text = "";
        }

        //Кнопка редактировать
        private void button48_Click(object sender, EventArgs e)
        {
            spEdIzmEdit = true;
            textBox22.ReadOnly = false;
            textBox25.ReadOnly = false;
            textBox27.ReadOnly = false;
            textBox28.ReadOnly = false;
            button46.Visible = false;
            button47.Visible = false;
            button48.Visible = false;
            button49.Visible = false;
            button50.Visible = false;
            button51.Visible = false;
            button52.Visible = true;
            button54.Visible = true;
        }

        //Кнопка удаления
        private void button47_Click(object sender, EventArgs e)
        {
            if (positionEdIzm != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить единицу измерения?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [EdIzm] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox29.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Единица измерения успешно удалена");
                    functionQueryEdIzm();
                    createPositionEdIzm(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите единицу измерения для удаления");
            }
        }

        //Кнопка вперед
        private void button46_Click(object sender, EventArgs e)
        {
            createPositionEdIzm(1);
        }

        private void button51_Click(object sender, EventArgs e)
        {

        }

        //Кнопка отмены добавления + редактирования
        private void button52_Click(object sender, EventArgs e)
        {
            functionDisableShowNewEdIzm();
        }

        //Функция отмены отображения
        private void functionDisableShowNewEdIzm()
        {
            spEdIzmEdit = false;
            textBox22.ReadOnly = true;
            textBox25.ReadOnly = true;
            textBox27.ReadOnly = true;
            textBox28.ReadOnly = true;
            button46.Visible = true;
            button47.Visible = true;
            button48.Visible = true;
            button49.Visible = true;
            button50.Visible = true;
            button51.Visible = true;
            button52.Visible = false;
            button53.Visible = false;
            button54.Visible = false;
            functionShowEdIzm(positionEdIzm);
        }

        //Кнопка подтверждения добавления
        private void button53_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox27.Text) && !string.IsNullOrWhiteSpace(textBox27.Text))
            {
                if (textBox22.Text.Length <= 2 || textBox25.Text.Length <= 3)
                {
                    SQLiteCommand command = new SQLiteCommand("INSERT INTO [EdIzm] (codeEdIzm2,cpdeEdIzm3,nameFull,nameSocr) VALUES (@codeEdIzm2,@cpdeEdIzm3,@nameFull,@nameSocr)", sqliteConnection);
                    command.Parameters.AddWithValue("codeEdIzm2", textBox22.Text);
                    command.Parameters.AddWithValue("cpdeEdIzm3", textBox25.Text);
                    command.Parameters.AddWithValue("nameFull", textBox27.Text);
                    command.Parameters.AddWithValue("nameSocr", textBox28.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Данные успешно добавлены");
                    functionQueryEdIzm();
                    functionDisableShowNewEdIzm();
                    positionEdIzm = edIzmList.Count - 1;
                    functionShowEdIzm(positionEdIzm);
                }
                else
                {
                    functionMessageShow(1, "Превышена длина поля 'Код измерения'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                }
            }
            else
            {
                functionMessageShow(1, "Поле 'Полное наименование' должно быть заполнено!");
            }
        }

        //Подтверждение редактирования
        private void button54_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox27.Text) && !string.IsNullOrWhiteSpace(textBox27.Text))
            {
                if (textBox22.Text.Length <= 2 || textBox25.Text.Length <= 3)
                {
                    SQLiteCommand command = new SQLiteCommand("UPDATE [EdIzm] SET [codeEdIzm2]=@codeEdIzm2,[cpdeEdIzm3]=@cpdeEdIzm3,[nameFull]=@nameFull,[nameSocr]=@nameSocr WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox29.Text);
                    command.Parameters.AddWithValue("codeEdIzm2", textBox22.Text);
                    command.Parameters.AddWithValue("cpdeEdIzm3", textBox25.Text);
                    command.Parameters.AddWithValue("nameFull", textBox27.Text);
                    command.Parameters.AddWithValue("nameSocr", textBox28.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Данные успешно обновлены");
                    functionQueryEdIzm();
                    functionDisableShowNewEdIzm();
                    positionEdIzm = edIzmList.Count - 1;
                    functionShowEdIzm(positionEdIzm);
                }
                else
                {
                    functionMessageShow(1, "Превышена длина поля 'Код измерения'!\nПроверьте введенные данные или обратитесь к системному администратору!");
                }
            }
            else
            {
                functionMessageShow(1, "Поле 'Полное наименование' должно быть заполнено!");
            }
        }

        //------------------------------СПРАВОЧНИК ПОЛИГОНОВ------------------------------
        //Функция отображение полигонов
        private void functionShowPoligons(int pos)
        {
            if (!spPoligonsEdit)
            {
                if (pos >= 0 && poligonsList.Count > 0)
                {
                    textBox38.Text = Convert.ToString(poligonsList[pos].numberPl);
                    textBox39.Text = Convert.ToString(poligonsList[pos].namePl);
                    textBox40.Text = Convert.ToString(poligonsList[pos].codeFactory);
                    textBox41.Text = Convert.ToString(poligonsList[pos].id);
                }
                else
                {
                    textBox38.Text = "";
                    textBox39.Text = "";
                    textBox40.Text = "";
                    textBox41.Text = "";
                }
            }
        }

        //Позиция полигонов
        private void createPositionPoligons(int s)
        {
            if (s == 0)
            {
                if (positionPoligonsList - 1 >= 0)
                    positionPoligonsList--;
            }
            else
            {
                if (positionPoligonsList + 1 < poligonsList.Count)
                    positionPoligonsList++;
            }
            functionShowPoligons(positionPoligonsList);
        }
        //Назад
        private void button71_Click(object sender, EventArgs e)
        {
            createPositionPoligons(0);
        }

        //Добавить
        private void button70_Click(object sender, EventArgs e)
        {
            spPoligonsEdit = true;
            button67.Visible = false;
            button68.Visible = false;
            button69.Visible = false;
            button70.Visible = false;
            button71.Visible = false;
            button72.Visible = false;
            button65.Visible = true;
            button66.Visible = true;
            textBox38.ReadOnly = false;
            textBox39.ReadOnly = false;
            textBox40.ReadOnly = false;
            textBox38.Text = "";
            textBox39.Text = "";
            textBox40.Text = "";
            textBox38.Focus();
        }

        //Редактировать
        private void button69_Click(object sender, EventArgs e)
        {
            spPoligonsEdit = true;
            button67.Visible = false;
            button68.Visible = false;
            button69.Visible = false;
            button70.Visible = false;
            button71.Visible = false;
            button72.Visible = false;
            button64.Visible = true;
            button66.Visible = true;
            textBox38.ReadOnly = false;
            textBox39.ReadOnly = false;
            textBox40.ReadOnly = false;
            textBox38.Focus();
        }

        //Удалить
        private void button68_Click(object sender, EventArgs e)
        {
            if (positionPoligonsList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить полигон?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [Poligons] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox41.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Полигон успешно удален");
                    functionQueryPoligons();
                    createPositionPoligons(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите полигон для удаления");
            }
        }

        //Вперед
        private void button67_Click(object sender, EventArgs e)
        {
            createPositionPoligons(1);
        }

        //Поиск
        private void button72_Click(object sender, EventArgs e)
        {
            Form8 form8 = new Form8(poligonsList);
            form8.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionPoligonsList = ClassSearchStatic.position;
                    functionShowPoligons(positionPoligonsList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "Полигон с данным " + ClassSearchStatic.searchtype + " не найдена!");
                }
            }
        }

        //Кнопка отмены добавления + редактирования
        private void button66_Click(object sender, EventArgs e)
        {
            functionDisableShowNewPoligons();
        }

        //Функция отмены добавления + редактирования
        private void functionDisableShowNewPoligons()
        {
            spPoligonsEdit = false;
            button67.Visible = true;
            button68.Visible = true;
            button69.Visible = true;
            button70.Visible = true;
            button71.Visible = true;
            button72.Visible = true;
            button65.Visible = false;
            button64.Visible = false;
            button66.Visible = false;
            textBox38.ReadOnly = true;
            textBox39.ReadOnly = true;
            textBox40.ReadOnly = true;
            functionShowPoligons(positionPoligonsList);
        }

        //Подтверждение добавления
        private void button65_Click(object sender, EventArgs e)
        {
            string factoryId = "";
            foreach (ClassFactorys el in factorysList)
                if (el.getCode() == textBox40.Text)
                    factoryId = Convert.ToString(el.getId());
            SQLiteCommand command;
            if (factoryId.Length > 0)
                command = new SQLiteCommand("INSERT INTO [Poligons] (codeFactoryPl,numberPl,namePoligon) VALUES (@codeFactoryPl,@numberPl,@namePoligon)", sqliteConnection);
            else
                command = new SQLiteCommand("INSERT INTO [Poligons] (numberPl,namePoligon) VALUES (@numberPl,@namePoligon)", sqliteConnection);
            command.Parameters.AddWithValue("numberPl", textBox38.Text);
            command.Parameters.AddWithValue("namePoligon", textBox39.Text);
            command.Parameters.AddWithValue("codeFactoryPl", factoryId);
            sqliteConnection.Open();
            command.ExecuteNonQuery();
            sqliteConnection.Close();
            functionMessageShow(2, "Данные успешно добавлены");
            functionQueryPoligons();
            functionDisableShowNewPoligons();
            positionPoligonsList = poligonsList.Count - 1;
            functionShowPoligons(positionPoligonsList);
        }

        //Подтверждение редактирования
        private void button64_Click(object sender, EventArgs e)
        {
            string factoryId = "";
            foreach (ClassFactorys el in factorysList)
                if (el.getCode() == textBox40.Text)
                    factoryId = Convert.ToString(el.getId());
            SQLiteCommand command;
            if (factoryId.Length > 0)
                command = new SQLiteCommand("UPDATE [Poligons] SET [codeFactoryPl]=@codeFactoryPl,[numberPl]=@numberPl,[namePoligon]=@namePoligon WHERE [id]=@id", sqliteConnection);
            else
                command = new SQLiteCommand("UPDATE [Poligons] SET [numberPl]=@numberPl,[namePoligon]=@namePoligon WHERE [id]=@id", sqliteConnection);
            command.Parameters.AddWithValue("id", textBox41.Text);
            command.Parameters.AddWithValue("numberPl", textBox38.Text);
            command.Parameters.AddWithValue("namePoligon", textBox39.Text);
            command.Parameters.AddWithValue("codeFactoryPl", factoryId);
            sqliteConnection.Open();
            command.ExecuteNonQuery();
            sqliteConnection.Close();
            functionMessageShow(2, "Данные успешно изменены");
            functionQueryPoligons();
            functionDisableShowNewPoligons();
            positionPoligonsList = poligonsList.Count - 1;
            functionShowPoligons(positionPoligonsList);
        }

        //------------------------------СПРАВОЧНИК ЦЕН ВИДОВ ИСПЫТАНИЯ------------------------------
        //Функция отображение цен видов испытания
        private void functionShowCenaVidIsp(int pos)
        {
            if (!spCenaVidIspEdit)
            {
                if (pos >= 0 && cenaVidIspList.Count > 0)
                {
                    listBox3.Items.Clear();
                    textBox113.Text = Convert.ToString(cenaVidIspList[pos].id);
                    textBox112.Text = Convert.ToString(cenaVidIspList[pos].poligonCenaVidIsp);
                    textBox108.Text = Convert.ToString(cenaVidIspList[pos].codeElementCenaVidIsp);
                    textBox109.Text = Convert.ToString(cenaVidIspList[pos].pictureElementCenaVidIsp);
                    textBox110.Text = Convert.ToString(cenaVidIspList[pos].indexElementCenaVidIsp);
                    textBox111.Text = Convert.ToString(cenaVidIspList[pos].nameElementCenaVidIsp);
                    listBox3.Items.Add("Вид испытания\tМат Часть\tЦена");
                    foreach (ClassCenaVidIspCombo co in cenaVidIspList[pos].comboListCenaVidIsp)
                    {
                        listBox3.Items.Add("          " + co.codeVidIspCombo + "\t\t      " + co.codeMCCombo + "\t\t    " + co.cenaCombo);
                    }
                    label134.Text = "";
                    label135.Text = "";
                    label136.Text = "";
                    label137.Text = "";
                }
                else
                {
                    textBox113.Text = "";
                    textBox112.Text = "";
                    textBox108.Text = "";
                    textBox109.Text = "";
                    textBox110.Text = "";
                    textBox111.Text = "";
                    label134.Text = "";
                    label135.Text = "";
                    label136.Text = "";
                    label137.Text = "";
                    textBox115.Text = "";
                    textBox116.Text = "";
                    textBox114.Text = "";
                    listBox3.Items.Clear();
                }
            }
        }

        //Позиция цены видов испытания
        private void createPositionCenaVidIsp(int s)
        {
            if (s == 0)
            {
                if (positionCenVidIspList - 1 >= 0)
                    positionCenVidIspList--;
            }
            else
            {
                if (positionCenVidIspList + 1 < cenaVidIspList.Count)
                    positionCenVidIspList++;
            }
            functionShowCenaVidIsp(positionCenVidIspList);
        }

        //Выбор вида испытания
        private void listBox3_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listBox3.SelectedIndex > 0 && listBox3.SelectedIndex < cenaVidIspList[positionCenVidIspList].comboListCenaVidIsp.Count + 1 && !spCenaVidIspEdit)
            {
                label134.Text = "Вид испытания";
                label135.Text = cenaVidIspList[positionCenVidIspList].comboListCenaVidIsp[listBox3.SelectedIndex - 1].nameVidIspCombo;
                label136.Text = "Мат часть";
                label137.Text = cenaVidIspList[positionCenVidIspList].comboListCenaVidIsp[listBox3.SelectedIndex - 1].nameMCCombo;
            }
            else
            {
                label134.Text = "";
                label135.Text = "";
                label136.Text = "";
                label137.Text = "";
            }
        }

        //Назад
        private void button125_Click(object sender, EventArgs e)
        {
            createPositionCenaVidIsp(0);
        }

        //Вперед
        private void button121_Click(object sender, EventArgs e)
        {
            createPositionCenaVidIsp(1);
        }

        //Добавление цены вида испытания
        private void button124_Click(object sender, EventArgs e)
        {
            functionShowCenaVidIsp(-1);
            textBox108.ReadOnly = false;
            textBox112.ReadOnly = false;
            button121.Visible = false;
            button122.Visible = false;
            button123.Visible = false;
            button124.Visible = false;
            button125.Visible = false;
            button126.Visible = false;
            button128.Visible = true;
            button129.Visible = true;
            button130.Visible = true;
            button131.Visible = true;
            listBox3.Height = 124;
            listBox3.Items.Add("Вид испытания\tМат Часть\tЦена");
            textBox114.Visible = true;
            textBox115.Visible = true;
            textBox116.Visible = true;
            spCenaVidIspEdit = true;
            textBox112.Focus();
        }

        //Редактирование цены вида испытания
        private void button123_Click(object sender, EventArgs e)
        {
            textBox108.ReadOnly = false;
            textBox112.ReadOnly = false;
            button121.Visible = false;
            button122.Visible = false;
            button123.Visible = false;
            button124.Visible = false;
            button125.Visible = false;
            button126.Visible = false;
            button127.Visible = true;
            button129.Visible = true;
            button130.Visible = true;
            button131.Visible = true;
            listBox3.Height = 124;
            textBox114.Visible = true;
            textBox115.Visible = true;
            textBox116.Visible = true;
            spCenaVidIspEdit = true;
            textBox112.Focus();
        }

        //Подтверждение добавления
        private void button128_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox108.Text) && !string.IsNullOrWhiteSpace(textBox108.Text))
            {
                int idElement = functionSearchIDElInSp(textBox108.Text);
                if (idElement > 0)
                {
                    List<List<string>> newCena = new List<List<string>>();
                    for (int i = 1; i < listBox3.Items.Count; i++)
                    {
                        string[] strNewCenaPr = Convert.ToString(listBox3.Items[i]).Split(' ');
                        List<string> strNewCenaPrBP = new List<string>();
                        foreach (string k in strNewCenaPr)
                            if (k.Length > 0)
                                strNewCenaPrBP.Add(k.Trim());
                        newCena.Add(strNewCenaPrBP);
                    }
                    if (newCena.Count > 0)
                    {
                        bool proverkaAddNewData = false;
                        foreach (List<string> k in newCena)
                        {
                            int idVidIsp = functionSearchVidIspInSp(k[0]);
                            int idMC = functionSearchMCInSp(k[1]);
                            if (idVidIsp > 0)
                            {
                                SQLiteCommand command;
                                if (idMC > 0)
                                    command = new SQLiteCommand("INSERT INTO [CenaVidIsp] (poligonCenaVidIsp,idElementCenaVidIsp,idVidIspCenaVidIsp,mcCenaVidIsp,cenaCenaVidIsp) VALUES (@poligonCenaVidIsp,@idElementCenaVidIsp,@idVidIspCenaVidIsp,@mcCenaVidIsp,@cenaCenaVidIsp)", sqliteConnection);
                                else
                                    command = new SQLiteCommand("INSERT INTO [CenaVidIsp] (poligonCenaVidIsp,idElementCenaVidIsp,idVidIspCenaVidIsp,cenaCenaVidIsp) VALUES (@poligonCenaVidIsp,@idElementCenaVidIsp,@idVidIspCenaVidIsp,@cenaCenaVidIsp)", sqliteConnection);
                                command.Parameters.AddWithValue("poligonCenaVidIsp", textBox112.Text);
                                command.Parameters.AddWithValue("idElementCenaVidIsp", idElement);
                                command.Parameters.AddWithValue("idVidIspCenaVidIsp", idVidIsp);
                                command.Parameters.AddWithValue("mcCenaVidIsp", idMC);
                                command.Parameters.AddWithValue("cenaCenaVidIsp", Convert.ToDouble(k[2]));
                                sqliteConnection.Open();
                                command.ExecuteNonQuery();
                                sqliteConnection.Close();
                                proverkaAddNewData = true;
                            }
                            else
                            {
                                functionMessageShow(1, "Ошибка при добавлении цены для испытания " + k[0] + "!");
                            }
                        }
                        if (proverkaAddNewData)
                        {
                            functionMessageShow(2, "Данные успешно добавлены");
                            functionQueryCenaVidIsp();
                            functionDisableShowCenaVidIsp();
                            positionCenVidIspList = cenaVidIspList.Count - 1;
                            functionShowCenaVidIsp(positionCenVidIspList);
                        }
                    }
                    else
                    {
                        functionMessageShow(1, "Необходимо добавить цены для видов испытаний!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Элемент с данным кодом не найден в справочнике элементов!");
                }
            }
            else
            {
                functionMessageShow(1, "Поле 'Код элемента' должно быть заполнено!");
            }
        }

        //Подтверждение редактирования
        private void button127_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox108.Text) && !string.IsNullOrWhiteSpace(textBox108.Text))
            {
                int idElement = functionSearchIDElInSp(textBox108.Text);
                if (idElement > 0)
                {
                    List<List<string>> newCena = new List<List<string>>();
                    for (int i = 1; i < listBox3.Items.Count; i++)
                    {
                        string[] strNewCenaPr = Convert.ToString(listBox3.Items[i]).Split(' ');
                        List<string> strNewCenaPrBP = new List<string>();
                        foreach (string k in strNewCenaPr)
                            if (k.Length > 0)
                                strNewCenaPrBP.Add(k.Trim());
                        newCena.Add(strNewCenaPrBP);
                    }
                    if (newCena.Count > 0)
                    {
                        bool proverkaAddNewData = false;
                        SQLiteCommand command = new SQLiteCommand("DELETE FROM [CenaVidIsp] WHERE [idElementCenaVidIsp]=@idElementCenaVidIsp", sqliteConnection);
                        command.Parameters.AddWithValue("idElementCenaVidIsp", idElement);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        foreach (List<string> k in newCena)
                        {
                            int idVidIsp = functionSearchVidIspInSp(k[0]);
                            int idMC = functionSearchMCInSp(k[1]);
                            if (idVidIsp > 0)
                            {
                                if (idMC > 0)
                                    command = new SQLiteCommand("INSERT INTO [CenaVidIsp] (poligonCenaVidIsp,idElementCenaVidIsp,idVidIspCenaVidIsp,mcCenaVidIsp,cenaCenaVidIsp) VALUES (@poligonCenaVidIsp,@idElementCenaVidIsp,@idVidIspCenaVidIsp,@mcCenaVidIsp,@cenaCenaVidIsp)", sqliteConnection);
                                else
                                    command = new SQLiteCommand("INSERT INTO [CenaVidIsp] (poligonCenaVidIsp,idElementCenaVidIsp,idVidIspCenaVidIsp,cenaCenaVidIsp) VALUES (@poligonCenaVidIsp,@idElementCenaVidIsp,@idVidIspCenaVidIsp,@cenaCenaVidIsp)", sqliteConnection);
                                command.Parameters.AddWithValue("poligonCenaVidIsp", textBox112.Text);
                                command.Parameters.AddWithValue("idElementCenaVidIsp", idElement);
                                command.Parameters.AddWithValue("idVidIspCenaVidIsp", idVidIsp);
                                command.Parameters.AddWithValue("mcCenaVidIsp", idMC);
                                command.Parameters.AddWithValue("cenaCenaVidIsp", Convert.ToDouble(k[2]));
                                sqliteConnection.Open();
                                command.ExecuteNonQuery();
                                sqliteConnection.Close();
                                proverkaAddNewData = true;
                            }
                            else
                            {
                                functionMessageShow(1, "Ошибка при добавлении цены для испытания " + k[0] + "!");
                            }
                        }
                        if (proverkaAddNewData)
                        {
                            functionMessageShow(2, "Данные успешно изменены");
                            functionQueryCenaVidIsp();
                            functionDisableShowCenaVidIsp();
                            functionShowCenaVidIsp(positionCenVidIspList);
                        }
                    }
                    else
                    {
                        functionMessageShow(1, "Необходимо добавить цены для видов испытаний!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Элемент с данным кодом не найден в справочнике элементов!");
                }
            }
            else
            {
                functionMessageShow(1, "Поле 'Код элемента' должно быть заполнено!");
            }
        }

        //Кнопка отмены добавления и редактирования
        private void button129_Click(object sender, EventArgs e)
        {
            functionDisableShowCenaVidIsp();
        }

        //Функция отмены добавления и редактирования
        private void functionDisableShowCenaVidIsp()
        {
            textBox108.ReadOnly = true;
            textBox109.ReadOnly = true;
            textBox110.ReadOnly = true;
            textBox111.ReadOnly = true;
            textBox112.ReadOnly = true;
            button121.Visible = true;
            button122.Visible = true;
            button123.Visible = true;
            button124.Visible = true;
            button125.Visible = true;
            button126.Visible = true;
            button129.Visible = false;
            button127.Visible = false;
            button128.Visible = false;
            button130.Visible = false;
            button131.Visible = false;
            listBox3.Height = 220;
            textBox115.Text = "";
            textBox116.Text = "";
            textBox114.Text = "";
            textBox114.Visible = false;
            textBox115.Visible = false;
            textBox116.Visible = false;
            spCenaVidIspEdit = false;
            functionShowCenaVidIsp(positionCenVidIspList);
        }

        //Удаление цены вида испытания
        private void button122_Click(object sender, EventArgs e)
        {
            if (positionCenVidIspList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить элемент?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [CenaVidIsp] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox113.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Элемент успешно удален");
                    functionQueryCenaVidIsp();
                    createPositionCenaVidIsp(0);
                    functionShowCenaVidIsp(positionCenVidIspList);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите элемент для удаления");
            }
        }

        //Поиск цены вида испытания
        private void button126_Click(object sender, EventArgs e)
        {
            Form16 form16 = new Form16(cenaVidIspList);
            form16.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionCenVidIspList = ClassSearchStatic.position;
                    functionShowCenaVidIsp(positionCenVidIspList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "Элемент с данным " + ClassSearchStatic.searchtype + " не найдена!");
                }
            }
        }

        //Добавить цену
        private void button130_Click(object sender, EventArgs e)
        {
            bool proverkaPoley = true;
            if (textBox114.Text.Length == 0 || textBox116.Text.Length == 0)
            {
                proverkaPoley = false;
                functionMessageShow(1, "Поля 'Вид испытания' и 'Цена' обязательны для заполнения!");
            }
            if (textBox114.Text.Length > 0 && !functionProverkaVidIspInList(textBox114.Text))
            {
                proverkaPoley = false;
                functionMessageShow(1, "Вид испытания с данным кодом в справочнике не найден!");
            }
            if (textBox115.Text.Length > 0 && !functionProverkaMCInList(textBox115.Text))
            {
                proverkaPoley = false;
                functionMessageShow(1, "Мат часть с данным кодом в справочнике не найдена!");
            }
            if (proverkaPoley)
            {
                listBox3.Items.Add("          " + textBox114.Text + "\t\t      " + textBox115.Text + "\t\t    " + textBox116.Text);
                textBox114.Text = "";
                textBox115.Text = "";
                textBox116.Text = "";
            }
        }

        //Удалить цену
        private void button131_Click(object sender, EventArgs e)
        {
            if (listBox3.SelectedIndex > 0)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить цену испытания?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    listBox3.Items.Remove(listBox3.Items[listBox3.SelectedIndex]);
                }
            }
        }

        //Поиск ID вида испытания
        private int functionSearchVidIspInSp(string code)
        {
            int prIdVidIsp = -1;
            foreach (ClassVidIsp vid in vidIspList)
                if (vid.code == code)
                    prIdVidIsp = vid.id;
            return prIdVidIsp;
        }

        //Поиск ID мат части
        private int functionSearchMCInSp(string code)
        {
            int prIdMC = -1;
            foreach (ClassMC mc in mcList)
                if (mc.codeMC3 == code)
                    prIdMC = mc.id;
            return prIdMC;
        }

        //------------------------------СПРАВОЧНИК ЦЕН НА КОМПЛЕКТУЮЩИЕ ЭЛЕМЕНТЫ------------------------------
        //Функция отображение цен комплектующих элементов
        private void functionShowCenaKE(int pos)
        {
            if (!spCenaKEEdit)
            {
                if (pos >= 0 && cenaKEList.Count > 0)
                {
                    label143.Text = cenaKEList[pos].nameEdIzmKe;
                    textBox117.Text = cenaKEList[pos].pictureElementKE;
                    textBox118.Text = cenaKEList[pos].indexElementKE;
                    textBox119.Text = cenaKEList[pos].nameElementKE;
                    textBox120.Text = cenaKEList[pos].codeElementKE;
                    textBox121.Text = cenaKEList[pos].codeEdIzmKE;
                    textBox122.Text = cenaKEList[pos].cenaKE;
                    textBox125.Text = cenaKEList[pos].numberPozCenaKE;
                    textBox123.Text = cenaKEList[pos].commentKE;
                    textBox124.Text = Convert.ToString(cenaKEList[pos].id);
                }
                else
                {
                    label143.Text = "";
                    textBox117.Text = "";
                    textBox118.Text = "";
                    textBox119.Text = "";
                    textBox120.Text = "";
                    textBox121.Text = "";
                    textBox122.Text = "";
                    textBox123.Text = "";
                    textBox124.Text = "";
                    textBox125.Text = "";
                }
            }
        }

        //Позиция цены комплектующих элементов
        private void createPositionCenaKE(int s)
        {
            if (s == 0)
            {
                if (positionCenaKEList - 1 >= 0)
                    positionCenaKEList--;
            }
            else
            {
                if (positionCenaKEList + 1 < cenaKEList.Count)
                    positionCenaKEList++;
            }
            functionShowCenaKE(positionCenaKEList);
        }

        //Назад
        private void button139_Click(object sender, EventArgs e)
        {
            createPositionCenaKE(0);
        }

        //Добавить
        private void button137_Click(object sender, EventArgs e)
        {
            functionShowCenaKE(-1);
            spCenaKEEdit = true;
            textBox120.ReadOnly = false;
            textBox121.ReadOnly = false;
            textBox122.ReadOnly = false;
            textBox123.ReadOnly = false;
            textBox125.ReadOnly = false;
            button135.Visible = false;
            button136.Visible = false;
            button137.Visible = false;
            button138.Visible = false;
            button139.Visible = false;
            button140.Visible = false;
            button133.Visible = true;
            button134.Visible = true;
            textBox120.Focus();
        }

        //Редактировать
        private void button136_Click(object sender, EventArgs e)
        {
            spCenaKEEdit = true;
            textBox120.ReadOnly = false;
            textBox121.ReadOnly = false;
            textBox122.ReadOnly = false;
            textBox123.ReadOnly = false;
            textBox125.ReadOnly = false;
            button135.Visible = false;
            button136.Visible = false;
            button137.Visible = false;
            button138.Visible = false;
            button139.Visible = false;
            button140.Visible = false;
            button132.Visible = true;
            button134.Visible = true;
            textBox120.Focus();
        }

        //Удалить
        private void button135_Click(object sender, EventArgs e)
        {
            if (positionCenaKEList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить элемент?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [CenaKE] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox124.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Элемент успешно удален");
                    functionQueryCenaKE();
                    createPositionCenaKE(0);
                    functionShowCenaKE(positionCenaKEList);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите элемент для удаления");
            }
        }

        //Вперед
        private void button138_Click(object sender, EventArgs e)
        {
            createPositionCenaKE(1);
        }

        //Отмена добавления и редактирования
        private void button134_Click(object sender, EventArgs e)
        {
            functionDisableShowCenaKE();
        }

        //Функция отмены добавления и редактирования
        private void functionDisableShowCenaKE()
        {
            spCenaKEEdit = false;
            textBox120.ReadOnly = true;
            textBox121.ReadOnly = true;
            textBox122.ReadOnly = true;
            textBox123.ReadOnly = true;
            textBox125.ReadOnly = true;
            button135.Visible = true;
            button136.Visible = true;
            button137.Visible = true;
            button138.Visible = true;
            button139.Visible = true;
            button140.Visible = true;
            button132.Visible = false;
            button133.Visible = false;
            button134.Visible = false;
            functionShowCenaKE(positionCenaKEList);
        }

        //Подтверждение добавления
        private void button133_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox120.Text) && !string.IsNullOrWhiteSpace(textBox120.Text) && !string.IsNullOrEmpty(textBox121.Text) && !string.IsNullOrWhiteSpace(textBox121.Text) && !string.IsNullOrEmpty(textBox122.Text) && !string.IsNullOrWhiteSpace(textBox122.Text))
            {
                int idElement = functionSearchIDElInSp(textBox120.Text);
                if (idElement > 0)
                {
                    int idEdIzm = functionSearcgIDEdIzmInSp(textBox121.Text);
                    if (idEdIzm > 0)
                    {
                        bool proverkaCenaKE = true;
                        foreach (ClassCenaKE ke in cenaKEList)
                            if (ke.codeElementKE == textBox120.Text)
                                proverkaCenaKE = false;
                        if (proverkaCenaKE)
                        {
                            SQLiteCommand command = new SQLiteCommand("INSERT INTO [CenaKE] (idElementCenaKE,idEdIzmCenzKE,cenaCenaKE,numberPozCenaKE,commentCenaKE) VALUES (@idElementCenaKE,@idEdIzmCenzKE,@cenaCenaKE,@numberPozCenaKE,@commentCenaKE)", sqliteConnection);
                            command.Parameters.AddWithValue("idElementCenaKE", idElement);
                            command.Parameters.AddWithValue("idEdIzmCenzKE", idEdIzm);
                            command.Parameters.AddWithValue("cenaCenaKE", textBox122.Text);
                            command.Parameters.AddWithValue("numberPozCenaKE", textBox125.Text);
                            command.Parameters.AddWithValue("commentCenaKE", textBox123.Text);
                            sqliteConnection.Open();
                            command.ExecuteNonQuery();
                            sqliteConnection.Close();
                            functionMessageShow(2, "Данные успешно добавлены");
                            functionQueryCenaKE();
                            functionDisableShowCenaKE();
                            positionCenaKEList = cenaKEList.Count - 1;
                            functionShowCenaKE(positionCenaKEList);
                        }
                        else
                        {
                            functionMessageShow(1, "Цена на данный комплектующий элемент уже существует!");
                        }
                    }
                    else
                    {
                        functionMessageShow(1, "Единица измерения с данным кодом не найдена в справочнике единиц измерений!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Элемент с данным кодом не найден в справочнике элементов!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код элемента', 'Ед. измер.' и 'Цена' должны быть заполнены!");
            }
        }
        
        //Подтверждение редактирования
        private void button132_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox120.Text) && !string.IsNullOrWhiteSpace(textBox120.Text) && !string.IsNullOrEmpty(textBox121.Text) && !string.IsNullOrWhiteSpace(textBox121.Text) && !string.IsNullOrEmpty(textBox122.Text) && !string.IsNullOrWhiteSpace(textBox122.Text))
            {
                int idElement = functionSearchIDElInSp(textBox120.Text);
                if (idElement > 0)
                {
                    int idEdIzm = functionSearcgIDEdIzmInSp(textBox121.Text);
                    if (idEdIzm > 0)
                    {
                        SQLiteCommand command = new SQLiteCommand("UPDATE [CenaKE] SET [idElementCenaKE]=@idElementCenaKE,[idEdIzmCenzKE]=@idEdIzmCenzKE,[cenaCenaKE]=@cenaCenaKE,[numberPozCenaKE]=@numberPozCenaKE,[commentCenaKE]=@commentCenaKE WHERE [id]=@id", sqliteConnection);
                        command.Parameters.AddWithValue("id", Convert.ToInt32(textBox124.Text));
                        command.Parameters.AddWithValue("idElementCenaKE", idElement);
                        command.Parameters.AddWithValue("idEdIzmCenzKE", idEdIzm);
                        command.Parameters.AddWithValue("cenaCenaKE", Convert.ToDouble(textBox122.Text));
                        command.Parameters.AddWithValue("numberPozCenaKE", textBox125.Text);
                        command.Parameters.AddWithValue("commentCenaKE", textBox123.Text);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно обновлены");
                        functionQueryCenaKE();
                        functionDisableShowCenaKE();
                        functionShowCenaKE(positionCenaKEList);
                    }
                    else
                    {
                        functionMessageShow(1, "Единица измерения с данным кодом не найдена в справочнике единиц измерений!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Элемент с данным кодом не найден в справочнике элементов!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код элемента', 'Ед. измер.' и 'Цена' должны быть заполнены!");
            }
        }

        //Поиск
        private void button140_Click(object sender, EventArgs e)
        {
            Form17 form17 = new Form17(cenaKEList);
            form17.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionCenaKEList = ClassSearchStatic.position;
                    functionShowCenaKE(positionCenaKEList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "Элемент с данным " + ClassSearchStatic.searchtype + " не найден!");
                }
            }
        }

        //------------------------------СПРАВОЧНИК НОРМЫ ВРЕМЕНИ НА ПРОВЕДЕНИЕ ИСПЫТАНИЙ------------------------------
        //Функция отображение нормы времени проведения испытаний
        private void functionShowNormTimeIsp(int pos)
        {
            if (!spNormTimeIspEdit)
            {
                label166.Visible = false;
                label167.Visible = false;
                if (pos >= 0 && normTimeIspList.Count > 0)
                {
                    //id
                    textBox149.Text = Convert.ToString(normTimeIspList[pos].id);
                    //Элемент
                    textBox126.Text = normTimeIspList[pos].codeElementNormTimeIsp;
                    textBox129.Text = normTimeIspList[pos].pictureElementNormTimeIsp;
                    textBox128.Text = normTimeIspList[pos].indexElementNormTimeIsp;
                    textBox127.Text = normTimeIspList[pos].nameElementNormTimeIsp;
                    //Вид испытания
                    textBox130.Text = normTimeIspList[pos].codeVidIspNormTimeIsp;
                    label153.Text = normTimeIspList[pos].nameVidIspNormTimeIsp;
                    //Нормочасы
                    textBox131.Text = normTimeIspList[pos].firstCehNormTimeIsp != "0" ? normTimeIspList[pos].firstCehNormTimeIsp : "";
                    textBox132.Text = normTimeIspList[pos].secondCehNormTimeIsp != "0" ? normTimeIspList[pos].secondCehNormTimeIsp : "";
                    textBox359.Text = normTimeIspList[pos].thirdCehNormTimeIsp != "0" ? normTimeIspList[pos].thirdCehNormTimeIsp : "";
                    textBox133.Text = normTimeIspList[pos].temperNormTimeIsp != "0" ? normTimeIspList[pos].temperNormTimeIsp : "";
                    textBox150.Text = normTimeIspList[pos].otkNormTimeIsp != "0" ? normTimeIspList[pos].otkNormTimeIsp : "";
                    textBox134.Text = normTimeIspList[pos].twoNormTimeIsp != "0" ? normTimeIspList[pos].twoNormTimeIsp : "";
                    textBox361.Text = normTimeIspList[pos].fiveNormTimeIsp != "0" ? normTimeIspList[pos].fiveNormTimeIsp : "";
                    textBox135.Text = normTimeIspList[pos].nineNormTimeIsp != "0" ? normTimeIspList[pos].nineNormTimeIsp : "";
                    textBox136.Text = normTimeIspList[pos].grLuchNormTimeIsp != "0" ? normTimeIspList[pos].grLuchNormTimeIsp : "";
                    textBox137.Text = normTimeIspList[pos].grCrecerNormTimeIsp != "0" ? normTimeIspList[pos].grCrecerNormTimeIsp : "";
                    textBox138.Text = normTimeIspList[pos].grMeteoNormTimeIsp != "0" ? normTimeIspList[pos].grMeteoNormTimeIsp : "";
                    textBox139.Text = normTimeIspList[pos].grKamaNormTimeIsp != "0" ? normTimeIspList[pos].grKamaNormTimeIsp : "";
                    textBox357.Text = normTimeIspList[pos].grSolenoidsNormTimeIsp != "0" ? normTimeIspList[pos].grSolenoidsNormTimeIsp : "";
                    textBox363.Text = normTimeIspList[pos].grGDINormTimeIsp != "0" ? normTimeIspList[pos].grGDINormTimeIsp : "";
                    textBox364.Text = normTimeIspList[pos].grSVKNormTimeIsp != "0" ? normTimeIspList[pos].grSVKNormTimeIsp : "";
                    textBox365.Text = normTimeIspList[pos].grVeterNormTimeIsp != "0" ? normTimeIspList[pos].grVeterNormTimeIsp : "";
                    textBox366.Text = normTimeIspList[pos].grZummerNormTimeIsp != "0" ? normTimeIspList[pos].grZummerNormTimeIsp : "";
                    //Нормочасы ВП
                    textBox140.Text = normTimeIspList[pos].firstCehVPNormTimeIsp != "0" ? normTimeIspList[pos].firstCehVPNormTimeIsp : "";
                    textBox141.Text = normTimeIspList[pos].secondCehVPNormTimeIsp != "0" ? normTimeIspList[pos].secondCehVPNormTimeIsp : "";
                    textBox360.Text = normTimeIspList[pos].thirdCehVPNormTimeIsp != "0" ? normTimeIspList[pos].thirdCehVPNormTimeIsp : "";
                    textBox142.Text = normTimeIspList[pos].temperVPNormTimeIsp != "0" ? normTimeIspList[pos].temperVPNormTimeIsp : "";
                    textBox151.Text = normTimeIspList[pos].otkVPNormTimeIsp != "0" ? normTimeIspList[pos].otkVPNormTimeIsp : "";
                    textBox143.Text = normTimeIspList[pos].twoVPNormTimeIsp != "0" ? normTimeIspList[pos].twoVPNormTimeIsp : "";
                    textBox362.Text = normTimeIspList[pos].fiveVPNormTimeIsp != "0" ? normTimeIspList[pos].fiveVPNormTimeIsp : "";
                    textBox144.Text = normTimeIspList[pos].nineVPNormTimeIsp != "0" ? normTimeIspList[pos].nineVPNormTimeIsp : "";
                    textBox145.Text = normTimeIspList[pos].grLuchVPNormTimeIsp != "0" ? normTimeIspList[pos].grLuchVPNormTimeIsp : "";
                    textBox146.Text = normTimeIspList[pos].grCrecerVPNormTimeIsp != "0" ? normTimeIspList[pos].grCrecerVPNormTimeIsp : "";
                    textBox147.Text = normTimeIspList[pos].grMeteoVPNormTimeIsp != "0" ? normTimeIspList[pos].grMeteoVPNormTimeIsp : "";
                    textBox148.Text = normTimeIspList[pos].grKamaVPNormTimeIsp != "0" ? normTimeIspList[pos].grKamaVPNormTimeIsp : "";
                    textBox358.Text = normTimeIspList[pos].grSolenoidsVPNormTimeIsp != "0" ? normTimeIspList[pos].grSolenoidsVPNormTimeIsp : "";
                    textBox367.Text = normTimeIspList[pos].grGDIVPNormTimeIsp != "0" ? normTimeIspList[pos].grGDIVPNormTimeIsp : "";
                    textBox368.Text = normTimeIspList[pos].grSVKVPNormTimeIsp != "0" ? normTimeIspList[pos].grSVKVPNormTimeIsp : "";
                    textBox369.Text = normTimeIspList[pos].grVeterVPNormTimeIsp != "0" ? normTimeIspList[pos].grVeterVPNormTimeIsp : "";
                    textBox370.Text = normTimeIspList[pos].grZummerVPNormTimeIsp != "0" ? normTimeIspList[pos].grZummerVPNormTimeIsp : "";
                    //Итоги
                    label166.Visible = true;
                    label168.Text = normTimeIspList[pos].summOnVidNormTimeIsp;
                    label171.Text = normTimeIspList[pos].summOnVidVPNormTimeIsp;
                    label167.Visible = true;
                    label169.Text = normTimeIspList[pos].summOnElementNormTimeIsp;
                    label172.Text = normTimeIspList[pos].summOnElementVPNormTimeIsp;
                }
                else
                {
                    //id
                    textBox149.Text = "";
                    //Элемент
                    textBox126.Text = "";
                    textBox129.Text = "";
                    textBox128.Text = "";
                    textBox127.Text = "";
                    //Вид испытания
                    textBox130.Text = "";
                    label153.Text = "";
                    //Нормочасы
                    textBox131.Text = "";
                    textBox132.Text = "";
                    textBox359.Text = "";
                    textBox133.Text = "";
                    textBox150.Text = "";
                    textBox134.Text = "";
                    textBox361.Text = "";
                    textBox135.Text = "";
                    textBox136.Text = "";
                    textBox137.Text = "";
                    textBox138.Text = "";
                    textBox139.Text = "";
                    textBox357.Text = "";
                    textBox363.Text = "";
                    textBox364.Text = "";
                    textBox365.Text = "";
                    textBox366.Text = "";
                    //Нормочасы ВП
                    textBox140.Text = "";
                    textBox141.Text = "";
                    textBox360.Text = "";
                    textBox142.Text = "";
                    textBox151.Text = "";
                    textBox143.Text = "";
                    textBox362.Text = "";
                    textBox144.Text = "";
                    textBox145.Text = "";
                    textBox146.Text = "";
                    textBox147.Text = "";
                    textBox148.Text = "";
                    textBox358.Text = "";
                    textBox367.Text = "";
                    textBox368.Text = "";
                    textBox369.Text = "";
                    textBox370.Text = "";
                    //Итоги
                    label168.Text = "";
                    label171.Text = "";
                    label169.Text = "";
                    label172.Text = "";
                }
            }
        }

        //Позиция нормы времени на проведение испытаний
        private void createPositionNormTimeIsp(int s)
        {
            if (s == 0)
            {
                if (positionNormTimeIsp - 1 >= 0)
                    positionNormTimeIsp--;
            }
            else
            {
                if (positionNormTimeIsp + 1 < normTimeIspList.Count)
                    positionNormTimeIsp++;
            }
            functionShowNormTimeIsp(positionNormTimeIsp);
        }

        //Назад
        private void button142_Click(object sender, EventArgs e)
        {
            createPositionNormTimeIsp(0);
        }

        //Добавить
        private void button148_Click(object sender, EventArgs e)
        {
            functionShowNormTimeIsp(-1);
            spNormTimeIspEdit = true;
            label166.Visible = false;
            label167.Visible = false;
            label153.Text = "";
            label168.Text = "";
            label171.Text = "";
            label169.Text = "";
            label172.Text = "";
            textBox126.ReadOnly = false;
            textBox130.ReadOnly = false;
            textBox131.ReadOnly = false;
            textBox132.ReadOnly = false;
            textBox133.ReadOnly = false;
            textBox134.ReadOnly = false;
            textBox135.ReadOnly = false;
            textBox136.ReadOnly = false;
            textBox137.ReadOnly = false;
            textBox138.ReadOnly = false;
            textBox139.ReadOnly = false;
            textBox150.ReadOnly = false;
            textBox140.ReadOnly = false;
            textBox141.ReadOnly = false;
            textBox142.ReadOnly = false;
            textBox143.ReadOnly = false;
            textBox144.ReadOnly = false;
            textBox145.ReadOnly = false;
            textBox146.ReadOnly = false;
            textBox147.ReadOnly = false;
            textBox148.ReadOnly = false;
            textBox151.ReadOnly = false;
            textBox357.ReadOnly = false;
            textBox358.ReadOnly = false;
            textBox359.ReadOnly = false;
            textBox360.ReadOnly = false;
            textBox361.ReadOnly = false;
            textBox362.ReadOnly = false;
            textBox363.ReadOnly = false;
            textBox364.ReadOnly = false;
            textBox365.ReadOnly = false;
            textBox366.ReadOnly = false;
            textBox367.ReadOnly = false;
            textBox368.ReadOnly = false;
            textBox369.ReadOnly = false;
            textBox370.ReadOnly = false;
            textBox371.ReadOnly = false;
            textBox372.ReadOnly = false;
            button142.Visible = false;
            button148.Visible = false;
            button147.Visible = false;
            button146.Visible = false;
            button141.Visible = false;
            button149.Visible = false;
            button145.Visible = true;
            button144.Visible = true;
            textBox126.Focus();
        }

        //Редактировать
        private void button147_Click(object sender, EventArgs e)
        {
            spNormTimeIspEdit = true;
            label166.Visible = false;
            label167.Visible = false;
            label153.Text = "";
            label168.Text = "";
            label171.Text = "";
            label169.Text = "";
            label172.Text = "";
            textBox126.ReadOnly = false;
            textBox130.ReadOnly = false;
            textBox131.ReadOnly = false;
            textBox132.ReadOnly = false;
            textBox133.ReadOnly = false;
            textBox134.ReadOnly = false;
            textBox135.ReadOnly = false;
            textBox136.ReadOnly = false;
            textBox137.ReadOnly = false;
            textBox138.ReadOnly = false;
            textBox139.ReadOnly = false;
            textBox150.ReadOnly = false;
            textBox140.ReadOnly = false;
            textBox141.ReadOnly = false;
            textBox142.ReadOnly = false;
            textBox143.ReadOnly = false;
            textBox144.ReadOnly = false;
            textBox145.ReadOnly = false;
            textBox146.ReadOnly = false;
            textBox147.ReadOnly = false;
            textBox148.ReadOnly = false;
            textBox151.ReadOnly = false;
            textBox357.ReadOnly = false;
            textBox358.ReadOnly = false;
            textBox359.ReadOnly = false;
            textBox360.ReadOnly = false;
            textBox361.ReadOnly = false;
            textBox362.ReadOnly = false;
            textBox363.ReadOnly = false;
            textBox364.ReadOnly = false;
            textBox365.ReadOnly = false;
            textBox366.ReadOnly = false;
            textBox367.ReadOnly = false;
            textBox368.ReadOnly = false;
            textBox369.ReadOnly = false;
            textBox370.ReadOnly = false;
            textBox371.ReadOnly = false;
            textBox372.ReadOnly = false;
            button142.Visible = false;
            button148.Visible = false;
            button147.Visible = false;
            button146.Visible = false;
            button141.Visible = false;
            button149.Visible = false;
            button145.Visible = true;
            button143.Visible = true;
            textBox126.Focus();
        }

        //Удалить
        private void button146_Click(object sender, EventArgs e)
        {
            if (positionNormTimeIsp != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить норму времени на проведение испытаний?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [NormTimeIsp] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox149.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Норма времени на проведение испытания удалена!");
                    functionQueryNormTimeIsp();
                    createPositionNormTimeIsp(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите испытуемый элемент для удаления");
            }
        }

        //Вперед
        private void button141_Click(object sender, EventArgs e)
        {
            createPositionNormTimeIsp(1);
        }

        //Отмена добавления и редактирования
        private void button145_Click(object sender, EventArgs e)
        {
            functionDisableShowNormTimeIsp();
        }

        //Функция отмены добавления и редактирования
        private void functionDisableShowNormTimeIsp()
        {
            spNormTimeIspEdit = false;
            textBox126.ReadOnly = true;
            textBox130.ReadOnly = true;
            textBox131.ReadOnly = true;
            textBox132.ReadOnly = true;
            textBox133.ReadOnly = true;
            textBox134.ReadOnly = true;
            textBox135.ReadOnly = true;
            textBox136.ReadOnly = true;
            textBox137.ReadOnly = true;
            textBox138.ReadOnly = true;
            textBox139.ReadOnly = true;
            textBox150.ReadOnly = true;
            textBox140.ReadOnly = true;
            textBox141.ReadOnly = true;
            textBox142.ReadOnly = true;
            textBox143.ReadOnly = true;
            textBox144.ReadOnly = true;
            textBox145.ReadOnly = true;
            textBox146.ReadOnly = true;
            textBox147.ReadOnly = true;
            textBox148.ReadOnly = true;
            textBox151.ReadOnly = true;
            textBox357.ReadOnly = true;
            textBox358.ReadOnly = true;
            textBox359.ReadOnly = true;
            textBox360.ReadOnly = true;
            textBox361.ReadOnly = true;
            textBox362.ReadOnly = true;
            textBox363.ReadOnly = true;
            textBox364.ReadOnly = true;
            textBox365.ReadOnly = true;
            textBox366.ReadOnly = true;
            textBox367.ReadOnly = true;
            textBox368.ReadOnly = true;
            textBox369.ReadOnly = true;
            textBox370.ReadOnly = true;
            textBox371.ReadOnly = true;
            textBox372.ReadOnly = true;
            button142.Visible = true;
            button148.Visible = true;
            button147.Visible = true;
            button146.Visible = true;
            button141.Visible = true;
            button149.Visible = true;
            button145.Visible = false;
            button143.Visible = false;
            button144.Visible = false;
            functionShowNormTimeIsp(positionNormTimeIsp);
        }

        //Подтверждение добавления
        private void button144_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox126.Text) && !string.IsNullOrWhiteSpace(textBox126.Text) && !string.IsNullOrEmpty(textBox130.Text) && !string.IsNullOrWhiteSpace(textBox130.Text))
            {
                int idElement = functionSearchIDElInSp(textBox126.Text);
                if (idElement > 0)
                {
                    int idVidIsp = functionSearchVidIspInSp(textBox130.Text);
                    if (idVidIsp > 0)
                    {
                        bool proverkaNormTimeIsp = true;
                        foreach (ClassNormTimeIsp nti in normTimeIspList)
                            if (nti.codeElementNormTimeIsp == textBox126.Text && nti.codeVidIspNormTimeIsp == textBox130.Text)
                                proverkaNormTimeIsp = false;
                        if (proverkaNormTimeIsp)
                        {
                            SQLiteCommand command = new SQLiteCommand("INSERT INTO [NormTimeIsp] (idElementNormTimeIsp,idVidIspNormTimeIsp,firstCehNormTimeIsp,firstCehVPNormTimeIsp,secondCehNormTimeIsp,secondCehVPNormTimeIsp,thirdCehNormTimeIsp,thirdCehVPNormTimeIsp,temperNormTimeIsp,temperVPNormTimeIsp,otkNormTimeIsp,otkVPNormTimeIsp,twoNormTimeIsp,twoVPNormTimeIsp,fiveNormTimeIsp,fiveVPNormTimeIsp,nineNormTimeIsp,nineVPNormTimeIsp,grLuchNormTimeIsp,grLuchVPNormTimeIsp,grCrecerNormTimeIsp,grCrecerVPNormTimeIsp,grMeteoNormTimeIsp,grMeteoVPNormTimeIsp,grKamaNormTimeIsp,grKamaVPNormTimeIsp,grSolenoidsNormTimeIsp,grSolenoidsVPNormTimeIsp,grGDINormTimeIsp,grGDIVPNormTimeIsp,grSVKNormTimeIsp,grSVKVPNormTimeIsp,grVeterNormTimeIsp,grVeterVPNormTimeIsp,grZummerNormTimeIsp,grZummerVPNormTimeIsp) VALUES (@idElementNormTimeIsp,@idVidIspNormTimeIsp,@firstCehNormTimeIsp,@firstCehVPNormTimeIsp,@secondCehNormTimeIsp,@secondCehVPNormTimeIsp,@thirdCehNormTimeIsp,@thirdCehVPNormTimeIsp,@temperNormTimeIsp,@temperVPNormTimeIsp,@otkNormTimeIsp,@otkVPNormTimeIsp,@twoNormTimeIsp,@twoVPNormTimeIsp,@fiveNormTimeIsp,@fiveVPNormTimeIsp,@nineNormTimeIsp,@nineVPNormTimeIsp,@grLuchNormTimeIsp,@grLuchVPNormTimeIsp,@grCrecerNormTimeIsp,@grCrecerVPNormTimeIsp,@grMeteoNormTimeIsp,@grMeteoVPNormTimeIsp,@grKamaNormTimeIsp,@grKamaVPNormTimeIsp,@grSolenoidsNormTimeIsp,@grSolenoidsVPNormTimeIsp,@grGDINormTimeIsp,@grGDIVPNormTimeIsp,@grSVKNormTimeIsp,@grSVKVPNormTimeIsp,@grVeterNormTimeIsp,@grVeterVPNormTimeIsp,@grZummerNormTimeIsp,@grZummerVPNormTimeIsp)", sqliteConnection);
                            command.Parameters.AddWithValue("idElementNormTimeIsp", idElement);
                            command.Parameters.AddWithValue("idVidIspNormTimeIsp", idVidIsp);
                            command.Parameters.AddWithValue("firstCehNormTimeIsp", (textBox131.Text != "" ? Convert.ToDouble(textBox131.Text) : 0));
                            command.Parameters.AddWithValue("firstCehVPNormTimeIsp", (textBox140.Text != "" ? Convert.ToDouble(textBox140.Text) : 0));
                            command.Parameters.AddWithValue("secondCehNormTimeIsp", (textBox132.Text != "" ? Convert.ToDouble(textBox132.Text) : 0));
                            command.Parameters.AddWithValue("secondCehVPNormTimeIsp", (textBox141.Text != "" ? Convert.ToDouble(textBox141.Text) : 0));
                            command.Parameters.AddWithValue("thirdCehNormTimeIsp", (textBox359.Text != "" ? Convert.ToDouble(textBox359.Text) : 0));
                            command.Parameters.AddWithValue("thirdCehVPNormTimeIsp", (textBox360.Text != "" ? Convert.ToDouble(textBox360.Text) : 0));
                            command.Parameters.AddWithValue("temperNormTimeIsp", (textBox133.Text != "" ? Convert.ToDouble(textBox133.Text) : 0));
                            command.Parameters.AddWithValue("temperVPNormTimeIsp", (textBox142.Text != "" ? Convert.ToDouble(textBox142.Text) : 0));
                            command.Parameters.AddWithValue("otkNormTimeIsp", (textBox150.Text != "" ? Convert.ToDouble(textBox150.Text) : 0));
                            command.Parameters.AddWithValue("otkVPNormTimeIsp", (textBox151.Text != "" ? Convert.ToDouble(textBox151.Text) : 0));
                            command.Parameters.AddWithValue("twoNormTimeIsp", (textBox134.Text != "" ? Convert.ToDouble(textBox134.Text) : 0));
                            command.Parameters.AddWithValue("twoVPNormTimeIsp", (textBox143.Text != "" ? Convert.ToDouble(textBox143.Text) : 0));
                            command.Parameters.AddWithValue("fiveNormTimeIsp", (textBox361.Text != "" ? Convert.ToDouble(textBox361.Text) : 0));
                            command.Parameters.AddWithValue("fiveVPNormTimeIsp", (textBox362.Text != "" ? Convert.ToDouble(textBox362.Text) : 0));
                            command.Parameters.AddWithValue("nineNormTimeIsp", (textBox135.Text != "" ? Convert.ToDouble(textBox135.Text) : 0));
                            command.Parameters.AddWithValue("nineVPNormTimeIsp", (textBox144.Text != "" ? Convert.ToDouble(textBox144.Text) : 0));
                            command.Parameters.AddWithValue("grLuchNormTimeIsp", (textBox136.Text != "" ? Convert.ToDouble(textBox136.Text) : 0));
                            command.Parameters.AddWithValue("grLuchVPNormTimeIsp", (textBox145.Text != "" ? Convert.ToDouble(textBox145.Text) : 0));
                            command.Parameters.AddWithValue("grCrecerNormTimeIsp", (textBox137.Text != "" ? Convert.ToDouble(textBox137.Text) : 0));
                            command.Parameters.AddWithValue("grCrecerVPNormTimeIsp", (textBox146.Text != "" ? Convert.ToDouble(textBox146.Text) : 0));
                            command.Parameters.AddWithValue("grMeteoNormTimeIsp", (textBox138.Text != "" ? Convert.ToDouble(textBox138.Text) : 0));
                            command.Parameters.AddWithValue("grMeteoVPNormTimeIsp", (textBox147.Text != "" ? Convert.ToDouble(textBox147.Text) : 0));
                            command.Parameters.AddWithValue("grKamaNormTimeIsp", (textBox139.Text != "" ? Convert.ToDouble(textBox139.Text) : 0));
                            command.Parameters.AddWithValue("grKamaVPNormTimeIsp", (textBox148.Text != "" ? Convert.ToDouble(textBox148.Text) : 0));
                            command.Parameters.AddWithValue("grSolenoidsNormTimeIsp", (textBox357.Text != "" ? Convert.ToDouble(textBox357.Text) : 0));
                            command.Parameters.AddWithValue("grSolenoidsVPNormTimeIsp", (textBox358.Text != "" ? Convert.ToDouble(textBox358.Text) : 0));
                            command.Parameters.AddWithValue("grGDINormTimeIsp", (textBox363.Text != "" ? Convert.ToDouble(textBox363.Text) : 0));
                            command.Parameters.AddWithValue("grGDIVPNormTimeIsp", (textBox367.Text != "" ? Convert.ToDouble(textBox367.Text) : 0));
                            command.Parameters.AddWithValue("grSVKNormTimeIsp", (textBox364.Text != "" ? Convert.ToDouble(textBox364.Text) : 0));
                            command.Parameters.AddWithValue("grSVKVPNormTimeIsp", (textBox368.Text != "" ? Convert.ToDouble(textBox368.Text) : 0));
                            command.Parameters.AddWithValue("grVeterNormTimeIsp", (textBox365.Text != "" ? Convert.ToDouble(textBox365.Text) : 0));
                            command.Parameters.AddWithValue("grVeterVPNormTimeIsp", (textBox369.Text != "" ? Convert.ToDouble(textBox369.Text) : 0));
                            command.Parameters.AddWithValue("grZummerNormTimeIsp", (textBox366.Text != "" ? Convert.ToDouble(textBox366.Text) : 0));
                            command.Parameters.AddWithValue("grZummerVPNormTimeIsp", (textBox370.Text != "" ? Convert.ToDouble(textBox370.Text) : 0));
                            sqliteConnection.Open();
                            command.ExecuteNonQuery();
                            sqliteConnection.Close();
                            functionMessageShow(2, "Данные успешно добавлены");
                            functionQueryNormTimeIsp();
                            functionDisableShowNormTimeIsp();
                            positionNormTimeIsp = normTimeIspList.Count - 1;
                            functionShowNormTimeIsp(positionNormTimeIsp);
                        }
                        else
                        {
                            functionMessageShow(1, "Норма времени для данного испытания уже существует!");
                        }
                    }
                    else
                    {
                        functionMessageShow(1, "Вид испытания с данным кодом не найдена в справочнике видов испытания!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Элемент с данным кодом не найден в справочнике элементов!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Испытуемый элемент' и 'Вид испытания' должны быть заполнены!");
            }
        }

        //Подтверждение редактирования
        private void button143_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox126.Text) && !string.IsNullOrWhiteSpace(textBox126.Text) && !string.IsNullOrEmpty(textBox130.Text) && !string.IsNullOrWhiteSpace(textBox130.Text))
            {
                int idElement = functionSearchIDElInSp(textBox126.Text);
                if (idElement > 0)
                {
                    int idVidIsp = functionSearchVidIspInSp(textBox130.Text);
                    if (idVidIsp > 0)
                    {
                        SQLiteCommand command = new SQLiteCommand("UPDATE [NormTimeIsp] SET [idElementNormTimeIsp]=@idElementNormTimeIsp,[idVidIspNormTimeIsp]=@idVidIspNormTimeIsp,[firstCehNormTimeIsp]=@firstCehNormTimeIsp,[firstCehVPNormTimeIsp]=@firstCehVPNormTimeIsp,[secondCehNormTimeIsp]=@secondCehNormTimeIsp,[secondCehVPNormTimeIsp]=@secondCehVPNormTimeIsp,[thirdCehNormTimeIsp]=@thirdCehNormTimeIsp,[thirdCehVPNormTimeIsp]=@thirdCehVPNormTimeIsp,[temperNormTimeIsp]=@temperNormTimeIsp,[temperVPNormTimeIsp]=@temperVPNormTimeIsp,[otkNormTimeIsp]=@otkNormTimeIsp,[otkVPNormTimeIsp]=@otkVPNormTimeIsp,[twoNormTimeIsp]=@twoNormTimeIsp,[twoVPNormTimeIsp]=@twoVPNormTimeIsp,[fiveNormTimeIsp]=@fiveNormTimeIsp,[fiveVPNormTimeIsp]=@fiveVPNormTimeIsp,[nineNormTimeIsp]=@nineNormTimeIsp,[nineVPNormTimeIsp]=@nineVPNormTimeIsp,[grLuchNormTimeIsp]=@grLuchNormTimeIsp,[grLuchVPNormTimeIsp]=@grLuchVPNormTimeIsp,[grCrecerNormTimeIsp]=@grCrecerNormTimeIsp,[grCrecerVPNormTimeIsp]=@grCrecerVPNormTimeIsp,[grMeteoNormTimeIsp]=@grMeteoNormTimeIsp,[grMeteoVPNormTimeIsp]=@grMeteoVPNormTimeIsp,[grKamaNormTimeIsp]=@grKamaNormTimeIsp,[grKamaVPNormTimeIsp]=@grKamaVPNormTimeIsp,[grSolenoidsNormTimeIsp]=@grSolenoidsNormTimeIsp,[grSolenoidsVPNormTimeIsp]=@grSolenoidsVPNormTimeIsp,[grGDINormTimeIsp]=@grGDINormTimeIsp,[grGDIVPNormTimeIsp]=@grGDIVPNormTimeIsp,[grSVKNormTimeIsp]=@grSVKNormTimeIsp,[grSVKVPNormTimeIsp]=@grSVKVPNormTimeIsp,[grVeterNormTimeIsp]=@grVeterNormTimeIsp,[grVeterVPNormTimeIsp]=@grVeterVPNormTimeIsp,[grZummerNormTimeIsp]=@grZummerNormTimeIsp,[grZummerVPNormTimeIsp]=@grZummerVPNormTimeIsp WHERE [id]=@id", sqliteConnection);
                        command.Parameters.AddWithValue("id", textBox149.Text);
                        command.Parameters.AddWithValue("idElementNormTimeIsp", idElement);
                        command.Parameters.AddWithValue("idVidIspNormTimeIsp", idVidIsp);
                        command.Parameters.AddWithValue("firstCehNormTimeIsp", (textBox131.Text != "" ? Convert.ToDouble(textBox131.Text) : 0));
                        command.Parameters.AddWithValue("firstCehVPNormTimeIsp", (textBox140.Text != "" ? Convert.ToDouble(textBox140.Text) : 0));
                        command.Parameters.AddWithValue("secondCehNormTimeIsp", (textBox132.Text != "" ? Convert.ToDouble(textBox132.Text) : 0));
                        command.Parameters.AddWithValue("secondCehVPNormTimeIsp", (textBox141.Text != "" ? Convert.ToDouble(textBox141.Text) : 0));
                        command.Parameters.AddWithValue("thirdCehNormTimeIsp", (textBox359.Text != "" ? Convert.ToDouble(textBox359.Text) : 0));
                        command.Parameters.AddWithValue("thirdCehVPNormTimeIsp", (textBox360.Text != "" ? Convert.ToDouble(textBox360.Text) : 0));
                        command.Parameters.AddWithValue("temperNormTimeIsp", (textBox133.Text != "" ? Convert.ToDouble(textBox133.Text) : 0));
                        command.Parameters.AddWithValue("temperVPNormTimeIsp", (textBox142.Text != "" ? Convert.ToDouble(textBox142.Text) : 0));
                        command.Parameters.AddWithValue("otkNormTimeIsp", (textBox150.Text != "" ? Convert.ToDouble(textBox150.Text) : 0));
                        command.Parameters.AddWithValue("otkVPNormTimeIsp", (textBox151.Text != "" ? Convert.ToDouble(textBox151.Text) : 0));
                        command.Parameters.AddWithValue("twoNormTimeIsp", (textBox134.Text != "" ? Convert.ToDouble(textBox134.Text) : 0));
                        command.Parameters.AddWithValue("twoVPNormTimeIsp", (textBox143.Text != "" ? Convert.ToDouble(textBox143.Text) : 0));
                        command.Parameters.AddWithValue("fiveNormTimeIsp", (textBox361.Text != "" ? Convert.ToDouble(textBox361.Text) : 0));
                        command.Parameters.AddWithValue("fiveVPNormTimeIsp", (textBox362.Text != "" ? Convert.ToDouble(textBox362.Text) : 0));
                        command.Parameters.AddWithValue("nineNormTimeIsp", (textBox135.Text != "" ? Convert.ToDouble(textBox135.Text) : 0));
                        command.Parameters.AddWithValue("nineVPNormTimeIsp", (textBox144.Text != "" ? Convert.ToDouble(textBox144.Text) : 0));
                        command.Parameters.AddWithValue("grLuchNormTimeIsp", (textBox136.Text != "" ? Convert.ToDouble(textBox136.Text) : 0));
                        command.Parameters.AddWithValue("grLuchVPNormTimeIsp", (textBox145.Text != "" ? Convert.ToDouble(textBox145.Text) : 0));
                        command.Parameters.AddWithValue("grCrecerNormTimeIsp", (textBox137.Text != "" ? Convert.ToDouble(textBox137.Text) : 0));
                        command.Parameters.AddWithValue("grCrecerVPNormTimeIsp", (textBox146.Text != "" ? Convert.ToDouble(textBox146.Text) : 0));
                        command.Parameters.AddWithValue("grMeteoNormTimeIsp", (textBox138.Text != "" ? Convert.ToDouble(textBox138.Text) : 0));
                        command.Parameters.AddWithValue("grMeteoVPNormTimeIsp", (textBox147.Text != "" ? Convert.ToDouble(textBox147.Text) : 0));
                        command.Parameters.AddWithValue("grKamaNormTimeIsp", (textBox139.Text != "" ? Convert.ToDouble(textBox139.Text) : 0));
                        command.Parameters.AddWithValue("grKamaVPNormTimeIsp", (textBox148.Text != "" ? Convert.ToDouble(textBox148.Text) : 0));
                        command.Parameters.AddWithValue("grSolenoidsNormTimeIsp", (textBox357.Text != "" ? Convert.ToDouble(textBox357.Text) : 0));
                        command.Parameters.AddWithValue("grSolenoidsVPNormTimeIsp", (textBox358.Text != "" ? Convert.ToDouble(textBox358.Text) : 0));
                        command.Parameters.AddWithValue("grGDINormTimeIsp", (textBox363.Text != "" ? Convert.ToDouble(textBox363.Text) : 0));
                        command.Parameters.AddWithValue("grGDIVPNormTimeIsp", (textBox367.Text != "" ? Convert.ToDouble(textBox367.Text) : 0));
                        command.Parameters.AddWithValue("grSVKNormTimeIsp", (textBox364.Text != "" ? Convert.ToDouble(textBox364.Text) : 0));
                        command.Parameters.AddWithValue("grSVKVPNormTimeIsp", (textBox368.Text != "" ? Convert.ToDouble(textBox368.Text) : 0));
                        command.Parameters.AddWithValue("grVeterNormTimeIsp", (textBox365.Text != "" ? Convert.ToDouble(textBox365.Text) : 0));
                        command.Parameters.AddWithValue("grVeterVPNormTimeIsp", (textBox369.Text != "" ? Convert.ToDouble(textBox369.Text) : 0));
                        command.Parameters.AddWithValue("grZummerNormTimeIsp", (textBox366.Text != "" ? Convert.ToDouble(textBox366.Text) : 0));
                        command.Parameters.AddWithValue("grZummerVPNormTimeIsp", (textBox370.Text != "" ? Convert.ToDouble(textBox370.Text) : 0));
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно обновлены");
                        functionQueryNormTimeIsp();
                        functionDisableShowNormTimeIsp();
                        functionShowNormTimeIsp(positionNormTimeIsp);
                    }
                    else
                    {
                        functionMessageShow(1, "Вид испытания с данным кодом не найдена в справочнике видов испытания!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Элемент с данным кодом не найден в справочнике элементов!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Испытуемый элемент' и 'Вид испытания' должны быть заполнены!");
            }
        }

        //Поиск
        private void button149_Click(object sender, EventArgs e)
        {
            Form18 form18 = new Form18(normTimeIspList);
            form18.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionNormTimeIsp = ClassSearchStatic.position;
                    functionShowNormTimeIsp(positionNormTimeIsp);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "Элемент с данным " + ClassSearchStatic.searchtype + " не найден!");
                }
            }
        }

        //------------------------------БАЗА ДАННЫХ------------------------------
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ ЭЛЕМЕНТОВ ИЗ БД------------------------------
        private void functionQueryElements() {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT Elements.id, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, Elements.sp, Factorys.codeFactory, Factorys.nameFactory, Factorys.INN FROM [Elements] LEFT JOIN Factorys ON Elements.idFactoryPostElements=Factorys.id ORDER BY Elements.codeElement ASC", sqliteConnection);
            try
            {
                elementsList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassElements el = new ClassElements();
                    el.setId(Convert.ToInt32(sqliteReader["id"]));
                    el.setCode(Convert.ToString(sqliteReader["codeElement"]));
                    el.setPicture(Convert.ToString(sqliteReader["picture"]));
                    el.setIndex(Convert.ToString(sqliteReader["indexElement"]));
                    el.setName(Convert.ToString(sqliteReader["nameElement"]));
                    el.setSp(Convert.ToInt32(sqliteReader["sp"]));
                    el.codeFactory = Convert.ToString(sqliteReader["codeFactory"]);
                    el.nameFactory = Convert.ToString(sqliteReader["nameFactory"]);
                    el.innFactory = Convert.ToString(sqliteReader["INN"]);
                    elementsList.Add(el);
                    
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ ПРЕДПРИЯТИЙ ИЗ БД------------------------------
        private void functionQueryFactorys()
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT * FROM [Factorys] ORDER BY Factorys.codeFactory ASC", sqliteConnection);
            try
            {
                factorysList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassFactorys el = new ClassFactorys();
                    el.setId(Convert.ToInt32(sqliteReader["id"]));
                    el.setCode(Convert.ToString(sqliteReader["codeFactory"]));
                    el.setName(Convert.ToString(sqliteReader["nameFactory"]));
                    el.setAdress(Convert.ToString(sqliteReader["adress"]));
                    el.setFIO(Convert.ToString(sqliteReader["FIO"]));
                    el.setINN(Convert.ToString(sqliteReader["INN"]));
                    el.setUdal(Convert.ToString(sqliteReader["udal"]));
                    el.setSend(Convert.ToString(sqliteReader["send"]));
                    factorysList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ ПРЕГРАД ИЗ БД------------------------------
        private void functionQueryPregrads()
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open(); ;
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT PregradInfo.id, codePregradi, sizePregradi, vesPregradi, cenaPregradi, PregradName.namePregrad FROM [PregradInfo] INNER JOIN [PregradName] ON PregradInfo.namePregradi=PregradName.id ORDER BY codePregradi ASC", sqliteConnection);
            try
            {
                pregradsList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassPregrads el = new ClassPregrads();
                    el.setId(Convert.ToInt32(sqliteReader["id"]));
                    el.setCode(Convert.ToString(sqliteReader["codePregradi"]));
                    el.setName(Convert.ToString(sqliteReader["namePregrad"]));
                    el.setSize(Convert.ToString(sqliteReader["sizePregradi"]));
                    el.setVes(Convert.ToDouble(sqliteReader["vesPregradi"]));
                    el.setCena(Convert.ToDouble(sqliteReader["cenaPregradi"]));
                    pregradsList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ ВИДОВ ПРЕГРАД ИЗ БД------------------------------
        private void functionQueryPregradsName()
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT * FROM [PregradName] ORDER BY namePregrad ASC", sqliteConnection);
            try
            {
                pregradsListName.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassPregradsName el = new ClassPregradsName();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.name = Convert.ToString(sqliteReader["namePregrad"]);
                    pregradsListName.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ ВИДОВ ИСПЫТАНИЙ ИЗ БД------------------------------
        private void functionQueryVidIsp()
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT * FROM [VidIsp] ORDER BY codeVida ASC", sqliteConnection);
            try
            {
                vidIspList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassVidIsp el = new ClassVidIsp();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.code = Convert.ToString(sqliteReader["codeVida"]);
                    el.name = Convert.ToString(sqliteReader["nameVida"]);
                    vidIspList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ НЕНУЖНЫХ ВК ИЗ БД------------------------------
        private void functionQueryNoneVk()
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT noneVK.id, Elements.codeElement, Elements.nameElement, VidIsp.codeVida, VidIsp.nameVida FROM [noneVK] INNER JOIN Elements ON noneVK.codeElementVK = Elements.id INNER JOIN VidIsp ON noneVK.vidIspVK = VidIsp.id ORDER BY codeElement ASC", sqliteConnection);
            try
            {
                noneVkList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassNoneVk el = new ClassNoneVk();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.codeElement = Convert.ToString(sqliteReader["codeElement"]);
                    el.nameElement = Convert.ToString(sqliteReader["nameElement"]);
                    el.codeVida = Convert.ToString(sqliteReader["codeVida"]);
                    el.nameVida = Convert.ToString(sqliteReader["nameVida"]);
                    noneVkList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ ЕДИНИЦ ИЗМЕРЕНИЙ ИЗ БД------------------------------
        private void functionQueryEdIzm()
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT * FROM [EdIzm] ORDER BY codeEdIzm2 ASC", sqliteConnection);
            try
            {
                edIzmList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassEdIzm el = new ClassEdIzm();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.code2 = Convert.ToString(sqliteReader["codeEdIzm2"]);
                    el.code3 = Convert.ToString(sqliteReader["cpdeEdIzm3"]);
                    el.fName = Convert.ToString(sqliteReader["nameFull"]);
                    el.sName = Convert.ToString(sqliteReader["nameSocr"]);
                    edIzmList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ МАТ ЧАСТИ ИЗ БД------------------------------
        private void functionQueryMC()
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT MatChast.id,MatChast.codeMC3,MatChast.codeMC5,MatChast.codeMVN,MatChast.socrNameSistem,MatChast.nameSistem,MatChast.fullNameSistem,MatChast.cenaMC,Factorys.codeFactory, Factorys.nameFactory, Factorys.INN FROM [MatChast] LEFT JOIN Factorys ON codeFactoryMC=Factorys.id ORDER BY codeMC3 ASC", sqliteConnection);
            try
            {
                mcList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassMC el = new ClassMC();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.codeMC3 = Convert.ToString(sqliteReader["codeMC3"]);
                    el.codeMC5 = Convert.ToString(sqliteReader["codeMC5"]);
                    el.codeMVN = Convert.ToString(sqliteReader["codeMVN"]);
                    el.verySocrName = Convert.ToString(sqliteReader["socrNameSistem"]);
                    el.socrName = Convert.ToString(sqliteReader["nameSistem"]);
                    el.fullName = Convert.ToString(sqliteReader["fullNameSistem"]);
                    el.codeFactory = Convert.ToString(sqliteReader["codeFactory"]);
                    el.nameFactory = Convert.ToString(sqliteReader["nameFactory"]);
                    el.innFactory = Convert.ToString(sqliteReader["INN"]);
                    if(Convert.ToString(sqliteReader["cenaMC"]).Length > 0)
                        el.cena = Convert.ToDouble(sqliteReader["cenaMC"]);
                    else
                        el.cena = 0;
                    mcList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ ПОЛИГОНОВ ИЗ БД------------------------------
        private void functionQueryPoligons()
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT Poligons.id,Poligons.numberPl,Poligons.namePoligon,Factorys.codeFactory FROM [Poligons] LEFT JOIN Factorys ON codeFactoryPL=Factorys.id ORDER BY numberPl ASC", sqliteConnection);
            try
            {
                poligonsList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassPoligons el = new ClassPoligons();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.namePl = Convert.ToString(sqliteReader["namePoligon"]);
                    el.numberPl = Convert.ToString(sqliteReader["numberPl"]);
                    el.codeFactory = Convert.ToString(sqliteReader["codeFactory"]);
                    poligonsList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ МЕСЯЧНЫХ ФОРМАТОК ИСПЫТАНИЙ ИЗ БД------------------------------
        private void functionQueryFI()
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT FIMespl.id,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,FIMespl.codeSysFIMespl,FIMespl.codeUsIspMespl,FIMespl.distanceFIMespl,FIMespl.sizePartFIMespl,FIMespl.lgotFIMespl,FIMespl.countShotPartFIMespl,FIMespl.countReShotFIMespl,FIMespl.countPodShotFIMespl,FIMespl.uslCountPartYearFIMespl,FIMespl.codePregradiOneFIMespl, FIMespl.livePregradiOneFIMespl,FIMespl.codePregradiTwoFIMespl,FIMespl.livePregradiTwoFIMespl,FIMespl.liveSystemFIMespl,FIMespl.prevLiveSystemFIMespl,FIMespl.codeNameStFIMespl,FIMespl.liveStFIMespl,FIMespl.prevLiveStFIMespl,FIMespl.codeNameStandFIMespl,FIMespl.liveStandFIMespl,FIMespl.prevLiveStandFIMespl,koefAmorGilzFIMespl,FIMespl.koefPrivedZarFIMespl,koefPrivShotFIMespl,uslCountZvFIMespl,EdIzm.codeEdIzm2,EdIzm.nameFull FROM [FIMespl] INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON FIMespl.codeEdIzmFIMespl=EdIzm.id ORDER BY Elements.codeElement ASC", sqliteConnection);
            try
            {
                fiList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassFI el = new ClassFI();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    //Испытуемый элемент
                    el.codeElementFIMespl = Convert.ToString(sqliteReader["codeElement"]);
                    el.pictureElementFIMespl = Convert.ToString(sqliteReader["picture"]);
                    el.indexElementFIMespl = Convert.ToString(sqliteReader["indexElement"]);
                    el.nameElementFIMespl = Convert.ToString(sqliteReader["nameElement"]);
                    //Вид испытания
                    el.codeVidIspFIMespl = Convert.ToString(sqliteReader["codeVida"]);
                    el.nameVidIspFIMespl = Convert.ToString(sqliteReader["nameVida"]);
                    //Описательная часть УФИ
                    //Шифр, наименование системы
                    el.idSysFIMespl = Convert.ToString(sqliteReader["codeSysFIMespl"]);
                    if (Convert.ToString(sqliteReader["codeSysFIMespl"]).Length > 0)
                    {
                        ClassMC promSysFIMespl = functionReturnMC(Convert.ToInt32(sqliteReader["codeSysFIMespl"]));
                        el.codeSysFIMespl = Convert.ToString(promSysFIMespl.codeMC3);
                        el.nameSysFIMespl = Convert.ToString(promSysFIMespl.verySocrName);
                    }
                    else
                    {
                        el.codeSysFIMespl = "000";
                        el.nameSysFIMespl = "*******";
                    }
                    //Шифр условия испытаний
                    el.codeUsIspMespl = Convert.ToString(sqliteReader["codeUsIspMespl"]);
                    //Дистанция
                    el.distanceFIMespl = Convert.ToString(sqliteReader["distanceFIMespl"]);
                    //Размер партии
                    el.sizePartFIMespl = Convert.ToString(sqliteReader["sizePartFIMespl"]);
                    //Льготность
                    el.lgotFIMespl = Convert.ToString(sqliteReader["lgotFIMespl"]);
                    //Количество выстрелов от партии
                    el.countShotPartFIMespl = Convert.ToString(sqliteReader["countShotPartFIMespl"]);
                    //Количество повторных выстрелов
                    el.countReShotFIMespl = Convert.ToString(sqliteReader["countReShotFIMespl"]);
                    //Количество подготовительных выстрелов
                    el.countPodShotFIMespl = Convert.ToString(sqliteReader["countPodShotFIMespl"]);
                    //Условное количество партий в год
                    el.uslCountPartYearFIMespl = Convert.ToString(sqliteReader["uslCountPartYearFIMespl"]);
                    //Преграда 1
                    el.idPregradiOneFIMespl = Convert.ToString(sqliteReader["codePregradiOneFIMespl"]);
                    if (Convert.ToString(sqliteReader["codePregradiOneFIMespl"]).Length > 0)
                        el.codePregradiOneFIMespl = Convert.ToString(functionReturnPregrads(Convert.ToInt32(sqliteReader["codePregradiOneFIMespl"])).getCode());
                    else
                        el.codePregradiOneFIMespl = "000";
                    el.livePregradiOneFIMespl = Convert.ToString(sqliteReader["livePregradiOneFIMespl"]);
                    //Преграда 2
                    el.idPregradiTwoFIMespl = Convert.ToString(sqliteReader["codePregradiTwoFIMespl"]);
                    if (Convert.ToString(sqliteReader["codePregradiTwoFIMespl"]).Length > 0)
                        el.codePregradiTwoFIMespl = Convert.ToString(functionReturnPregrads(Convert.ToInt32(sqliteReader["codePregradiTwoFIMespl"])).getCode());
                    else
                        el.codePregradiTwoFIMespl = "000";
                    el.livePregradiTwoFIMespl = Convert.ToString(sqliteReader["livePregradiTwoFIMespl"]);
                    //Живучесть системы
                    el.liveSystemFIMespl = Convert.ToString(sqliteReader["liveSystemFIMespl"]);
                    //Предыдущая живучесть системы
                    el.prevLiveSystemFIMespl = Convert.ToString(sqliteReader["prevLiveSystemFIMespl"]);
                    //Шифр, наименование ствола
                    el.idNameStFIMespl = Convert.ToString(sqliteReader["codeNameStFIMespl"]);
                    if (Convert.ToString(sqliteReader["codeNameStFIMespl"]).Length > 0)
                    {
                        ClassMC promNameStFIMespl = functionReturnMC(Convert.ToInt32(sqliteReader["codeNameStFIMespl"]));
                        el.codeNameStFIMespl = Convert.ToString(promNameStFIMespl.codeMC3);
                        el.nameNameStFIMespl = Convert.ToString(promNameStFIMespl.verySocrName);
                    }
                    else
                    {
                        el.codeNameStFIMespl = "000";
                        el.nameNameStFIMespl = "*******";
                    }
                    //Живучесть ствола
                    el.liveStFIMespl = Convert.ToString(sqliteReader["liveStFIMespl"]);
                    //Предыдущая живучесть ствола
                    el.prevLiveStFIMespl = Convert.ToString(sqliteReader["prevLiveStFIMespl"]);
                    //Шифр, наименование стенда
                    el.idNameStandFIMespl = Convert.ToString(sqliteReader["codeNameStandFIMespl"]);
                    if (Convert.ToString(sqliteReader["codeNameStandFIMespl"]).Length > 0)
                    {
                        ClassMC promCodeNameStandFIMespl = functionReturnMC(Convert.ToInt32(sqliteReader["codeNameStandFIMespl"]));
                        el.codeNameStandFIMespl = Convert.ToString(promCodeNameStandFIMespl.codeMC3);
                        el.nameNameStandFIMespl = Convert.ToString(promCodeNameStandFIMespl.verySocrName);
                    }
                    else
                    {
                        el.codeNameStandFIMespl = "000";
                        el.nameNameStandFIMespl = "*******";
                    }
                    //Живучесть стенда
                    el.liveStandFIMespl = Convert.ToString(sqliteReader["liveStandFIMespl"]);
                    //Предыдущая живучесть стенда
                    el.prevLiveStandFIMespl = Convert.ToString(sqliteReader["prevLiveStandFIMespl"]);
                    //Коэффицент амортизации гильзы
                    el.koefAmorGilzFIMespl = Convert.ToString(sqliteReader["koefAmorGilzFIMespl"]);
                    //Коэффицент привед. заряда
                    el.koefPrivedZarFIMespl = Convert.ToString(sqliteReader["koefPrivedZarFIMespl"]);
                    //Коэффицент прив. выстрела
                    el.koefPrivShotFIMespl = Convert.ToString(sqliteReader["koefPrivShotFIMespl"]);
                    //Услов. кол. звеньев
                    el.uslCountZvFIMespl = Convert.ToString(sqliteReader["uslCountZvFIMespl"]);
                    //Код ед. измерения
                    el.codeEdIzmFIMespl = Convert.ToString(sqliteReader["codeEdIzm2"]);
                    el.nameEdIzmFIMespl = Convert.ToString(sqliteReader["nameFull"]);
                    fiList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ МЕСЯЧНОЙ ВЕДОМОСТЕЙ КОМПЛЕКТАЦИЙ ИЗ БД------------------------------
        private void functionQueryVKFirst(bool timeQuery)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,VKMespl.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull,VKMespl.idElementVKMespl FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id ORDER BY Elements.codeElement ASC", sqliteConnection);
            //SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida FROM [VKMespl] INNER JOIN Elements ON VKMespl.codeElementVKMespl=Elements.id INNER JOIN VidIsp ON VKMespl.vidIspVKMespl=VidIsp.id", sqliteConnection);
            //SQLiteCommand command2 = new SQLiteCommand("SELECT VKMesplElements.id,VKMesplElements.idVKMespl,VKMesplElements.idElementVKMespl,VKMesplElements.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull FROM [VKMesplElements] INNER JOIN EdIzm ON VKMesplElements.edIzmVKMespl=EdIzm.id", sqliteConnection);
            try
            {
                vkMesplList.Clear();
                vkMesplSbList.Clear();
                vkMesplElementList.Clear();
                vkMesplSbElementList.Clear();
                if (timeQuery)
                    MessageBox.Show("Этап 0");
                System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
                if (timeQuery)
                    MessageBox.Show("Этап 1");
                sw.Reset();
                sw.Start();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    bool prVKInVKmespl = true;
                    if (vkMesplList.Count > 0)
                        foreach (ClassVKMespl vk in vkMesplList)
                            if (vk.codeElementVKMespl == Convert.ToString(sqliteReader["codeElement"]) && vk.idFIMespl == Convert.ToInt32(sqliteReader["idFIMespl"]))
                                prVKInVKmespl = false;
                    if (vkMesplSbList.Count > 0)
                        foreach (ClassVKMespl vk in vkMesplSbList)
                            if (vk.codeElementVKMespl == Convert.ToString(sqliteReader["codeElement"]) && vk.idFIMespl == Convert.ToInt32(sqliteReader["idFIMespl"]))
                                prVKInVKmespl = false;
                    if (prVKInVKmespl)
                    {
                        ClassVKMespl el = new ClassVKMespl();
                        el.id = Convert.ToInt32(sqliteReader["id"]);
                        el.idFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                        el.codeElementVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                        el.pictureElementVKMespl = Convert.ToString(sqliteReader["picture"]);
                        el.indexElementVKMespl = Convert.ToString(sqliteReader["indexElement"]);
                        el.nameElementVKMespl = Convert.ToString(sqliteReader["nameElement"]);
                        el.codeVidIspVKMespl = Convert.ToString(sqliteReader["codeVida"]);
                        el.nameVidIspVKMespl = Convert.ToString(sqliteReader["nameVida"]);
                        if (Convert.ToString(sqliteReader["codeVida"]) == "098" || Convert.ToString(sqliteReader["codeVida"]) == "099" || Convert.ToString(sqliteReader["codeVida"]) == "205" || Convert.ToString(sqliteReader["codeVida"]) == "206" || Convert.ToString(sqliteReader["codeVida"]) == "207" || Convert.ToString(sqliteReader["codeVida"]) == "239")
                            vkMesplSbList.Add(el);
                        else
                            vkMesplList.Add(el);
                    }
                }
                sqliteReader.Close();
                sw.Stop();
                if (timeQuery)
                    MessageBox.Show("Затраченное время: " + sw.Elapsed);
                sw.Reset();
                if (timeQuery)
                    MessageBox.Show("Этап 2");
                sw.Start();
                sqliteReader = command.ExecuteReader();
                System.Diagnostics.Stopwatch timeSearch = new System.Diagnostics.Stopwatch();
                timeSearch.Reset();
                while (sqliteReader.Read())
                {
                    ClassVKMesplElements el = new ClassVKMesplElements();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.countVKMespl = Convert.ToDouble(sqliteReader["countVKMespl"]);
                    el.codeEdIzmVKMespl = Convert.ToString(sqliteReader["codeEdIzm2"]);
                    el.nameEdIzmVKMespl = Convert.ToString(sqliteReader["nameFull"]);
                    int prIdElement = Convert.ToInt32(sqliteReader["idElementVKMespl"]);
                    string prIdVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                    int prIdFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                    timeSearch.Start();
                    foreach (ClassElements element in elementsList)
                        if (element.getId() == prIdElement)
                        {
                            el.el = element;
                            //MessageBox.Show(element.getCode());
                        }
                    timeSearch.Stop();
                    foreach (ClassVKMespl element in vkMesplList)
                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                        {
                            element.listElements.Add(el);
                            //Если такой элемент уже встречался
                            bool proverkaInVKMesplElement = true;
                            if (vkMesplElementList.Count > 0)
                                foreach (ClassVKMesplElements k in vkMesplElementList)
                                    if (k.el == el.el)
                                    {
                                        k.listElements.Add(element);
                                        k.listElementsCount.Add(el.countVKMespl);
                                        proverkaInVKMesplElement = false;
                                    }
                            if (proverkaInVKMesplElement)
                            {
                                el.listElements.Add(element);
                                el.listElementsCount.Add(el.countVKMespl);
                                vkMesplElementList.Add(el);
                            }
                        }
                    foreach (ClassVKMespl element in vkMesplSbList)
                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                        {
                            element.listElements.Add(el);
                            //Если такой элемент уже встречался
                            bool proverkaInVKMesplElement = true;
                            if (vkMesplSbElementList.Count > 0)
                                foreach (ClassVKMesplElements k in vkMesplSbElementList)
                                    if (k.el == el.el)
                                    {
                                        k.listElements.Add(element);
                                        k.listElementsCount.Add(el.countVKMespl);
                                        proverkaInVKMesplElement = false;
                                    }
                            if (proverkaInVKMesplElement)
                            {
                                el.listElements.Add(element);
                                el.listElementsCount.Add(el.countVKMespl);
                                vkMesplSbElementList.Add(el);
                            }
                        }
                }
                sw.Stop();
                if (timeQuery)
                {
                    MessageBox.Show("Затраченное время: " + sw.Elapsed);
                    MessageBox.Show("Затраченное время на поиски элемента: " + timeSearch.Elapsed);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        private void functionQueryVKBreak(bool timeQuery)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,VKMespl.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull,VKMespl.idElementVKMespl FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id ORDER BY Elements.codeElement ASC", sqliteConnection);
            //SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida FROM [VKMespl] INNER JOIN Elements ON VKMespl.codeElementVKMespl=Elements.id INNER JOIN VidIsp ON VKMespl.vidIspVKMespl=VidIsp.id", sqliteConnection);
            //SQLiteCommand command2 = new SQLiteCommand("SELECT VKMesplElements.id,VKMesplElements.idVKMespl,VKMesplElements.idElementVKMespl,VKMesplElements.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull FROM [VKMesplElements] INNER JOIN EdIzm ON VKMesplElements.edIzmVKMespl=EdIzm.id", sqliteConnection);
            try
            {
                vkMesplList.Clear();
                vkMesplSbList.Clear();
                vkMesplElementList.Clear();
                vkMesplSbElementList.Clear();
                if (timeQuery)
                    MessageBox.Show("1");
                System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
                sw.Reset();
                sw.Start();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    bool prVKInVKmespl = true;
                    if (Convert.ToString(sqliteReader["codeVida"]) != "098" || Convert.ToString(sqliteReader["codeVida"]) != "099" || Convert.ToString(sqliteReader["codeVida"]) != "205" || Convert.ToString(sqliteReader["codeVida"]) != "206" || Convert.ToString(sqliteReader["codeVida"]) != "207" || Convert.ToString(sqliteReader["codeVida"]) != "239")
                        if (vkMesplList.Count > 0)
                            foreach (ClassVKMespl vk in vkMesplList)
                                if (vk.codeElementVKMespl == Convert.ToString(sqliteReader["codeElement"]) && vk.idFIMespl == Convert.ToInt32(sqliteReader["idFIMespl"]))
                                {
                                    //MessageBox.Show("Совпало в испытаниях: форматка ID - " + vk.idFIMespl);
                                    prVKInVKmespl = false;
                                    break;
                                }
                    if (Convert.ToString(sqliteReader["codeVida"]) == "098" || Convert.ToString(sqliteReader["codeVida"]) == "099" || Convert.ToString(sqliteReader["codeVida"]) == "205" || Convert.ToString(sqliteReader["codeVida"]) == "206" || Convert.ToString(sqliteReader["codeVida"]) == "207" || Convert.ToString(sqliteReader["codeVida"]) == "239")
                        if (vkMesplSbList.Count > 0)
                            foreach (ClassVKMespl vk in vkMesplSbList)
                                if (vk.codeElementVKMespl == Convert.ToString(sqliteReader["codeElement"]) && vk.idFIMespl == Convert.ToInt32(sqliteReader["idFIMespl"]))
                                {
                                    //MessageBox.Show("Совпало в сборке: форматка ID - " + vk.idFIMespl);
                                    prVKInVKmespl = false;
                                    break;
                                }
                    if (prVKInVKmespl)
                    {
                        ClassVKMespl el = new ClassVKMespl();
                        el.id = Convert.ToInt32(sqliteReader["id"]);
                        el.idFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                        el.codeElementVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                        el.pictureElementVKMespl = Convert.ToString(sqliteReader["picture"]);
                        el.indexElementVKMespl = Convert.ToString(sqliteReader["indexElement"]);
                        el.nameElementVKMespl = Convert.ToString(sqliteReader["nameElement"]);
                        el.codeVidIspVKMespl = Convert.ToString(sqliteReader["codeVida"]);
                        el.nameVidIspVKMespl = Convert.ToString(sqliteReader["nameVida"]);
                        if (Convert.ToString(sqliteReader["codeVida"]) == "098" || Convert.ToString(sqliteReader["codeVida"]) == "099" || Convert.ToString(sqliteReader["codeVida"]) == "205" || Convert.ToString(sqliteReader["codeVida"]) == "206" || Convert.ToString(sqliteReader["codeVida"]) == "207" || Convert.ToString(sqliteReader["codeVida"]) == "239")
                            vkMesplSbList.Add(el);
                        else
                            vkMesplList.Add(el);
                    }
                }
                sqliteReader.Close();
                sw.Stop();
                if (timeQuery)
                {
                    MessageBox.Show("Затраченное время с брейком на первый этап: " + sw.Elapsed);
                    MessageBox.Show("2");
                }
                sw.Reset();
                sw.Start();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassVKMesplElements el = new ClassVKMesplElements();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.countVKMespl = Convert.ToDouble(sqliteReader["countVKMespl"]);
                    el.codeEdIzmVKMespl = Convert.ToString(sqliteReader["codeEdIzm2"]);
                    el.nameEdIzmVKMespl = Convert.ToString(sqliteReader["nameFull"]);
                    int prIdElement = Convert.ToInt32(sqliteReader["idElementVKMespl"]);
                    string prIdVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                    int prIdFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                    foreach (ClassElements element in elementsList)
                        if (element.getId() == prIdElement)
                        {
                            el.el = element;
                            //MessageBox.Show(element.getCode());
                            break;
                        }
                    foreach (ClassVKMespl element in vkMesplList)
                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                        {
                            element.listElements.Add(el);
                            //Если такой элемент уже встречался
                            bool proverkaInVKMesplElement = true;
                            if (vkMesplElementList.Count > 0)
                                foreach (ClassVKMesplElements k in vkMesplElementList)
                                    if (k.el == el.el)
                                    {
                                        k.listElements.Add(element);
                                        k.listElementsCount.Add(el.countVKMespl);
                                        proverkaInVKMesplElement = false;
                                    }
                            if (proverkaInVKMesplElement)
                            {
                                el.listElements.Add(element);
                                el.listElementsCount.Add(el.countVKMespl);
                                vkMesplElementList.Add(el);
                            }
                        }
                    foreach (ClassVKMespl element in vkMesplSbList)
                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                        {
                            element.listElements.Add(el);
                            //Если такой элемент уже встречался
                            bool proverkaInVKMesplElement = true;
                            if (vkMesplSbElementList.Count > 0)
                                foreach (ClassVKMesplElements k in vkMesplSbElementList)
                                    if (k.el == el.el)
                                    {
                                        k.listElements.Add(element);
                                        k.listElementsCount.Add(el.countVKMespl);
                                        proverkaInVKMesplElement = false;
                                    }
                            if (proverkaInVKMesplElement)
                            {
                                el.listElements.Add(element);
                                el.listElementsCount.Add(el.countVKMespl);
                                vkMesplSbElementList.Add(el);
                            }
                        }
                }
                if (timeQuery)
                    MessageBox.Show("3");
                sw.Stop();
                if (timeQuery)
                    MessageBox.Show("Затраченное время с брейком на второй этап: " + sw.Elapsed);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
            if (timeQuery)
            {
                MessageBox.Show("Вк меспл " + vkMesplList.Count.ToString());
                MessageBox.Show("Вк меспл СБ " + vkMesplSbList.Count.ToString());
                MessageBox.Show("Вк меспл эл " + vkMesplElementList.Count.ToString());
                MessageBox.Show("Вк меспл СБ эл " + vkMesplSbElementList.Count.ToString());
            }
        }
        private void functionQueryVKComment(bool timeQuery)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,VKMespl.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull,VKMespl.idElementVKMespl FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id ORDER BY Elements.codeElement ASC", sqliteConnection);
            //SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida FROM [VKMespl] INNER JOIN Elements ON VKMespl.codeElementVKMespl=Elements.id INNER JOIN VidIsp ON VKMespl.vidIspVKMespl=VidIsp.id", sqliteConnection);
            //SQLiteCommand command2 = new SQLiteCommand("SELECT VKMesplElements.id,VKMesplElements.idVKMespl,VKMesplElements.idElementVKMespl,VKMesplElements.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull FROM [VKMesplElements] INNER JOIN EdIzm ON VKMesplElements.edIzmVKMespl=EdIzm.id", sqliteConnection);
            try
            {
                vkMesplList.Clear();
                vkMesplSbList.Clear();
                vkMesplElementList.Clear();
                vkMesplSbElementList.Clear();
                if (timeQuery)
                    MessageBox.Show("1");
                System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
                sw.Reset();
                sw.Start();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    bool prVKInVKmespl = true;
                    /*if (Convert.ToString(sqliteReader["codeVida"]) != "098" || Convert.ToString(sqliteReader["codeVida"]) != "099" || Convert.ToString(sqliteReader["codeVida"]) != "205" || Convert.ToString(sqliteReader["codeVida"]) != "206" || Convert.ToString(sqliteReader["codeVida"]) != "207" || Convert.ToString(sqliteReader["codeVida"]) != "239")
                        if (vkMesplList.Count > 0)
                            foreach (ClassVKMespl vk in vkMesplList)
                                if (vk.codeElementVKMespl == Convert.ToString(sqliteReader["codeElement"]) && vk.idFIMespl == Convert.ToInt32(sqliteReader["idFIMespl"]))
                                {
                                    prVKInVKmespl = false;
                                    break;
                                }
                    if (Convert.ToString(sqliteReader["codeVida"]) == "098" || Convert.ToString(sqliteReader["codeVida"]) == "099" || Convert.ToString(sqliteReader["codeVida"]) == "205" || Convert.ToString(sqliteReader["codeVida"]) == "206" || Convert.ToString(sqliteReader["codeVida"]) == "207" || Convert.ToString(sqliteReader["codeVida"]) == "239")
                        if (vkMesplSbList.Count > 0)
                            foreach (ClassVKMespl vk in vkMesplSbList)
                                if (vk.codeElementVKMespl == Convert.ToString(sqliteReader["codeElement"]) && vk.idFIMespl == Convert.ToInt32(sqliteReader["idFIMespl"]))
                                {
                                    prVKInVKmespl = false;
                                    break;
                                }*/
                    if (prVKInVKmespl)
                    {
                        ClassVKMespl el = new ClassVKMespl();
                        el.id = Convert.ToInt32(sqliteReader["id"]);
                        el.idFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                        el.codeElementVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                        el.pictureElementVKMespl = Convert.ToString(sqliteReader["picture"]);
                        el.indexElementVKMespl = Convert.ToString(sqliteReader["indexElement"]);
                        el.nameElementVKMespl = Convert.ToString(sqliteReader["nameElement"]);
                        el.codeVidIspVKMespl = Convert.ToString(sqliteReader["codeVida"]);
                        el.nameVidIspVKMespl = Convert.ToString(sqliteReader["nameVida"]);
                        if (Convert.ToString(sqliteReader["codeVida"]) == "098" || Convert.ToString(sqliteReader["codeVida"]) == "099" || Convert.ToString(sqliteReader["codeVida"]) == "205" || Convert.ToString(sqliteReader["codeVida"]) == "206" || Convert.ToString(sqliteReader["codeVida"]) == "207" || Convert.ToString(sqliteReader["codeVida"]) == "239")
                            vkMesplSbList.Add(el);
                        else
                            vkMesplList.Add(el);
                    }
                }
                sqliteReader.Close();
                sw.Stop();
                if (timeQuery)
                {
                    MessageBox.Show("Затраченное время с брейком на первый этап: " + sw.Elapsed);
                    MessageBox.Show("2");
                }
                sw.Reset();
                sw.Start();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassVKMesplElements el = new ClassVKMesplElements();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.countVKMespl = Convert.ToDouble(sqliteReader["countVKMespl"]);
                    el.codeEdIzmVKMespl = Convert.ToString(sqliteReader["codeEdIzm2"]);
                    el.nameEdIzmVKMespl = Convert.ToString(sqliteReader["nameFull"]);
                    int prIdElement = Convert.ToInt32(sqliteReader["idElementVKMespl"]);
                    string prIdVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                    int prIdFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                    foreach (ClassElements element in elementsList)
                        if (element.getId() == prIdElement)
                        {
                            el.el = element;
                            //MessageBox.Show(element.getCode());
                            break;
                        }
                    foreach (ClassVKMespl element in vkMesplList)
                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                        {
                            element.listElements.Add(el);
                            //Если такой элемент уже встречался
                            bool proverkaInVKMesplElement = true;
                            if (vkMesplElementList.Count > 0)
                                foreach (ClassVKMesplElements k in vkMesplElementList)
                                    if (k.el == el.el)
                                    {
                                        k.listElements.Add(element);
                                        k.listElementsCount.Add(el.countVKMespl);
                                        proverkaInVKMesplElement = false;
                                    }
                            if (proverkaInVKMesplElement)
                            {
                                el.listElements.Add(element);
                                el.listElementsCount.Add(el.countVKMespl);
                                vkMesplElementList.Add(el);
                            }
                        }
                    foreach (ClassVKMespl element in vkMesplSbList)
                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                        {
                            element.listElements.Add(el);
                            //Если такой элемент уже встречался
                            bool proverkaInVKMesplElement = true;
                            if (vkMesplSbElementList.Count > 0)
                                foreach (ClassVKMesplElements k in vkMesplSbElementList)
                                    if (k.el == el.el)
                                    {
                                        k.listElements.Add(element);
                                        k.listElementsCount.Add(el.countVKMespl);
                                        proverkaInVKMesplElement = false;
                                    }
                            if (proverkaInVKMesplElement)
                            {
                                el.listElements.Add(element);
                                el.listElementsCount.Add(el.countVKMespl);
                                vkMesplSbElementList.Add(el);
                            }
                        }
                }
                if (timeQuery)
                    MessageBox.Show("3");
                sw.Stop();
                if (timeQuery)
                    MessageBox.Show("Затраченное время с брейком на второй этап: " + sw.Elapsed);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
            if (timeQuery)
            {
                MessageBox.Show("Вк меспл " + vkMesplList.Count.ToString());
                MessageBox.Show("Вк меспл СБ " + vkMesplSbList.Count.ToString());
                MessageBox.Show("Вк меспл эл " + vkMesplElementList.Count.ToString());
                MessageBox.Show("Вк меспл СБ эл " + vkMesplSbElementList.Count.ToString());
            }
        }
        private void functionQueryVKGroup(bool timeQuery)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,VKMespl.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull,VKMespl.idElementVKMespl FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id GROUP BY idFIMespl ORDER BY Elements.codeElement ASC", sqliteConnection);
            //SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida FROM [VKMespl] INNER JOIN Elements ON VKMespl.codeElementVKMespl=Elements.id INNER JOIN VidIsp ON VKMespl.vidIspVKMespl=VidIsp.id", sqliteConnection);
            //SQLiteCommand command2 = new SQLiteCommand("SELECT VKMesplElements.id,VKMesplElements.idVKMespl,VKMesplElements.idElementVKMespl,VKMesplElements.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull FROM [VKMesplElements] INNER JOIN EdIzm ON VKMesplElements.edIzmVKMespl=EdIzm.id", sqliteConnection);
            try
            {
                vkMesplList.Clear();
                vkMesplSbList.Clear();
                vkMesplElementList.Clear();
                vkMesplSbElementList.Clear();
                if (timeQuery)
                    MessageBox.Show("1");
                System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
                sw.Reset();
                sw.Start();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    bool prVKInVKmespl = true;
                    if (prVKInVKmespl)
                    {
                        ClassVKMespl el = new ClassVKMespl();
                        el.id = Convert.ToInt32(sqliteReader["id"]);
                        el.idFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                        el.codeElementVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                        el.pictureElementVKMespl = Convert.ToString(sqliteReader["picture"]);
                        el.indexElementVKMespl = Convert.ToString(sqliteReader["indexElement"]);
                        el.nameElementVKMespl = Convert.ToString(sqliteReader["nameElement"]);
                        el.codeVidIspVKMespl = Convert.ToString(sqliteReader["codeVida"]);
                        el.nameVidIspVKMespl = Convert.ToString(sqliteReader["nameVida"]);
                        if (Convert.ToString(sqliteReader["codeVida"]) == "098" || Convert.ToString(sqliteReader["codeVida"]) == "099" || Convert.ToString(sqliteReader["codeVida"]) == "205" || Convert.ToString(sqliteReader["codeVida"]) == "206" || Convert.ToString(sqliteReader["codeVida"]) == "207" || Convert.ToString(sqliteReader["codeVida"]) == "239")
                            vkMesplSbList.Add(el);
                        else
                            vkMesplList.Add(el);
                    }
                }
                sqliteReader.Close();
                sw.Stop();
                if (timeQuery)
                {
                    MessageBox.Show("Затраченное время с брейком на первый этап: " + sw.Elapsed);
                    MessageBox.Show("2");
                }
                sw.Reset();
                sw.Start();
                command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,VKMespl.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull,VKMespl.idElementVKMespl FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id ORDER BY Elements.codeElement ASC", sqliteConnection);
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassVKMesplElements el = new ClassVKMesplElements();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.countVKMespl = Convert.ToDouble(sqliteReader["countVKMespl"]);
                    el.codeEdIzmVKMespl = Convert.ToString(sqliteReader["codeEdIzm2"]);
                    el.nameEdIzmVKMespl = Convert.ToString(sqliteReader["nameFull"]);
                    int prIdElement = Convert.ToInt32(sqliteReader["idElementVKMespl"]);
                    string prIdVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                    int prIdFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                    foreach (ClassElements element in elementsList)
                        if (element.getId() == prIdElement)
                        {
                            el.el = element;
                            //MessageBox.Show(element.getCode());
                            break;
                        }
                    foreach (ClassVKMespl element in vkMesplList)
                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                        {
                            element.listElements.Add(el);
                            //Если такой элемент уже встречался
                            bool proverkaInVKMesplElement = true;
                            if (vkMesplElementList.Count > 0)
                                foreach (ClassVKMesplElements k in vkMesplElementList)
                                    if (k.el == el.el)
                                    {
                                        k.listElements.Add(element);
                                        k.listElementsCount.Add(el.countVKMespl);
                                        proverkaInVKMesplElement = false;
                                    }
                            if (proverkaInVKMesplElement)
                            {
                                el.listElements.Add(element);
                                el.listElementsCount.Add(el.countVKMespl);
                                vkMesplElementList.Add(el);
                            }
                        }
                    foreach (ClassVKMespl element in vkMesplSbList)
                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                        {
                            element.listElements.Add(el);
                            //Если такой элемент уже встречался
                            bool proverkaInVKMesplElement = true;
                            if (vkMesplSbElementList.Count > 0)
                                foreach (ClassVKMesplElements k in vkMesplSbElementList)
                                    if (k.el == el.el)
                                    {
                                        k.listElements.Add(element);
                                        k.listElementsCount.Add(el.countVKMespl);
                                        proverkaInVKMesplElement = false;
                                    }
                            if (proverkaInVKMesplElement)
                            {
                                el.listElements.Add(element);
                                el.listElementsCount.Add(el.countVKMespl);
                                vkMesplSbElementList.Add(el);
                            }
                        }
                }
                sw.Stop();
                if (timeQuery)
                    MessageBox.Show("3");
                if (timeQuery)
                    MessageBox.Show("Затраченное время с брейком на второй этап: " + sw.Elapsed);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
            if (timeQuery)
            {
                MessageBox.Show("Вк меспл " + vkMesplList.Count.ToString());
                MessageBox.Show("Вк меспл СБ " + vkMesplSbList.Count.ToString());
                MessageBox.Show("Вк меспл эл " + vkMesplElementList.Count.ToString());
                MessageBox.Show("Вк меспл СБ эл " + vkMesplSbElementList.Count.ToString());
            }
        }
        private void functionQueryVK(bool timeQuery)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,VKMespl.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull,VKMespl.idElementVKMespl FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id GROUP BY idFIMespl ORDER BY Elements.codeElement ASC", sqliteConnection);
            //SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida FROM [VKMespl] INNER JOIN Elements ON VKMespl.codeElementVKMespl=Elements.id INNER JOIN VidIsp ON VKMespl.vidIspVKMespl=VidIsp.id", sqliteConnection);
            //SQLiteCommand command2 = new SQLiteCommand("SELECT VKMesplElements.id,VKMesplElements.idVKMespl,VKMesplElements.idElementVKMespl,VKMesplElements.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull FROM [VKMesplElements] INNER JOIN EdIzm ON VKMesplElements.edIzmVKMespl=EdIzm.id", sqliteConnection);
            try
            {
                vkMesplList.Clear();
                vkMesplSbList.Clear();
                vkMesplElementList.Clear();
                vkMesplSbElementList.Clear();
                if (timeQuery)
                    MessageBox.Show("1");
                System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
                sw.Reset();
                sw.Start();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    bool prVKInVKmespl = true;
                    if (prVKInVKmespl)
                    {
                        ClassVKMespl el = new ClassVKMespl();
                        el.id = Convert.ToInt32(sqliteReader["id"]);
                        el.idFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                        el.codeElementVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                        el.pictureElementVKMespl = Convert.ToString(sqliteReader["picture"]);
                        el.indexElementVKMespl = Convert.ToString(sqliteReader["indexElement"]);
                        el.nameElementVKMespl = Convert.ToString(sqliteReader["nameElement"]);
                        el.codeVidIspVKMespl = Convert.ToString(sqliteReader["codeVida"]);
                        el.nameVidIspVKMespl = Convert.ToString(sqliteReader["nameVida"]);
                        if (Convert.ToString(sqliteReader["codeVida"]) == "098" || Convert.ToString(sqliteReader["codeVida"]) == "099" || Convert.ToString(sqliteReader["codeVida"]) == "205" || Convert.ToString(sqliteReader["codeVida"]) == "206" || Convert.ToString(sqliteReader["codeVida"]) == "207" || Convert.ToString(sqliteReader["codeVida"]) == "239")
                            vkMesplSbList.Add(el);
                        else
                            vkMesplList.Add(el);
                    }
                }
                sqliteReader.Close();
                sw.Stop();
                if (timeQuery)
                {
                    MessageBox.Show("Затраченное время с брейком на первый этап: " + sw.Elapsed);
                    MessageBox.Show("2");
                }
                sw.Reset();
                sw.Start();
                /*foreach (ClassVKMespl element in vkMesplList)
                {
                    command = new SQLiteCommand("SELECT VKMespl.id as idVK, VKMespl.idFIMespl, Elements.id, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, Elements.sp, VidIsp.codeVida, VidIsp.nameVida, VKMespl.countVKMespl, EdIzm.codeEdIzm2, EdIzm.nameFull, VKMespl.idElementVKMespl, Factorys.codeFactory, Factorys.nameFactory, Factorys.INN FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON VKMespl.idElementVKMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id LEFT JOIN Factorys ON Elements.idFactoryPostElements=Factorys.id WHERE VKMespl.idFIMespl=@idFIMespl ORDER BY Elements.codeElement ASC", sqliteConnection);
                    command.Parameters.AddWithValue("idFIMespl", element.idFIMespl);
                    sqliteReader = command.ExecuteReader();
                    while (sqliteReader.Read())
                    {
                        ClassVKMesplElements el = new ClassVKMesplElements();
                        el.id = Convert.ToInt32(sqliteReader["idVK"]);
                        el.countVKMespl = Convert.ToDouble(sqliteReader["countVKMespl"]);
                        el.codeEdIzmVKMespl = Convert.ToString(sqliteReader["codeEdIzm2"]);
                        el.nameEdIzmVKMespl = Convert.ToString(sqliteReader["nameFull"]);
                        element.listElements.Add(el);
                        el.el = new ClassElements();
                        el.el.setId(Convert.ToInt32(sqliteReader["id"]));
                        el.el.setCode(Convert.ToString(sqliteReader["codeElement"]));
                        el.el.setPicture(Convert.ToString(sqliteReader["picture"]));
                        el.el.setIndex(Convert.ToString(sqliteReader["indexElement"]));
                        el.el.setName(Convert.ToString(sqliteReader["nameElement"]));
                        el.el.setSp(Convert.ToInt32(sqliteReader["sp"]));
                        el.el.codeFactory = Convert.ToString(sqliteReader["codeFactory"]);
                        el.el.nameFactory = Convert.ToString(sqliteReader["nameFactory"]);
                        el.el.innFactory = Convert.ToString(sqliteReader["INN"]);
                        //Если такой элемент уже встречался
                        bool proverkaInVKMesplElement = true;
                        if (vkMesplElementList.Count > 0)
                            foreach (ClassVKMesplElements k in vkMesplElementList)
                                if (k.el.getCode() == el.el.getCode())
                                {
                                    k.listElements.Add(element);
                                    k.listElementsCount.Add(el.countVKMespl);
                                    proverkaInVKMesplElement = false;
                                }
                        if (proverkaInVKMesplElement)
                        {
                            el.listElements.Add(element);
                            el.listElementsCount.Add(el.countVKMespl);
                            vkMesplElementList.Add(el);
                        }
                    }
                }
                foreach (ClassVKMespl element in vkMesplSbList)
                {
                    command = new SQLiteCommand("SELECT VKMespl.idFIMespl, Elements.id, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, Elements.sp, VidIsp.codeVida, VidIsp.nameVida, VKMespl.countVKMespl, EdIzm.codeEdIzm2, EdIzm.nameFull, VKMespl.idElementVKMespl, Factorys.codeFactory, Factorys.nameFactory, Factorys.INN FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON VKMespl.idElementVKMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id LEFT JOIN Factorys ON Elements.idFactoryPostElements=Factorys.id WHERE VKMespl.idFIMespl=@idFIMespl ORDER BY Elements.codeElement ASC", sqliteConnection);
                    command.Parameters.AddWithValue("idFIMespl", element.idFIMespl);
                    sqliteReader = command.ExecuteReader();
                    while (sqliteReader.Read())
                    {
                        ClassVKMesplElements el = new ClassVKMesplElements();
                        //el.id = Convert.ToInt32(sqliteReader["id"]);
                        el.countVKMespl = Convert.ToDouble(sqliteReader["countVKMespl"]);
                        el.codeEdIzmVKMespl = Convert.ToString(sqliteReader["codeEdIzm2"]);
                        el.nameEdIzmVKMespl = Convert.ToString(sqliteReader["nameFull"]);
                        el.el = new ClassElements();
                        el.el.setId(Convert.ToInt32(sqliteReader["id"]));
                        el.el.setCode(Convert.ToString(sqliteReader["codeElement"]));
                        el.el.setPicture(Convert.ToString(sqliteReader["picture"]));
                        el.el.setIndex(Convert.ToString(sqliteReader["indexElement"]));
                        el.el.setName(Convert.ToString(sqliteReader["nameElement"]));
                        el.el.setSp(Convert.ToInt32(sqliteReader["sp"]));
                        el.el.codeFactory = Convert.ToString(sqliteReader["codeFactory"]);
                        el.el.nameFactory = Convert.ToString(sqliteReader["nameFactory"]);
                        el.el.innFactory = Convert.ToString(sqliteReader["INN"]);
                        element.listElements.Add(el);
                        //Если такой элемент уже встречался
                        bool proverkaInVKMesplElement = true;
                        if (vkMesplSbElementList.Count > 0)
                            foreach (ClassVKMesplElements k in vkMesplSbElementList)
                                if (k.el.getCode() == el.el.getCode())
                                {
                                    k.listElements.Add(element);
                                    k.listElementsCount.Add(el.countVKMespl);
                                    proverkaInVKMesplElement = false;
                                }
                        if (proverkaInVKMesplElement)
                        {
                            el.listElements.Add(element);
                            el.listElementsCount.Add(el.countVKMespl);
                            vkMesplSbElementList.Add(el);
                        }
                    }
                }*/
                command = new SQLiteCommand("SELECT VKMespl.idFIMespl,Elements.id,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,VKMespl.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull,VKMespl.idElementVKMespl FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id ORDER BY Elements.codeElement ASC", sqliteConnection);
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassVKMesplElements el = new ClassVKMesplElements();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.countVKMespl = Convert.ToDouble(sqliteReader["countVKMespl"]);
                    el.codeEdIzmVKMespl = Convert.ToString(sqliteReader["codeEdIzm2"]);
                    el.nameEdIzmVKMespl = Convert.ToString(sqliteReader["nameFull"]);
                    int prIdElement = Convert.ToInt32(sqliteReader["idElementVKMespl"]);
                    string prIdVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                    int prIdFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                    foreach (ClassElements element in elementsList)
                        if (element.getId() == prIdElement)
                        {
                            el.el = element;
                            //MessageBox.Show(element.getCode());
                            break;
                        }
                    foreach (ClassVKMespl element in vkMesplList)
                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                        {
                            element.listElements.Add(el);
                            //Если такой элемент уже встречался
                            bool proverkaInVKMesplElement = true;
                            if (vkMesplElementList.Count > 0)
                                foreach (ClassVKMesplElements k in vkMesplElementList)
                                    if (k.el == el.el)
                                    {
                                        k.listElements.Add(element);
                                        k.listElementsCount.Add(el.countVKMespl);
                                        proverkaInVKMesplElement = false;
                                    }
                            if (proverkaInVKMesplElement)
                            {
                                el.listElements.Add(element);
                                el.listElementsCount.Add(el.countVKMespl);
                                vkMesplElementList.Add(el);
                            }
                        }
                    foreach (ClassVKMespl element in vkMesplSbList)
                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                        {
                            element.listElements.Add(el);
                            //Если такой элемент уже встречался
                            bool proverkaInVKMesplElement = true;
                            if (vkMesplSbElementList.Count > 0)
                                foreach (ClassVKMesplElements k in vkMesplSbElementList)
                                    if (k.el == el.el)
                                    {
                                        k.listElements.Add(element);
                                        k.listElementsCount.Add(el.countVKMespl);
                                        proverkaInVKMesplElement = false;
                                    }
                            if (proverkaInVKMesplElement)
                            {
                                el.listElements.Add(element);
                                el.listElementsCount.Add(el.countVKMespl);
                                vkMesplSbElementList.Add(el);
                            }
                        }
                }
                sw.Stop();
                if (timeQuery)
                    MessageBox.Show("Затраченное время с брейком на второй этап: " + sw.Elapsed);
                if (timeQuery)
                {
                    MessageBox.Show("Сортировка");
                    sw.Reset();
                    sw.Start();
                    vkMesplList.OrderBy(a => a.codeElementVKMespl).ThenBy(b => b.codeVidIspVKMespl);
                    vkMesplSbList.OrderBy(a => a.codeElementVKMespl).ThenBy(b => b.codeVidIspVKMespl);
                    sw.Stop();
                    MessageBox.Show("Время сортировки: " + sw.Elapsed);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
            if (timeQuery)
            {
                MessageBox.Show("Вк меспл " + vkMesplList.Count.ToString());
                MessageBox.Show("Вк меспл СБ " + vkMesplSbList.Count.ToString());
                MessageBox.Show("Вк меспл эл " + vkMesplElementList.Count.ToString());
                MessageBox.Show("Вк меспл СБ эл " + vkMesplSbElementList.Count.ToString());
            }
        }
        private void functionQueryVKHash(bool timeQuery)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,VKMespl.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull,VKMespl.idElementVKMespl FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id GROUP BY idFIMespl ORDER BY Elements.codeElement ASC", sqliteConnection);
            //SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida FROM [VKMespl] INNER JOIN Elements ON VKMespl.codeElementVKMespl=Elements.id INNER JOIN VidIsp ON VKMespl.vidIspVKMespl=VidIsp.id", sqliteConnection);
            //SQLiteCommand command2 = new SQLiteCommand("SELECT VKMesplElements.id,VKMesplElements.idVKMespl,VKMesplElements.idElementVKMespl,VKMesplElements.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull FROM [VKMesplElements] INNER JOIN EdIzm ON VKMesplElements.edIzmVKMespl=EdIzm.id", sqliteConnection);
            try
            {
                vkMesplList3.Clear();
                vkMesplSbList3.Clear();
                vkMesplElementList3.Clear();
                vkMesplSbElementList3.Clear();
                if (timeQuery)
                    MessageBox.Show("1 HASH");
                System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
                System.Diagnostics.Stopwatch sw2 = new System.Diagnostics.Stopwatch();
                System.Diagnostics.Stopwatch sw3 = new System.Diagnostics.Stopwatch();
                System.Diagnostics.Stopwatch sw4 = new System.Diagnostics.Stopwatch();
                System.Diagnostics.Stopwatch sw5 = new System.Diagnostics.Stopwatch();
                sw.Reset();
                sw.Start();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    bool prVKInVKmespl = true;
                    if (prVKInVKmespl)
                    {
                        ClassVKMespl el = new ClassVKMespl();
                        el.id = Convert.ToInt32(sqliteReader["id"]);
                        el.idFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                        el.codeElementVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                        el.pictureElementVKMespl = Convert.ToString(sqliteReader["picture"]);
                        el.indexElementVKMespl = Convert.ToString(sqliteReader["indexElement"]);
                        el.nameElementVKMespl = Convert.ToString(sqliteReader["nameElement"]);
                        el.codeVidIspVKMespl = Convert.ToString(sqliteReader["codeVida"]);
                        el.nameVidIspVKMespl = Convert.ToString(sqliteReader["nameVida"]);
                        if (Convert.ToString(sqliteReader["codeVida"]) == "098" || Convert.ToString(sqliteReader["codeVida"]) == "099" || Convert.ToString(sqliteReader["codeVida"]) == "205" || Convert.ToString(sqliteReader["codeVida"]) == "206" || Convert.ToString(sqliteReader["codeVida"]) == "207" || Convert.ToString(sqliteReader["codeVida"]) == "239")
                            vkMesplSbList3.Add(el);
                        else
                            vkMesplList3.Add(el);
                    }
                }
                sqliteReader.Close();
                sw.Stop();
                if (timeQuery)
                {
                    MessageBox.Show("Затраченное время с брейком на первый этап: " + sw.Elapsed);
                    MessageBox.Show("2");
                }
                sw.Reset();
                sw.Start();
                sw2.Reset();
                sw4.Reset();
                sw5.Reset();
                foreach (ClassVKMespl element in vkMesplList3)
                {
                    sw5.Start();
                    sw4.Start();
                    command = new SQLiteCommand("SELECT VKMespl.id as idVK, VKMespl.idFIMespl, Elements.id, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, Elements.sp, VidIsp.codeVida, VidIsp.nameVida, VKMespl.countVKMespl, EdIzm.codeEdIzm2, EdIzm.nameFull, VKMespl.idElementVKMespl, Factorys.codeFactory, Factorys.nameFactory, Factorys.INN FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON VKMespl.idElementVKMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id LEFT JOIN Factorys ON Elements.idFactoryPostElements=Factorys.id WHERE VKMespl.idFIMespl=@idFIMespl ORDER BY Elements.codeElement ASC", sqliteConnection);
                    command.Parameters.AddWithValue("idFIMespl", element.idFIMespl);
                    sqliteReader = command.ExecuteReader();
                    sw4.Stop();
                    while (sqliteReader.Read())
                    {
                        ClassVKMesplElements el = new ClassVKMesplElements();
                        el.id = Convert.ToInt32(sqliteReader["idVK"]);
                        el.countVKMespl = Convert.ToDouble(sqliteReader["countVKMespl"]);
                        el.codeEdIzmVKMespl = Convert.ToString(sqliteReader["codeEdIzm2"]);
                        el.nameEdIzmVKMespl = Convert.ToString(sqliteReader["nameFull"]);
                        element.listElements.Add(el);
                        el.el = new ClassElements();
                        el.el.setId(Convert.ToInt32(sqliteReader["id"]));
                        el.el.setCode(Convert.ToString(sqliteReader["codeElement"]));
                        el.el.setPicture(Convert.ToString(sqliteReader["picture"]));
                        el.el.setIndex(Convert.ToString(sqliteReader["indexElement"]));
                        el.el.setName(Convert.ToString(sqliteReader["nameElement"]));
                        el.el.setSp(Convert.ToInt32(sqliteReader["sp"]));
                        el.el.codeFactory = Convert.ToString(sqliteReader["codeFactory"]);
                        el.el.nameFactory = Convert.ToString(sqliteReader["nameFactory"]);
                        el.el.innFactory = Convert.ToString(sqliteReader["INN"]);
                        //Если такой элемент уже встречался
                        sw2.Start();
                        bool proverkaInVKMesplElement = true;
                        if (vkMesplElementList3.Count > 0)
                            foreach (ClassVKMesplElements k in vkMesplElementList3)
                                if (k.el.getCode() == el.el.getCode())
                                {
                                    k.listElements.Add(element);
                                    k.listElementsCount.Add(el.countVKMespl);
                                    proverkaInVKMesplElement = false;
                                }
                        if (proverkaInVKMesplElement)
                        {
                            el.listElements.Add(element);
                            el.listElementsCount.Add(el.countVKMespl);
                            vkMesplElementList3.Add(el);
                        }
                        sw2.Stop();
                    }
                    sw5.Stop();
                }
                sw3.Reset();
                foreach (ClassVKMespl element in vkMesplSbList3)
                {
                    command = new SQLiteCommand("SELECT VKMespl.idFIMespl, Elements.id, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, Elements.sp, VidIsp.codeVida, VidIsp.nameVida, VKMespl.countVKMespl, EdIzm.codeEdIzm2, EdIzm.nameFull, VKMespl.idElementVKMespl, Factorys.codeFactory, Factorys.nameFactory, Factorys.INN FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON VKMespl.idElementVKMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id LEFT JOIN Factorys ON Elements.idFactoryPostElements=Factorys.id WHERE VKMespl.idFIMespl=@idFIMespl ORDER BY Elements.codeElement ASC", sqliteConnection);
                    command.Parameters.AddWithValue("idFIMespl", element.idFIMespl);
                    sqliteReader = command.ExecuteReader();
                    while (sqliteReader.Read())
                    {
                        ClassVKMesplElements el = new ClassVKMesplElements();
                        //el.id = Convert.ToInt32(sqliteReader["id"]);
                        el.countVKMespl = Convert.ToDouble(sqliteReader["countVKMespl"]);
                        el.codeEdIzmVKMespl = Convert.ToString(sqliteReader["codeEdIzm2"]);
                        el.nameEdIzmVKMespl = Convert.ToString(sqliteReader["nameFull"]);
                        el.el = new ClassElements();
                        el.el.setId(Convert.ToInt32(sqliteReader["id"]));
                        el.el.setCode(Convert.ToString(sqliteReader["codeElement"]));
                        el.el.setPicture(Convert.ToString(sqliteReader["picture"]));
                        el.el.setIndex(Convert.ToString(sqliteReader["indexElement"]));
                        el.el.setName(Convert.ToString(sqliteReader["nameElement"]));
                        el.el.setSp(Convert.ToInt32(sqliteReader["sp"]));
                        el.el.codeFactory = Convert.ToString(sqliteReader["codeFactory"]);
                        el.el.nameFactory = Convert.ToString(sqliteReader["nameFactory"]);
                        el.el.innFactory = Convert.ToString(sqliteReader["INN"]);
                        element.listElements.Add(el);
                        //Если такой элемент уже встречался
                        sw3.Start();
                        bool proverkaInVKMesplElement = true;
                        if (vkMesplSbElementList3.Count > 0)
                            foreach (ClassVKMesplElements k in vkMesplSbElementList3)
                                if (k.el.getCode() == el.el.getCode())
                                {
                                    k.listElements.Add(element);
                                    k.listElementsCount.Add(el.countVKMespl);
                                    proverkaInVKMesplElement = false;
                                }
                        if (proverkaInVKMesplElement)
                        {
                            el.listElements.Add(element);
                            el.listElementsCount.Add(el.countVKMespl);
                            vkMesplSbElementList3.Add(el);
                        }
                        sw3.Stop();
                    }
                }
                sw.Stop();
                if (timeQuery)
                {
                    MessageBox.Show("Затраченное время с хэшом на второй этап: " + sw.Elapsed);
                    MessageBox.Show("sw2 " + sw2.Elapsed);
                    MessageBox.Show("sw3 " + sw3.Elapsed);
                    MessageBox.Show("sw4 " + sw4.Elapsed);
                    MessageBox.Show("sw5 " + sw5.Elapsed);
                }
                if (timeQuery)
                {
                    MessageBox.Show("Сортировка");
                    sw.Reset();
                    sw.Start();
                    //var srt = vkMesplList3.OrderBy(a => a.codeElementVKMespl).ThenBy(b => b.codeVidIspVKMespl);
                    vkMesplList3.OrderBy(a => a.codeElementVKMespl).ThenBy(b => b.codeVidIspVKMespl);
                    vkMesplSbList3.OrderBy(a => a.codeElementVKMespl).ThenBy(b => b.codeVidIspVKMespl);
                    sw.Stop();
                    MessageBox.Show("Время сортировки: " + sw.Elapsed);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
            if (timeQuery)
            {
                MessageBox.Show("Вк меспл " + vkMesplList3.Count.ToString());
                MessageBox.Show("Вк меспл СБ " + vkMesplSbList3.Count.ToString());
                MessageBox.Show("Вк меспл эл " + vkMesplElementList3.Count.ToString());
                MessageBox.Show("Вк меспл СБ эл " + vkMesplSbElementList3.Count.ToString());
            }
        }
        private void functionQueryVKHash2(bool timeQuery)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,VKMespl.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull,VKMespl.idElementVKMespl FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id GROUP BY idFIMespl ORDER BY Elements.codeElement ASC", sqliteConnection);
            //SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida FROM [VKMespl] INNER JOIN Elements ON VKMespl.codeElementVKMespl=Elements.id INNER JOIN VidIsp ON VKMespl.vidIspVKMespl=VidIsp.id", sqliteConnection);
            //SQLiteCommand command2 = new SQLiteCommand("SELECT VKMesplElements.id,VKMesplElements.idVKMespl,VKMesplElements.idElementVKMespl,VKMesplElements.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull FROM [VKMesplElements] INNER JOIN EdIzm ON VKMesplElements.edIzmVKMespl=EdIzm.id", sqliteConnection);
            try
            {
                vkMesplList4.Clear();
                vkMesplSbList4.Clear();
                vkMesplElementList4.Clear();
                vkMesplSbElementList4.Clear();
                if (timeQuery)
                    MessageBox.Show("1 HASH 2");
                System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
                System.Diagnostics.Stopwatch sw2 = new System.Diagnostics.Stopwatch();
                System.Diagnostics.Stopwatch sw3 = new System.Diagnostics.Stopwatch();
                sw.Reset();
                sw.Start();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    bool prVKInVKmespl = true;
                    if (prVKInVKmespl)
                    {
                        ClassVKMespl el = new ClassVKMespl();
                        el.id = Convert.ToInt32(sqliteReader["id"]);
                        el.idFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                        el.codeElementVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                        el.pictureElementVKMespl = Convert.ToString(sqliteReader["picture"]);
                        el.indexElementVKMespl = Convert.ToString(sqliteReader["indexElement"]);
                        el.nameElementVKMespl = Convert.ToString(sqliteReader["nameElement"]);
                        el.codeVidIspVKMespl = Convert.ToString(sqliteReader["codeVida"]);
                        el.nameVidIspVKMespl = Convert.ToString(sqliteReader["nameVida"]);
                        if (Convert.ToString(sqliteReader["codeVida"]) == "098" || Convert.ToString(sqliteReader["codeVida"]) == "099" || Convert.ToString(sqliteReader["codeVida"]) == "205" || Convert.ToString(sqliteReader["codeVida"]) == "206" || Convert.ToString(sqliteReader["codeVida"]) == "207" || Convert.ToString(sqliteReader["codeVida"]) == "239")
                            vkMesplSbList4.Add(el);
                        else
                            vkMesplList4.Add(el);
                    }
                }
                sqliteReader.Close();
                sw.Stop();
                if (timeQuery)
                {
                    MessageBox.Show("Затраченное время с брейком на первый этап: " + sw.Elapsed);
                    MessageBox.Show("2");
                }
                int countReader = 0;
                sw.Reset();
                sw.Start();
                sw2.Reset();
                sw3.Reset();
                command = new SQLiteCommand("SELECT VKMespl.idFIMespl,Elements.id,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,VKMespl.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull,VKMespl.idElementVKMespl FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id ORDER BY Elements.codeElement ASC", sqliteConnection);
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    countReader++;
                    ClassVKMesplElements el = new ClassVKMesplElements();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.countVKMespl = Convert.ToDouble(sqliteReader["countVKMespl"]);
                    el.codeEdIzmVKMespl = Convert.ToString(sqliteReader["codeEdIzm2"]);
                    el.nameEdIzmVKMespl = Convert.ToString(sqliteReader["nameFull"]);
                    int prIdElement = Convert.ToInt32(sqliteReader["idElementVKMespl"]);
                    string prIdVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                    int prIdFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                    sw2.Start();
                    foreach (ClassElements element in elementsList)
                        if (element.getId() == prIdElement)
                        {
                            el.el = element;
                            //MessageBox.Show(element.getCode());
                            break;
                        }
                    sw2.Stop();
                    sw3.Start();
                    foreach (ClassVKMespl element in vkMesplList4)
                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                        {
                            element.listElements.Add(el);
                            //Если такой элемент уже встречался
                            bool proverkaInVKMesplElement = true;
                            if (vkMesplElementList4.Count > 0)
                                foreach (ClassVKMesplElements k in vkMesplElementList4)
                                    if (k.el == el.el)
                                    {
                                        k.listElements.Add(element);
                                        k.listElementsCount.Add(el.countVKMespl);
                                        proverkaInVKMesplElement = false;
                                    }
                            if (proverkaInVKMesplElement)
                            {
                                el.listElements.Add(element);
                                el.listElementsCount.Add(el.countVKMespl);
                                vkMesplElementList4.Add(el);
                            }
                        }
                    sw3.Stop();
                    foreach (ClassVKMespl element in vkMesplSbList4)
                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                        {
                            element.listElements.Add(el);
                            //Если такой элемент уже встречался
                            bool proverkaInVKMesplElement = true;
                            if (vkMesplSbElementList4.Count > 0)
                                foreach (ClassVKMesplElements k in vkMesplSbElementList4)
                                    if (k.el == el.el)
                                    {
                                        k.listElements.Add(element);
                                        k.listElementsCount.Add(el.countVKMespl);
                                        proverkaInVKMesplElement = false;
                                    }
                            if (proverkaInVKMesplElement)
                            {
                                el.listElements.Add(element);
                                el.listElementsCount.Add(el.countVKMespl);
                                vkMesplSbElementList4.Add(el);
                            }
                        }
                }
                sw.Stop();
                if (timeQuery)
                {
                    MessageBox.Show("Затраченное время с HASH 2 на второй этап: " + sw.Elapsed);
                    MessageBox.Show("Поиск элемента: " + sw2.Elapsed);
                    MessageBox.Show("Не сборка: " + sw3.Elapsed);
                    MessageBox.Show("Записей: " + countReader);
                }
                if (timeQuery)
                {
                    MessageBox.Show("Сортировка");
                    sw.Reset();
                    sw.Start();
                    vkMesplList.OrderBy(a => a.codeElementVKMespl).ThenBy(b => b.codeVidIspVKMespl);
                    vkMesplSbList.OrderBy(a => a.codeElementVKMespl).ThenBy(b => b.codeVidIspVKMespl);
                    sw.Stop();
                    MessageBox.Show("Время сортировки: " + sw.Elapsed);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
            if (timeQuery)
            {
                MessageBox.Show("Вк меспл " + vkMesplList.Count.ToString());
                MessageBox.Show("Вк меспл СБ " + vkMesplSbList.Count.ToString());
                MessageBox.Show("Вк меспл эл " + vkMesplElementList.Count.ToString());
                MessageBox.Show("Вк меспл СБ эл " + vkMesplSbElementList.Count.ToString());
            }
        }
        private void functionQueryVKThread(bool timeQuery)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,VKMespl.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull,VKMespl.idElementVKMespl FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id GROUP BY idFIMespl ORDER BY Elements.codeElement ASC", sqliteConnection);
            //SQLiteCommand command = new SQLiteCommand("SELECT VKMespl.id,VKMespl.idFIMespl,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida FROM [VKMespl] INNER JOIN Elements ON VKMespl.codeElementVKMespl=Elements.id INNER JOIN VidIsp ON VKMespl.vidIspVKMespl=VidIsp.id", sqliteConnection);
            //SQLiteCommand command2 = new SQLiteCommand("SELECT VKMesplElements.id,VKMesplElements.idVKMespl,VKMesplElements.idElementVKMespl,VKMesplElements.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull FROM [VKMesplElements] INNER JOIN EdIzm ON VKMesplElements.edIzmVKMespl=EdIzm.id", sqliteConnection);
            try
            {
                vkMesplList4.Clear();
                vkMesplSbList4.Clear();
                vkMesplElementList4.Clear();
                vkMesplSbElementList4.Clear();
                if (timeQuery)
                    MessageBox.Show("1 Thread");
                System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
                System.Diagnostics.Stopwatch sw2 = new System.Diagnostics.Stopwatch();
                System.Diagnostics.Stopwatch sw3 = new System.Diagnostics.Stopwatch();
                sw.Reset();
                sw.Start();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    bool prVKInVKmespl = true;
                    if (prVKInVKmespl)
                    {
                        ClassVKMespl el = new ClassVKMespl();
                        el.id = Convert.ToInt32(sqliteReader["id"]);
                        el.idFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                        el.codeElementVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                        el.pictureElementVKMespl = Convert.ToString(sqliteReader["picture"]);
                        el.indexElementVKMespl = Convert.ToString(sqliteReader["indexElement"]);
                        el.nameElementVKMespl = Convert.ToString(sqliteReader["nameElement"]);
                        el.codeVidIspVKMespl = Convert.ToString(sqliteReader["codeVida"]);
                        el.nameVidIspVKMespl = Convert.ToString(sqliteReader["nameVida"]);
                        if (Convert.ToString(sqliteReader["codeVida"]) == "098" || Convert.ToString(sqliteReader["codeVida"]) == "099" || Convert.ToString(sqliteReader["codeVida"]) == "205" || Convert.ToString(sqliteReader["codeVida"]) == "206" || Convert.ToString(sqliteReader["codeVida"]) == "207" || Convert.ToString(sqliteReader["codeVida"]) == "239")
                            vkMesplSbList4.Add(el);
                        else
                            vkMesplList4.Add(el);
                    }
                }
                sw.Stop();
                if (timeQuery)
                {
                    MessageBox.Show("Затраченное время с брейком на первый этап: " + sw.Elapsed);
                    MessageBox.Show("2");
                }
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
                //MessageBox.Show("Перед потокм");
                sw.Reset();
                sw.Start();
                sw2.Reset();
                sw3.Reset();
                new Thread(() =>
                {
                    if (timeQuery)
                        MessageBox.Show("Внутри потока, но до потока");
                    SQLiteConnection sqliteConnectionThread = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
                    sqliteConnectionThread.Open();
                    System.Diagnostics.Stopwatch sw4 = new System.Diagnostics.Stopwatch();
                    System.Diagnostics.Stopwatch sw5 = new System.Diagnostics.Stopwatch();
                    sw5.Reset();
                    sw4.Reset();
                    sw4.Start();
                    int countReader = 0;
                    try
                    {
                        command = new SQLiteCommand("SELECT VKMespl.idFIMespl,Elements.id,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,VidIsp.codeVida,VidIsp.nameVida,VKMespl.countVKMespl,EdIzm.codeEdIzm2,EdIzm.nameFull,VKMespl.idElementVKMespl FROM [VKMespl] INNER JOIN FIMespl ON VKMespl.idFIMespl=FIMespl.id INNER JOIN Elements ON FIMespl.codeElementFIMespl=Elements.id INNER JOIN VidIsp ON FIMespl.vidIspFIMespl=VidIsp.id INNER JOIN EdIzm ON VKMespl.edIzmVKMespl=EdIzm.id ORDER BY Elements.codeElement ASC", sqliteConnectionThread);
                        sqliteReader = command.ExecuteReader();
                        while (sqliteReader.Read())
                        {
                            sw5.Start();
                            countReader++;
                            ClassVKMesplElements el = new ClassVKMesplElements();
                            el.id = Convert.ToInt32(sqliteReader["id"]);
                            el.countVKMespl = Convert.ToDouble(sqliteReader["countVKMespl"]);
                            el.codeEdIzmVKMespl = Convert.ToString(sqliteReader["codeEdIzm2"]);
                            el.nameEdIzmVKMespl = Convert.ToString(sqliteReader["nameFull"]);
                            int prIdElement = Convert.ToInt32(sqliteReader["idElementVKMespl"]);
                            string prIdVKMespl = Convert.ToString(sqliteReader["codeElement"]);
                            int prIdFIMespl = Convert.ToInt32(sqliteReader["idFIMespl"]);
                            foreach (ClassElements element in elementsList)
                                if (element.getId() == prIdElement)
                                {
                                    el.el = element;
                                    //MessageBox.Show(element.getCode());
                                    break;
                                }
                            foreach (ClassVKMespl element in vkMesplList4)
                                if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                                {
                                    element.listElements.Add(el);
                                    //Если такой элемент уже встречался
                                    bool proverkaInVKMesplElement = true;
                                    if (vkMesplElementList4.Count > 0)
                                        foreach (ClassVKMesplElements k in vkMesplElementList4)
                                            if (k.el == el.el)
                                            {
                                                k.listElements.Add(element);
                                                k.listElementsCount.Add(el.countVKMespl);
                                                proverkaInVKMesplElement = false;
                                            }
                                    if (proverkaInVKMesplElement)
                                    {
                                        el.listElements.Add(element);
                                        el.listElementsCount.Add(el.countVKMespl);
                                        vkMesplElementList4.Add(el);
                                    }
                                }
                            foreach (ClassVKMespl element in vkMesplSbList4)
                                if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                                {
                                    element.listElements.Add(el);
                                    //Если такой элемент уже встречался
                                    bool proverkaInVKMesplElement = true;
                                    if (vkMesplSbElementList4.Count > 0)
                                        foreach (ClassVKMesplElements k in vkMesplSbElementList4)
                                            if (k.el == el.el)
                                            {
                                                k.listElements.Add(element);
                                                k.listElementsCount.Add(el.countVKMespl);
                                                proverkaInVKMesplElement = false;
                                            }
                                    if (proverkaInVKMesplElement)
                                    {
                                        el.listElements.Add(element);
                                        el.listElementsCount.Add(el.countVKMespl);
                                        vkMesplSbElementList4.Add(el);
                                    }
                                }
                            sw5.Stop();
                        }
                        sw4.Stop();
                        MessageBox.Show("Поток завершился: " + sw4.Elapsed + "\nПрочитано: " + countReader + "\nВнутренние затраты: " + sw5.Elapsed);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("ds" + ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    finally
                    {
                        if (sqliteReader != null)
                            sqliteReader.Close();
                        sqliteConnectionThread.Close();
                    }
                }).Start();
                sw.Stop();
                if (timeQuery)
                {
                    MessageBox.Show("Затраченное время с Thread 2 на второй этап: " + sw.Elapsed);
                }
                if (timeQuery)
                {
                    MessageBox.Show("Сортировка");
                    sw.Reset();
                    sw.Start();
                    vkMesplList.OrderBy(a => a.codeElementVKMespl).ThenBy(b => b.codeVidIspVKMespl);
                    vkMesplSbList.OrderBy(a => a.codeElementVKMespl).ThenBy(b => b.codeVidIspVKMespl);
                    sw.Stop();
                    MessageBox.Show("Время сортировки: " + sw.Elapsed);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                if(sqliteConnection != null)
                    sqliteConnection.Close();
            }
            if (timeQuery)
            {
                MessageBox.Show("Вк меспл " + vkMesplList.Count.ToString());
                MessageBox.Show("Вк меспл СБ " + vkMesplSbList.Count.ToString());
                MessageBox.Show("Вк меспл эл " + vkMesplElementList.Count.ToString());
                MessageBox.Show("Вк меспл СБ эл " + vkMesplSbElementList.Count.ToString());
            }
        }
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ МЕСЯЧНЫХ ОБЪЕМОВ ИСПЫТАНИЙ ИЗ БД------------------------------
        private void functionQueryVIspMespl(string yearQuery)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT VIspMespl.id,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,Factorys.codeFactory,Factorys.nameFactory,VidIsp.codeVida,VidIsp.nameVida,MatChast.codeMC3,MatChast.socrNameSistem,VIspMespl.vOneVIspMespl,VIspMespl.vTwoVIspMespl,VIspMespl.vThreVIspMespl,VIspMespl.vThourVIspMespl,VIspMespl.nPosPlVIspMespl,VIspMespl.nPosSvVIspMespl,VIspMespl.yearVIspMespl,VIspMespl.commentVIspMespl FROM [VIspMespl] INNER JOIN Elements ON VIspMespl.codeElementVIspMespl=Elements.id INNER JOIN Factorys ON VIspMespl.codeFactoryVIspMespl=Factorys.id INNER JOIN VidIsp ON VIspMespl.codeVidIspVIspmespl=VidIsp.id LEFT JOIN MatChast ON VIspMespl.codeMCVIspMespl=MatChast.id WHERE VIspMespl.yearVIspMespl=@yearVIspMespl ORDER BY Elements.codeElement ASC", sqliteConnection);
            command.Parameters.AddWithValue("yearVIspMespl", yearQuery);
            try
            {
                vIspMesplList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassVIspMespl el = new ClassVIspMespl();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    //Элемент
                    el.codeElementVIspMespl = Convert.ToString(sqliteReader["codeElement"]);
                    el.pictureElementVIspMespl = Convert.ToString(sqliteReader["picture"]);
                    el.indexElementVIspMespl = Convert.ToString(sqliteReader["indexElement"]);
                    el.nameElementVIspMespl = Convert.ToString(sqliteReader["nameElement"]);
                    //Завод изготовитель
                    el.codeFactoryVIspMespl = Convert.ToString(sqliteReader["codeFactory"]);
                    el.nameFactoryVIspMespl = Convert.ToString(sqliteReader["nameFactory"]);
                    //Вид испытания
                    el.codeVidIspVIspMespl = Convert.ToString(sqliteReader["codeVida"]);
                    el.nameVidIspVIspMespl = Convert.ToString(sqliteReader["nameVida"]);
                    //Мат Часть
                    el.codeMCVIspMespl = Convert.ToString(sqliteReader["codeMC3"]);
                    el.nameMCVIspMespl = Convert.ToString(sqliteReader["socrNameSistem"]);
                    //Объем испытаний
                    el.vOneVIspMespl = Convert.ToString(sqliteReader["vOneVIspMespl"]);
                    el.vTwoVIspMespl = Convert.ToString(sqliteReader["vTwoVIspMespl"]);
                    el.vThreVIspMespl = Convert.ToString(sqliteReader["vThreVIspMespl"]);
                    el.vThourVIspMespl = Convert.ToString(sqliteReader["vThourVIspMespl"]);
                    int prVYear = 0;
                    if (el.vOneVIspMespl.Length > 0)
                        prVYear += Convert.ToInt32(el.vOneVIspMespl);
                    if (el.vTwoVIspMespl.Length > 0)
                        prVYear += Convert.ToInt32(el.vTwoVIspMespl);
                    if (el.vThreVIspMespl.Length > 0)
                        prVYear += Convert.ToInt32(el.vThreVIspMespl);
                    if (el.vThourVIspMespl.Length > 0)
                        prVYear += Convert.ToInt32(el.vThourVIspMespl);
                    if (prVYear > 0)
                        el.vYearVIspMespl = Convert.ToString(prVYear);
                    //Позиции
                    el.nPosPlVIspMespl = Convert.ToString(sqliteReader["nPosPlVIspMespl"]);
                    el.nPosSvVIspMespl = Convert.ToString(sqliteReader["nPosSvVIspMespl"]);
                    //Год испытаний
                    el.yearVIspMespl = Convert.ToInt32(sqliteReader["yearVIspMespl"]);
                    //Примечание
                    el.commentVIspMespl = Convert.ToString(sqliteReader["commentVIspMespl"]);
                    vIspMesplList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ МЕСЯЧНЫХ ПЛАНОВ ИСПЫТАНИЙ ИЗ БД------------------------------
        private void functionQueryPlIspMespl(string yearQuery)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT PlIspMespl.id,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,Factorys.codeFactory,Factorys.nameFactory,VidIsp.codeVida,VidIsp.nameVida,PlIspMespl.numberOfPartyPlIspmespl,PlIspMespl.countShotPlIspmespl,PlIspMespl.datePostPlIspmespl,PlIspMespl.nPosPlPlIspMespl,PlIspMespl.nPosSvPlIspMespl,PlIspMespl.monthPlIspMespl,PlIspMespl.yearPlIspMespl,PlIspMespl.commentPlIspMespl FROM [PlIspMespl] INNER JOIN Elements ON PlIspMespl.codeElementPlIspMespl=Elements.id INNER JOIN Factorys ON PlIspMespl.codeFactoryPlIspMespl=Factorys.id INNER JOIN VidIsp ON PlIspMespl.codeVidIspPlIspMespl=VidIsp.id WHERE PlIspMespl.yearPlIspMespl=@yearPlIspMespl ORDER BY Elements.codeElement ASC", sqliteConnection);
            command.Parameters.AddWithValue("yearPlIspMespl", yearQuery);
            try
            {
                plIspMesplList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassPlIspMespl el = new ClassPlIspMespl();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    //Элемент
                    el.codeElementPlIspMespl = Convert.ToString(sqliteReader["codeElement"]);
                    el.pictureElementPlIspMespl = Convert.ToString(sqliteReader["picture"]);
                    el.indexElementPlIspMespl = Convert.ToString(sqliteReader["indexElement"]);
                    el.nameElementPlIspMespl = Convert.ToString(sqliteReader["nameElement"]);
                    //Завод изготовитель
                    el.codeFactoryPlIspMespl = Convert.ToString(sqliteReader["codeFactory"]);
                    el.nameFactoryPlIspMespl = Convert.ToString(sqliteReader["nameFactory"]);
                    //Вид испытания
                    el.codeVidIspPlIspMespl = Convert.ToString(sqliteReader["codeVida"]);
                    el.nameVidIspPlIspMespl = Convert.ToString(sqliteReader["nameVida"]);
                    //Объем испытаний
                    el.numberOfPartyPlIspMespl = Convert.ToString(sqliteReader["numberOfPartyPlIspMespl"]);
                    el.countShotPlIspMespl = Convert.ToString(sqliteReader["countShotPlIspMespl"]);
                    el.datePostPlIspMespl = Convert.ToString(sqliteReader["datePostPlIspMespl"]);
                    //Позиции
                    el.nPosPlPlIspMespl = Convert.ToString(sqliteReader["nPosPlPlIspMespl"]);
                    el.nPosSvPlIspMespl = Convert.ToString(sqliteReader["nPosSvPlIspMespl"]);
                    //Год и месяц испытаний
                    el.monthPlIspMespl = Convert.ToString(sqliteReader["monthPlIspMespl"]);
                    el.yearPlIspMespl = Convert.ToInt32(sqliteReader["yearPlIspMespl"]);
                    //Примечание
                    el.commentPlIspMespl = Convert.ToString(sqliteReader["commentPlIspMespl"]);
                    plIspMesplList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }
        private void functionQueryPlIspMespl(string monthQuery, string yearQuery)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT PlIspMespl.id,Elements.codeElement,Elements.picture,Elements.indexElement,Elements.nameElement,Factorys.codeFactory,Factorys.nameFactory,VidIsp.codeVida,VidIsp.nameVida,PlIspMespl.numberOfPartyPlIspmespl,PlIspMespl.countShotPlIspmespl,PlIspMespl.datePostPlIspmespl,PlIspMespl.nPosPlPlIspMespl,PlIspMespl.nPosSvPlIspMespl,PlIspMespl.monthPlIspMespl,PlIspMespl.yearPlIspMespl,PlIspMespl.commentPlIspMespl FROM [PlIspMespl] INNER JOIN Elements ON PlIspMespl.codeElementPlIspMespl=Elements.id INNER JOIN Factorys ON PlIspMespl.codeFactoryPlIspMespl=Factorys.id INNER JOIN VidIsp ON PlIspMespl.codeVidIspPlIspMespl=VidIsp.id WHERE PlIspMespl.monthPlIspMespl=@monthPlIspMespl AND PlIspMespl.yearPlIspMespl=@yearPlIspMespl ORDER BY Elements.codeElement ASC", sqliteConnection);
            command.Parameters.AddWithValue("monthPlIspMespl", monthQuery);
            command.Parameters.AddWithValue("yearPlIspMespl", yearQuery);
            try
            {
                plIspMesplList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassPlIspMespl el = new ClassPlIspMespl();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    //Элемент
                    el.codeElementPlIspMespl = Convert.ToString(sqliteReader["codeElement"]);
                    el.pictureElementPlIspMespl = Convert.ToString(sqliteReader["picture"]);
                    el.indexElementPlIspMespl = Convert.ToString(sqliteReader["indexElement"]);
                    el.nameElementPlIspMespl = Convert.ToString(sqliteReader["nameElement"]);
                    //Завод изготовитель
                    el.codeFactoryPlIspMespl = Convert.ToString(sqliteReader["codeFactory"]);
                    el.nameFactoryPlIspMespl = Convert.ToString(sqliteReader["nameFactory"]);
                    //Вид испытания
                    el.codeVidIspPlIspMespl = Convert.ToString(sqliteReader["codeVida"]);
                    el.nameVidIspPlIspMespl = Convert.ToString(sqliteReader["nameVida"]);
                    //Объем испытаний
                    el.numberOfPartyPlIspMespl = Convert.ToString(sqliteReader["numberOfPartyPlIspMespl"]);
                    el.countShotPlIspMespl = Convert.ToString(sqliteReader["countShotPlIspMespl"]);
                    el.datePostPlIspMespl = Convert.ToString(sqliteReader["datePostPlIspMespl"]);
                    //Позиции
                    el.nPosPlPlIspMespl = Convert.ToString(sqliteReader["nPosPlPlIspMespl"]);
                    el.nPosSvPlIspMespl = Convert.ToString(sqliteReader["nPosSvPlIspMespl"]);
                    //Год и месяц испытаний
                    el.monthPlIspMespl = Convert.ToString(sqliteReader["monthPlIspMespl"]);
                    el.yearPlIspMespl = Convert.ToInt32(sqliteReader["yearPlIspMespl"]);
                    //Примечание
                    el.commentPlIspMespl = Convert.ToString(sqliteReader["commentPlIspMespl"]);
                    plIspMesplList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }

        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ ЦЕН ВИДОВ ИСПЫТАНИЙ ИЗ БД------------------------------
        private void functionQueryCenaVidIsp()
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT CenaVidIsp.id, CenaVidIsp.poligonCenaVidIsp, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, VidIsp.codeVida, VidIsp.nameVida, MatChast.codeMC3, MatChast.fullNameSistem, CenaVidIsp.cenaCenaVidIsp FROM CenaVidIsp INNER JOIN Elements ON Elements.id=CenaVidIsp.idElementCenaVidIsp INNER JOIN VidIsp ON VidIsp.id=CenaVidIsp.idVidIspCenaVidIsp LEFT JOIN MatChast ON MatChast.id=CenaVidIsp.mcCenaVidIsp ORDER BY Elements.codeElement ASC", sqliteConnection);
            try
            {
                cenaVidIspList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassCenaVidIsp el = new ClassCenaVidIsp();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    el.poligonCenaVidIsp = Convert.ToString(sqliteReader["poligonCenaVidIsp"]);
                    //Элемент
                    el.codeElementCenaVidIsp = Convert.ToString(sqliteReader["codeElement"]);
                    el.pictureElementCenaVidIsp = Convert.ToString(sqliteReader["picture"]);
                    el.indexElementCenaVidIsp = Convert.ToString(sqliteReader["indexElement"]);
                    el.nameElementCenaVidIsp = Convert.ToString(sqliteReader["nameElement"]);
                    //Цены
                    ClassCenaVidIspCombo combo = new ClassCenaVidIspCombo();
                    combo.codeVidIspCombo = Convert.ToString(sqliteReader["codeVida"]);
                    combo.nameVidIspCombo = Convert.ToString(sqliteReader["nameVida"]);
                    combo.codeMCCombo = Convert.ToString(sqliteReader["codeMC3"]);
                    combo.nameMCCombo = Convert.ToString(sqliteReader["fullNameSistem"]);
                    combo.cenaCombo = Convert.ToDouble(sqliteReader["cenaCenaVidIsp"]);
                    if (cenaVidIspList.Count > 0)
                    {
                        bool proverochka = true;
                        foreach(ClassCenaVidIsp cena in cenaVidIspList)
                            if(cena.codeElementCenaVidIsp == el.codeElementCenaVidIsp && cena.poligonCenaVidIsp == el.poligonCenaVidIsp)
                            {
                                proverochka = false;
                                cena.comboListCenaVidIsp.Add(combo);
                            }
                        if(proverochka)
                        {
                            el.comboListCenaVidIsp.Add(combo);
                            cenaVidIspList.Add(el);
                        }
                    }
                    else
                    {
                        el.comboListCenaVidIsp.Add(combo);
                        cenaVidIspList.Add(el);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }

        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ ЦЕН КОМПЛЕКТУЮЩИХ ЭЛЕМЕНТОВ ИЗ БД------------------------------
        private void functionQueryCenaKE()
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT CenaKE.id, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, EdIzm.codeEdIzm2, EdIzm.nameFull, CenaKE.cenaCenaKE, CenaKE.numberPozCenaKE, CenaKE.commentCenaKE FROM CenaKE INNER JOIN Elements ON CenaKE.idElementCenaKE=Elements.id INNER JOIN EdIzm ON CenaKE.idEdIzmCenzKE=EdIzm.id ORDER BY Elements.codeElement ASC", sqliteConnection);
            try
            {
                cenaKEList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassCenaKE el = new ClassCenaKE();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    //Элемент
                    el.codeElementKE = Convert.ToString(sqliteReader["codeElement"]);
                    el.pictureElementKE = Convert.ToString(sqliteReader["picture"]);
                    el.indexElementKE = Convert.ToString(sqliteReader["indexElement"]);
                    el.nameElementKE = Convert.ToString(sqliteReader["nameElement"]);
                    //Описание
                    el.codeEdIzmKE = Convert.ToString(sqliteReader["codeEdIzm2"]);
                    el.nameEdIzmKe = Convert.ToString(sqliteReader["nameFull"]);
                    el.cenaKE = Convert.ToString(sqliteReader["cenaCenaKE"]);
                    el.numberPozCenaKE = Convert.ToString(sqliteReader["numberPozCenaKE"]);
                    el.commentKE = Convert.ToString(sqliteReader["commentCenaKE"]);
                    cenaKEList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }

        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ НОРМЫ ВРЕМЕНИ НА ПРОВЕДЕНИЯ ИСПЫТАНИЙ ИЗ БД------------------------------
        private void functionQueryNormTimeIsp()
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT NormTimeIsp.id, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, "
                + "VidIsp.codeVida, VidIsp.nameVida, NormTimeIsp.firstCehNormTimeIsp, NormTimeIsp.secondCehNormTimeIsp, NormTimeIsp.thirdCehNormTimeIsp, NormTimeIsp.firstCehVPNormTimeIsp, "
                + "NormTimeIsp.secondCehVPNormTimeIsp, NormTimeIsp.thirdCehVPNormTimeIsp, NormTimeIsp.temperNormTimeIsp, NormTimeIsp.temperVPNormTimeIsp, NormTimeIsp.otkNormTimeIsp, "
                + "NormTimeIsp.otkVPNormTimeIsp, NormTimeIsp.twoNormTimeIsp, NormTimeIsp.twoVPNormTimeIsp, NormTimeIsp.fiveNormTimeIsp, NormTimeIsp.fiveVPNormTimeIsp, NormTimeIsp.nineNormTimeIsp, "
                + "NormTimeIsp.nineVPNormTimeIsp, NormTimeIsp.grLuchNormTimeIsp, NormTimeIsp.grLuchVPNormTimeIsp, NormTimeIsp.grCrecerNormTimeIsp, "
                + "NormTimeIsp.grCrecerVPNormTimeIsp, NormTimeIsp.grMeteoNormTimeIsp, NormTimeIsp.grMeteoVPNormTimeIsp, "
                + "NormTimeIsp.grKamaNormTimeIsp, NormTimeIsp.grKamaVPNormTimeIsp, NormTimeIsp.grSolenoidsNormTimeIsp, "
                + "NormTimeIsp.grSolenoidsVPNormTimeIsp, NormTimeIsp.grGDINormTimeIsp, NormTimeIsp.grGDIVPNormTimeIsp, "
                + "NormTimeIsp.grSVKNormTimeIsp, NormTimeIsp.grSVKVPNormTimeIsp, NormTimeIsp.grVeterNormTimeIsp, NormTimeIsp.grVeterVPNormTimeIsp,"
                + "NormTimeIsp.grZummerNormTimeIsp, NormTimeIsp.grZummerVPNormTimeIsp "
                + "FROM NormTimeIsp INNER JOIN Elements ON NormTimeIsp.idElementNormTimeIsp=Elements.id INNER JOIN VidIsp ON NormTimeIsp.idVidIspNormTimeIsp=VidIsp.id ORDER BY Elements.codeElement ASC", sqliteConnection);
            try
            {
                normTimeIspList.Clear();
                sqliteReader = command.ExecuteReader();
                string codeElementReaderPr = "";
                double summOnElementReaderPr = 0;
                double summOnElementVPReaderPr = 0;
                while (sqliteReader.Read())
                {
                    ClassNormTimeIsp el = new ClassNormTimeIsp();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    //Элемент
                    el.codeElementNormTimeIsp = Convert.ToString(sqliteReader["codeElement"]);
                    el.pictureElementNormTimeIsp = Convert.ToString(sqliteReader["picture"]);
                    el.indexElementNormTimeIsp = Convert.ToString(sqliteReader["indexElement"]);
                    el.nameElementNormTimeIsp = Convert.ToString(sqliteReader["nameElement"]);
                    //Вид испытания
                    el.codeVidIspNormTimeIsp = Convert.ToString(sqliteReader["codeVida"]);
                    el.nameVidIspNormTimeIsp = Convert.ToString(sqliteReader["nameVida"]);
                    //Нормочасы
                    if (!Convert.IsDBNull(sqliteReader["firstCehNormTimeIsp"]))
                        el.firstCehNormTimeIsp = Convert.ToString(sqliteReader["firstCehNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["secondCehNormTimeIsp"]))
                        el.secondCehNormTimeIsp = Convert.ToString(sqliteReader["secondCehNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["thirdCehNormTimeIsp"]))
                        el.thirdCehNormTimeIsp = Convert.ToString(sqliteReader["thirdCehNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["temperNormTimeIsp"]))
                        el.temperNormTimeIsp = Convert.ToString(sqliteReader["temperNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["otkNormTimeIsp"]))
                        el.otkNormTimeIsp = Convert.ToString(sqliteReader["otkNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["twoNormTimeIsp"]))
                        el.twoNormTimeIsp = Convert.ToString(sqliteReader["twoNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["fiveNormTimeIsp"]))
                        el.fiveNormTimeIsp = Convert.ToString(sqliteReader["fiveNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["nineNormTimeIsp"]))
                        el.nineNormTimeIsp = Convert.ToString(sqliteReader["nineNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grLuchNormTimeIsp"]))
                        el.grLuchNormTimeIsp = Convert.ToString(sqliteReader["grLuchNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grCrecerNormTimeIsp"]))
                        el.grCrecerNormTimeIsp = Convert.ToString(sqliteReader["grCrecerNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grMeteoNormTimeIsp"]))
                        el.grMeteoNormTimeIsp = Convert.ToString(sqliteReader["grMeteoNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grKamaNormTimeIsp"]))
                        el.grKamaNormTimeIsp = Convert.ToString(sqliteReader["grKamaNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grSolenoidsNormTimeIsp"]))
                        el.grSolenoidsNormTimeIsp = Convert.ToString(sqliteReader["grSolenoidsNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grGDINormTimeIsp"]))
                        el.grGDINormTimeIsp = Convert.ToString(sqliteReader["grGDINormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grSVKNormTimeIsp"]))
                        el.grSVKNormTimeIsp = Convert.ToString(sqliteReader["grSVKNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grVeterNormTimeIsp"]))
                        el.grVeterNormTimeIsp = Convert.ToString(sqliteReader["grVeterNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grZummerNormTimeIsp"]))
                        el.grZummerNormTimeIsp = Convert.ToString(sqliteReader["grZummerNormTimeIsp"]);
                    //Нормочасы <ВП>
                    if (!Convert.IsDBNull(sqliteReader["firstCehVPNormTimeIsp"]))
                        el.firstCehVPNormTimeIsp = Convert.ToString(sqliteReader["firstCehVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["secondCehVPNormTimeIsp"]))
                        el.secondCehVPNormTimeIsp = Convert.ToString(sqliteReader["secondCehVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["thirdCehVPNormTimeIsp"]))
                        el.thirdCehVPNormTimeIsp = Convert.ToString(sqliteReader["thirdCehVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["temperVPNormTimeIsp"]))
                        el.temperVPNormTimeIsp = Convert.ToString(sqliteReader["temperVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["otkVPNormTimeIsp"]))
                        el.otkVPNormTimeIsp = Convert.ToString(sqliteReader["otkVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["twoVPNormTimeIsp"]))
                        el.twoVPNormTimeIsp = Convert.ToString(sqliteReader["twoVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["fiveVPNormTimeIsp"]))
                        el.fiveVPNormTimeIsp = Convert.ToString(sqliteReader["fiveVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["nineVPNormTimeIsp"]))
                        el.nineVPNormTimeIsp = Convert.ToString(sqliteReader["nineVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grLuchVPNormTimeIsp"]))
                        el.grLuchVPNormTimeIsp = Convert.ToString(sqliteReader["grLuchVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grCrecerVPNormTimeIsp"]))
                        el.grCrecerVPNormTimeIsp = Convert.ToString(sqliteReader["grCrecerVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grMeteoVPNormTimeIsp"]))
                        el.grMeteoVPNormTimeIsp = Convert.ToString(sqliteReader["grMeteoVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grKamaVPNormTimeIsp"]))
                        el.grKamaVPNormTimeIsp = Convert.ToString(sqliteReader["grKamaVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grSolenoidsVPNormTimeIsp"]))
                        el.grSolenoidsVPNormTimeIsp = Convert.ToString(sqliteReader["grSolenoidsVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grGDIVPNormTimeIsp"]))
                        el.grGDIVPNormTimeIsp = Convert.ToString(sqliteReader["grGDIVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grSVKVPNormTimeIsp"]))
                        el.grSVKVPNormTimeIsp = Convert.ToString(sqliteReader["grSVKVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grVeterVPNormTimeIsp"]))
                        el.grVeterVPNormTimeIsp = Convert.ToString(sqliteReader["grVeterVPNormTimeIsp"]);
                    if (!Convert.IsDBNull(sqliteReader["grZummerVPNormTimeIsp"]))
                        el.grZummerVPNormTimeIsp = Convert.ToString(sqliteReader["grZummerVPNormTimeIsp"]);
                    //Итоги
                    el.summOnVidNormTimeIsp = Convert.ToString(Convert.ToDouble(el.firstCehNormTimeIsp)
                        + Convert.ToDouble(el.secondCehNormTimeIsp)
                        + Convert.ToDouble(el.thirdCehNormTimeIsp)
                        + Convert.ToDouble(el.temperNormTimeIsp)
                        + Convert.ToDouble(el.otkNormTimeIsp)
                        + Convert.ToDouble(el.twoNormTimeIsp)
                        + Convert.ToDouble(el.fiveNormTimeIsp)
                        + Convert.ToDouble(el.nineNormTimeIsp)
                        + Convert.ToDouble(el.grLuchNormTimeIsp)
                        + Convert.ToDouble(el.grCrecerNormTimeIsp)
                        + Convert.ToDouble(el.grMeteoNormTimeIsp)
                        + Convert.ToDouble(el.grKamaNormTimeIsp)
                        + Convert.ToDouble(el.grSolenoidsNormTimeIsp)
                        + Convert.ToDouble(el.grGDINormTimeIsp)
                        + Convert.ToDouble(el.grSVKNormTimeIsp)
                        + Convert.ToDouble(el.grVeterNormTimeIsp)
                        + Convert.ToDouble(el.grZummerNormTimeIsp));
                    el.summOnVidVPNormTimeIsp = Convert.ToString(Convert.ToDouble(el.firstCehVPNormTimeIsp)
                        + Convert.ToDouble(el.secondCehVPNormTimeIsp)
                        + Convert.ToDouble(el.thirdCehVPNormTimeIsp)
                        + Convert.ToDouble(el.temperVPNormTimeIsp)
                        + Convert.ToDouble(el.otkVPNormTimeIsp)
                        + Convert.ToDouble(el.twoVPNormTimeIsp)
                        + Convert.ToDouble(el.fiveVPNormTimeIsp)
                        + Convert.ToDouble(el.nineVPNormTimeIsp)
                        + Convert.ToDouble(el.grLuchVPNormTimeIsp)
                        + Convert.ToDouble(el.grCrecerVPNormTimeIsp)
                        + Convert.ToDouble(el.grMeteoVPNormTimeIsp)
                        + Convert.ToDouble(el.grKamaVPNormTimeIsp)
                        + Convert.ToDouble(el.grSolenoidsVPNormTimeIsp)
                        + Convert.ToDouble(el.grGDIVPNormTimeIsp)
                        + Convert.ToDouble(el.grSVKVPNormTimeIsp)
                        + Convert.ToDouble(el.grVeterVPNormTimeIsp)
                        + Convert.ToDouble(el.grZummerVPNormTimeIsp));
                    normTimeIspList.Add(el);
                }
                //Итоги по элементам
                int positionCountNormTimeIspList = 0;
                foreach (ClassNormTimeIsp nti in normTimeIspList)
                {
                    if (codeElementReaderPr.Length == 0)
                        codeElementReaderPr = nti.codeElementNormTimeIsp;
                    if (codeElementReaderPr != nti.codeElementNormTimeIsp)
                    {
                        codeElementReaderPr = nti.codeElementNormTimeIsp;
                        normTimeIspList[positionCountNormTimeIspList-1].summOnElementNormTimeIsp = Convert.ToString(summOnElementReaderPr);
                        normTimeIspList[positionCountNormTimeIspList-1].summOnElementVPNormTimeIsp = Convert.ToString(summOnElementVPReaderPr);
                        summOnElementReaderPr = Convert.ToDouble(nti.summOnVidNormTimeIsp);
                        summOnElementVPReaderPr = Convert.ToDouble(nti.summOnVidVPNormTimeIsp);
                    }
                    else
                    {
                        summOnElementReaderPr += Convert.ToDouble(nti.summOnVidNormTimeIsp);
                        summOnElementVPReaderPr += Convert.ToDouble(nti.summOnVidVPNormTimeIsp);
                    }
                    if (positionCountNormTimeIspList == normTimeIspList.Count - 1)
                    {
                        normTimeIspList[positionCountNormTimeIspList].summOnElementNormTimeIsp = Convert.ToString(summOnElementReaderPr);
                        normTimeIspList[positionCountNormTimeIspList].summOnElementVPNormTimeIsp = Convert.ToString(summOnElementVPReaderPr);
                    }
                    positionCountNormTimeIspList++;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }

        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ ГОДОВОГО ПЛАНА ИСПЫТАНИЙ ИЗ БД------------------------------
        private void functionQueryPlIspKontrol(string yearPlIspKontrol, string numberPlIspKontrol)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT PlIspKontrol.id, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, Factorys.codeFactory, Factorys.nameFactory, Poligons.numberPl, Poligons.namePoligon, PlIspKontrol.nPosSvPlIspKontrol, PlIspKontrol.nPosPlPlIspKontrol, VidIsp.codeVida, VidIsp.nameVida, PlIspKontrol.idSystemPlIspKontrol, PlIspKontrol.idStvolPlIspKontrol, PlIspKontrol.idStandPlIspKontrol, PlIspKontrol.vOnePlIspKontrol, PlIspKontrol.vTwoPlIspKontrol, PlIspKontrol.vThrePlIspKontrol, PlIspKontrol.vThourPlIspKontrol, PlIspKontrol.yearPlIspKontrol, PlIspKontrol.commentPlIspKontrol FROM PlIspKontrol INNER JOIN Elements ON PlIspKontrol.idElementPlIspKontrol=Elements.id INNER JOIN Factorys ON PlIspKontrol.idFactoryPlIspKontrol=Factorys.id INNER JOIN VidIsp ON PlIspKontrol.idVidIspPlIspKontrol=VidIsp.id INNER JOIN Poligons ON PlIspKontrol.idPoligonPlIspKontrol=Poligons.id WHERE PlIspKontrol.yearPlIspKontrol=@yearPlIspKontrol AND PlIspKontrol.numberPlIspKontrol=@numberPlIspKontrol ORDER BY Elements.codeElement ASC", sqliteConnection);
            command.Parameters.AddWithValue("yearPlIspKontrol", yearPlIspKontrol);
            command.Parameters.AddWithValue("numberPlIspKontrol", numberPlIspKontrol);
            try
            {
                plIspKontrolList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassPlIspKontrol el = new ClassPlIspKontrol();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    //Полигон
                    el.numberPoligonPlIspKontrol = Convert.ToString(sqliteReader["numberPl"]);
                    el.namePoligonPlIspKontrol = Convert.ToString(sqliteReader["namePoligon"]);
                    //Элемент
                    el.codeElementPlIspKontrol = Convert.ToString(sqliteReader["codeElement"]);
                    el.pictureElementPlIspKontrol = Convert.ToString(sqliteReader["picture"]);
                    el.indexElementPlIspKontrol = Convert.ToString(sqliteReader["indexElement"]);
                    el.nameElementPlIspKontrol = Convert.ToString(sqliteReader["nameElement"]);
                    //Завод изготовитель
                    el.codeFactoryPlIspKontrol = Convert.ToString(sqliteReader["codeFactory"]);
                    el.nameFactoryPlIspKontrol = Convert.ToString(sqliteReader["nameFactory"]);
                    //Вид испытания
                    el.codeVidIspPlIspKontrol = Convert.ToString(sqliteReader["codeVida"]);
                    el.nameVidIspPlIspKontrol = Convert.ToString(sqliteReader["nameVida"]);
                    //Система
                    if (Convert.ToString(sqliteReader["idSystemPlIspKontrol"]).Length > 0)
                        foreach(ClassMC mc in mcList)
                            if (mc.id == Convert.ToInt32(sqliteReader["idSystemPlIspKontrol"]))
                            {
                                el.codeSystemPlIspKontrol = mc.codeMC3;
                                el.nameSystemPlIspKontrol = mc.socrName;
                            }
                    //Ствол
                    if (Convert.ToString(sqliteReader["idStvolPlIspKontrol"]).Length > 0)
                        foreach (ClassMC mc in mcList)
                            if (mc.id == Convert.ToInt32(sqliteReader["idStvolPlIspKontrol"]))
                            {
                                el.codeStvolPlIspKontrol = mc.codeMC3;
                                el.nameStvolPlIspKontrol = mc.socrName;
                            }
                    //Стенд
                    if (Convert.ToString(sqliteReader["idStandPlIspKontrol"]).Length > 0)
                        foreach (ClassMC mc in mcList)
                            if (mc.id == Convert.ToInt32(sqliteReader["idStandPlIspKontrol"]))
                            {
                                el.codeStandPlIspKontrol = mc.codeMC3;
                                el.nameStandPlIspKontrol = mc.socrName;
                            }
                    //Трудоемкость
                    el.trudoemkostPlIspKontrol = "";
                    //Стоимость испытания
                    el.cenaPlIspKontrol = "";
                    //Объем испытаний
                    el.vOnePlIspKontrol = Convert.ToString(sqliteReader["vOnePlIspKontrol"]);
                    el.vTwoPlIspKontrol = Convert.ToString(sqliteReader["vTwoPlIspKontrol"]);
                    el.vThrePlIspKontrol = Convert.ToString(sqliteReader["vThrePlIspKontrol"]);
                    el.vThourPlIspKontrol = Convert.ToString(sqliteReader["vThourPlIspKontrol"]);
                    int prVYear = 0;
                    if (el.vOnePlIspKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vOnePlIspKontrol);
                    if (el.vTwoPlIspKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vTwoPlIspKontrol);
                    if (el.vThrePlIspKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vThrePlIspKontrol);
                    if (el.vThourPlIspKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vThourPlIspKontrol);
                    if (prVYear > 0)
                        el.vYearPlIspKontrol = Convert.ToString(prVYear);
                    //Позиции
                    el.nPosPlPlIspKontrol = Convert.ToString(sqliteReader["nPosPlPlIspKontrol"]);
                    el.nPosSvPlIspKontrol = Convert.ToString(sqliteReader["nPosSvPlIspKontrol"]);
                    //Год испытаний
                    el.yearPlIspKontrol = Convert.ToInt32(sqliteReader["yearPlIspKontrol"]);
                    //Примечание
                    el.commentPlIspKontrol = Convert.ToString(sqliteReader["commentPlIspKontrol"]);
                    plIspKontrolList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }

        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ ГОДОВОГО ПЛАНА ПРОИЗВОДСТВА ИЗ БД------------------------------
        private void functionQueryPlIndKontrol(string yearPlIndKontrol, string numberPlIndKontrol)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT PlIndKontrol.id, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, Factorys.codeFactory, Factorys.nameFactory, EdIzm.codeEdIzm2, EdIzm.nameFull, PlIndKontrol.vOnePlIndKontrol, PlIndKontrol.vTwoPlIndKontrol, PlIndKontrol.vThrePlIndKontrol, PlIndKontrol.vThourPlIndKontrol, PlIndKontrol.yearPlIndKontrol FROM PlIndKontrol INNER JOIN Elements ON PlIndKontrol.idElementPlIndKontrol=Elements.id INNER JOIN Factorys ON PlIndKontrol.idFactoryPlIndKontrol=Factorys.id INNER JOIN EdIzm ON PlIndKontrol.idEdIzmPlIndKontrol=EdIzm.id WHERE PlIndKontrol.yearPlIndKontrol=@yearPlIndKontrol AND PlIndKontrol.numberPlIndKontrol=@numberPlIndKontrol ORDER BY Elements.codeElement ASC", sqliteConnection);
            command.Parameters.AddWithValue("yearPlIndKontrol", yearPlIndKontrol);
            command.Parameters.AddWithValue("numberPlIndKontrol", numberPlIndKontrol);
            try
            {
                plIndKontrolList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassPlIndKontrol el = new ClassPlIndKontrol();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    //Элемент
                    el.codeElementPlIndKontrol = Convert.ToString(sqliteReader["codeElement"]);
                    el.pictureElementPlIndKontrol = Convert.ToString(sqliteReader["picture"]);
                    el.indexElementPlIndKontrol = Convert.ToString(sqliteReader["indexElement"]);
                    el.nameElementPlIndKontrol = Convert.ToString(sqliteReader["nameElement"]);
                    //Завод изготовитель
                    el.codeFactoryPlIndKontrol = Convert.ToString(sqliteReader["codeFactory"]);
                    el.nameFactoryPlIndKontrol = Convert.ToString(sqliteReader["nameFactory"]);
                    //Единица измерения
                    el.codeEdIzmPlIndKontrol = Convert.ToString(sqliteReader["codeEdIzm2"]);
                    el.nameEdIzmPlIndKontrol = Convert.ToString(sqliteReader["nameFull"]);
                    //Объем испытаний
                    el.vOnePlIndKontrol = Convert.ToString(sqliteReader["vOnePlIndKontrol"]);
                    el.vTwoPlIndKontrol = Convert.ToString(sqliteReader["vTwoPlIndKontrol"]);
                    el.vThrePlIndKontrol = Convert.ToString(sqliteReader["vThrePlIndKontrol"]);
                    el.vThourPlIndKontrol = Convert.ToString(sqliteReader["vThourPlIndKontrol"]);
                    int prVYear = 0;
                    if (el.vOnePlIndKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vOnePlIndKontrol);
                    if (el.vTwoPlIndKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vTwoPlIndKontrol);
                    if (el.vThrePlIndKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vThrePlIndKontrol);
                    if (el.vThourPlIndKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vThourPlIndKontrol);
                    if (prVYear > 0)
                        el.vYearPlIndKontrol = Convert.ToString(prVYear);
                    //Год испытаний
                    el.yearPlIndKontrol = Convert.ToInt32(sqliteReader["yearPlIndKontrol"]);
                    plIndKontrolList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }

        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ РезультНОГО ПЛАНА ИСПЫТАНИЙ ИЗ БД------------------------------
        private void functionQueryPlIspResult(string yearPlIspResult, string numberPlIspResult)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT PlIspResult.id, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, Factorys.codeFactory, Factorys.nameFactory, Poligons.numberPl, Poligons.namePoligon, PlIspResult.nPosSvPlIspResult, PlIspResult.nPosPlPlIspResult, VidIsp.codeVida, VidIsp.nameVida, PlIspResult.idSystemPlIspResult, PlIspResult.idStvolPlIspResult, PlIspResult.idStandPlIspResult, PlIspResult.vOnePlIspResult, PlIspResult.vTwoPlIspResult, PlIspResult.vThrePlIspResult, PlIspResult.vThourPlIspResult, PlIspResult.yearPlIspResult, PlIspResult.commentPlIspResult FROM PlIspResult INNER JOIN Elements ON PlIspResult.idElementPlIspResult=Elements.id INNER JOIN Factorys ON PlIspResult.idFactoryPlIspResult=Factorys.id INNER JOIN VidIsp ON PlIspResult.idVidIspPlIspResult=VidIsp.id INNER JOIN Poligons ON PlIspResult.idPoligonPlIspResult=Poligons.id WHERE PlIspResult.yearPlIspResult=@yearPlIspResult AND PlIspResult.numberPlIspResult=@numberPlIspResult ORDER BY Elements.codeElement ASC", sqliteConnection);
            command.Parameters.AddWithValue("yearPlIspResult", yearPlIspResult);
            command.Parameters.AddWithValue("numberPlIspResult", numberPlIspResult);
            try
            {
                plIspResultList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassPlIspKontrol el = new ClassPlIspKontrol();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    //Полигон
                    el.numberPoligonPlIspKontrol = Convert.ToString(sqliteReader["numberPl"]);
                    el.namePoligonPlIspKontrol = Convert.ToString(sqliteReader["namePoligon"]);
                    //Элемент
                    el.codeElementPlIspKontrol = Convert.ToString(sqliteReader["codeElement"]);
                    el.pictureElementPlIspKontrol = Convert.ToString(sqliteReader["picture"]);
                    el.indexElementPlIspKontrol = Convert.ToString(sqliteReader["indexElement"]);
                    el.nameElementPlIspKontrol = Convert.ToString(sqliteReader["nameElement"]);
                    //Завод изготовитель
                    el.codeFactoryPlIspKontrol = Convert.ToString(sqliteReader["codeFactory"]);
                    el.nameFactoryPlIspKontrol = Convert.ToString(sqliteReader["nameFactory"]);
                    //Вид испытания
                    el.codeVidIspPlIspKontrol = Convert.ToString(sqliteReader["codeVida"]);
                    el.nameVidIspPlIspKontrol = Convert.ToString(sqliteReader["nameVida"]);
                    //Система
                    if (Convert.ToString(sqliteReader["idSystemPlIspResult"]).Length > 0)
                        foreach (ClassMC mc in mcList)
                            if (mc.id == Convert.ToInt32(sqliteReader["idSystemPlIspResult"]))
                            {
                                el.codeSystemPlIspKontrol = mc.codeMC3;
                                el.nameSystemPlIspKontrol = mc.socrName;
                            }
                    //Ствол
                    if (Convert.ToString(sqliteReader["idStvolPlIspResult"]).Length > 0)
                        foreach (ClassMC mc in mcList)
                            if (mc.id == Convert.ToInt32(sqliteReader["idStvolPlIspResult"]))
                            {
                                el.codeStvolPlIspKontrol = mc.codeMC3;
                                el.nameStvolPlIspKontrol = mc.socrName;
                            }
                    //Стенд
                    if (Convert.ToString(sqliteReader["idStandPlIspResult"]).Length > 0)
                        foreach (ClassMC mc in mcList)
                            if (mc.id == Convert.ToInt32(sqliteReader["idStandPlIspResult"]))
                            {
                                el.codeStandPlIspKontrol = mc.codeMC3;
                                el.nameStandPlIspKontrol = mc.socrName;
                            }
                    //Трудоемкость
                    el.trudoemkostPlIspKontrol = "";
                    //Стоимость испытания
                    el.cenaPlIspKontrol = "";
                    //Объем испытаний
                    el.vOnePlIspKontrol = Convert.ToString(sqliteReader["vOnePlIspResult"]);
                    el.vTwoPlIspKontrol = Convert.ToString(sqliteReader["vTwoPlIspResult"]);
                    el.vThrePlIspKontrol = Convert.ToString(sqliteReader["vThrePlIspResult"]);
                    el.vThourPlIspKontrol = Convert.ToString(sqliteReader["vThourPlIspResult"]);
                    int prVYear = 0;
                    if (el.vOnePlIspKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vOnePlIspKontrol);
                    if (el.vTwoPlIspKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vTwoPlIspKontrol);
                    if (el.vThrePlIspKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vThrePlIspKontrol);
                    if (el.vThourPlIspKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vThourPlIspKontrol);
                    if (prVYear > 0)
                        el.vYearPlIspKontrol = Convert.ToString(prVYear);
                    //Позиции
                    el.nPosPlPlIspKontrol = Convert.ToString(sqliteReader["nPosPlPlIspResult"]);
                    el.nPosSvPlIspKontrol = Convert.ToString(sqliteReader["nPosSvPlIspResult"]);
                    //Год испытаний
                    el.yearPlIspKontrol = Convert.ToInt32(sqliteReader["yearPlIspResult"]);
                    //Примечание
                    el.commentPlIspKontrol = Convert.ToString(sqliteReader["commentPlIspResult"]);
                    plIspResultList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }

        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ РезультНОГО ПЛАНА ПРОИЗВОДСТВА ИЗ БД------------------------------
        private void functionQueryPlIndResult(string yearPlIndResult, string numberPlIndResult)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT PlIndResult.id, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, Factorys.codeFactory, Factorys.nameFactory, EdIzm.codeEdIzm2, EdIzm.nameFull, PlIndResult.vOnePlIndResult, PlIndResult.vTwoPlIndResult, PlIndResult.vThrePlIndResult, PlIndResult.vThourPlIndResult, PlIndResult.yearPlIndResult FROM PlIndResult INNER JOIN Elements ON PlIndResult.idElementPlIndResult=Elements.id INNER JOIN Factorys ON PlIndResult.idFactoryPlIndResult=Factorys.id INNER JOIN EdIzm ON PlIndResult.idEdIzmPlIndResult=EdIzm.id WHERE PlIndResult.yearPlIndResult=@yearPlIndResult AND PlIndResult.numberPlIndResult=@numberPlIndResult ORDER BY Elements.codeElement ASC", sqliteConnection);
            command.Parameters.AddWithValue("yearPlIndResult", yearPlIndResult);
            command.Parameters.AddWithValue("numberPlIndResult", numberPlIndResult);
            try
            {
                plIndResultList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassPlIndKontrol el = new ClassPlIndKontrol();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    //Элемент
                    el.codeElementPlIndKontrol = Convert.ToString(sqliteReader["codeElement"]);
                    el.pictureElementPlIndKontrol = Convert.ToString(sqliteReader["picture"]);
                    el.indexElementPlIndKontrol = Convert.ToString(sqliteReader["indexElement"]);
                    el.nameElementPlIndKontrol = Convert.ToString(sqliteReader["nameElement"]);
                    //Завод изготовитель
                    el.codeFactoryPlIndKontrol = Convert.ToString(sqliteReader["codeFactory"]);
                    el.nameFactoryPlIndKontrol = Convert.ToString(sqliteReader["nameFactory"]);
                    //Единица измерения
                    el.codeEdIzmPlIndKontrol = Convert.ToString(sqliteReader["codeEdIzm2"]);
                    el.nameEdIzmPlIndKontrol = Convert.ToString(sqliteReader["nameFull"]);
                    //Объем испытаний
                    el.vOnePlIndKontrol = Convert.ToString(sqliteReader["vOnePlIndResult"]);
                    el.vTwoPlIndKontrol = Convert.ToString(sqliteReader["vTwoPlIndResult"]);
                    el.vThrePlIndKontrol = Convert.ToString(sqliteReader["vThrePlIndResult"]);
                    el.vThourPlIndKontrol = Convert.ToString(sqliteReader["vThourPlIndResult"]);
                    int prVYear = 0;
                    if (el.vOnePlIndKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vOnePlIndKontrol);
                    if (el.vTwoPlIndKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vTwoPlIndKontrol);
                    if (el.vThrePlIndKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vThrePlIndKontrol);
                    if (el.vThourPlIndKontrol.Length > 0)
                        prVYear += Convert.ToInt32(el.vThourPlIndKontrol);
                    if (prVYear > 0)
                        el.vYearPlIndKontrol = Convert.ToString(prVYear);
                    //Год испытаний
                    el.yearPlIndKontrol = Convert.ToInt32(sqliteReader["yearPlIndResult"]);
                    plIndResultList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }

        //------------------------------ФУНКЦИЯ ИЗВЛЕЧЕНИЯ ПОТРЕБНОСТИ В КРЕШЕРНОМ ИМУЩЕСТВЕ ИЗ БД------------------------------
        private void functionQueryPotrVKIResult(string yearPotrVKIResult, string numberPotrVKIResult)
        {
            sqliteConnection = new SQLiteConnection(string.Format("Data Source={0};", connectionSQLiteString));
            sqliteConnection.Open();
            sqliteReader = null;
            SQLiteCommand command = new SQLiteCommand("SELECT PotrVKIResult.id, PotrVKIResult.numberPotrVKIResult, Factorys.codeFactory, Factorys.nameFactory, Elements.codeElement, Elements.picture, Elements.indexElement, Elements.nameElement, EdIzm.codeEdIzm2, EdIzm.nameFull, EdIzm.nameSocr, PotrVKIResult.vOnePotrVKIResult, PotrVKIResult.vTwoPotrVKIResult, PotrVKIResult.vThrePotrVKIResult, PotrVKIResult.vThourPotrVKIResult, PotrVKIResult.yearPotrVKIResult FROM PotrVKIResult INNER JOIN Elements ON PotrVKIResult.idElementPotrVKIResult=Elements.id INNER JOIN Factorys ON PotrVKIResult.idFactoryPotrVKIResult=Factorys.id INNER JOIN EdIzm ON PotrVKIResult.idEdIzmPotrVKIResult=EdIzm.id WHERE [yearPotrVKIResult]=@yearPotrVKIResult AND numberPotrVKIResult=@numberPotrVKIResult ORDER BY Elements.id ASC", sqliteConnection);
            command.Parameters.AddWithValue("yearPotrVKIResult", yearPotrVKIResult);
            command.Parameters.AddWithValue("numberPotrVKIResult", numberPotrVKIResult);
            try
            {
                potrVKIResultList.Clear();
                sqliteReader = command.ExecuteReader();
                while (sqliteReader.Read())
                {
                    ClassPotrVKIResult el = new ClassPotrVKIResult();
                    el.id = Convert.ToInt32(sqliteReader["id"]);
                    //Входной номер заявки
                    el.numberPotrVKIResult = Convert.ToString(sqliteReader["numberPotrVKIResult"]);
                    //Элемент
                    el.codeElementPotrVKIResult = Convert.ToString(sqliteReader["codeElement"]);
                    el.pictureElementPotrVKIResult = Convert.ToString(sqliteReader["picture"]);
                    el.indexElementPotrVKIResult = Convert.ToString(sqliteReader["indexElement"]);
                    el.nameElementPotrVKIResult = Convert.ToString(sqliteReader["nameElement"]);
                    //Заказчик
                    el.codeFactoryPotrVKIResult = Convert.ToString(sqliteReader["codeFactory"]);
                    el.nameFactoryPotrVKIResult = Convert.ToString(sqliteReader["nameFactory"]);
                    //Единица измерения
                    el.codeEdIzmPotrVKIResult = Convert.ToString(sqliteReader["codeEdIzm2"]);
                    el.nameEdIzmPotrVKIResult = Convert.ToString(sqliteReader["nameFull"]);
                    el.socrNameEdIzmPotrVKIResult = Convert.ToString(sqliteReader["nameSocr"]);
                    //Объем испытаний
                    el.vOnePotrVKIResult = Convert.ToString(sqliteReader["vOnePotrVKIResult"]);
                    el.vTwoPotrVKIResult = Convert.ToString(sqliteReader["vTwoPotrVKIResult"]);
                    el.vThrePotrVKIResult = Convert.ToString(sqliteReader["vThrePotrVKIResult"]);
                    el.vThourPotrVKIResult = Convert.ToString(sqliteReader["vThourPotrVKIResult"]);
                    double prVYear = 0;
                    if (el.vOnePotrVKIResult.Length > 0)
                        prVYear += Convert.ToDouble(el.vOnePotrVKIResult);
                    if (el.vTwoPotrVKIResult.Length > 0)
                        prVYear += Convert.ToDouble(el.vTwoPotrVKIResult);
                    if (el.vThrePotrVKIResult.Length > 0)
                        prVYear += Convert.ToDouble(el.vThrePotrVKIResult);
                    if (el.vThourPotrVKIResult.Length > 0)
                        prVYear += Convert.ToDouble(el.vThourPotrVKIResult);
                    if (prVYear > 0)
                        el.vYearPotrVKIResult = Convert.ToString(prVYear);
                    //Год испытаний
                    el.yearPotrVKIResult = Convert.ToInt32(sqliteReader["yearPotrVKIResult"]);
                    potrVKIResultList.Add(el);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqliteReader != null)
                    sqliteReader.Close();
                sqliteConnection.Close();
            }
        }

        //------------------------------ОТОБРАЖЕНИЕ СООБЩЕНИЙ------------------------------
        private void functionMessageShow(int type, string message) 
        {
            //Ошибка = 1; Информация = 2 
            if (type == 1)
            {
                MessageBox.Show(message, "Ошибка!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }else if(type == 2){
                MessageBox.Show(message, "Информация", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        //---------------------------------------------------------------------------------
        //------------------------------МЕСЯЧНЫЙ ПЛАН------------------------------
        //Функция отмены меню месячного плана
        private void functionCancelMespl()
        {
            panel9.Visible = true;
            panel10.Visible = false;
            panel12.Visible = false;
            panel13.Visible = false;
            panel14.Visible = false;
            panel15.Visible = false;
        }
        //------------------------------ФОРМАТКИ ИСПЫТАНИЙ------------------------------
        private void button76_Click(object sender, EventArgs e)
        {
            panel9.Visible = false;
            panel10.Visible = true;
            functionQueryFI();
            //functionQueryVK();
            positionFIMesplList = 0;
            functionShowFIMespl(positionFIMesplList);
        }

        //Кнопка назад из форматок испытаний
        private void button78_Click(object sender, EventArgs e)
        {
            functionCancelMespl();
        }

        //Функция излечения МатЧасти по id
        private ClassMC functionReturnMC(int id)
        {
            ClassMC returnEl = new ClassMC();
            foreach (ClassMC el in mcList)
                if (el.id == id)
                {
                    returnEl = el;
                    break;
                }
            return returnEl;
        }

        //Функция излечения Преграды по id
        private ClassPregrads functionReturnPregrads(int id)
        {
            ClassPregrads returnEl = new ClassPregrads();
            foreach (ClassPregrads el in pregradsList)
                if (el.getId() == id)
                {
                    returnEl = el;
                    break;
                }
            return returnEl;
        }

        //Функция отображение форматки испытания месячного плана
        private void functionShowFIMespl(int pos)
        {
            if (!spFIMesplEdit)
            {
                if (pos >= 0 && fiList.Count > 0)
                {
                    textBox42.Text = Convert.ToString(fiList[pos].codeElementFIMespl);
                    textBox44.Text = Convert.ToString(fiList[pos].pictureElementFIMespl);
                    textBox43.Text = Convert.ToString(fiList[pos].codeVidIspFIMespl);
                    label80.Text = Convert.ToString(fiList[pos].nameVidIspFIMespl);
                    textBox45.Text = Convert.ToString(fiList[pos].indexElementFIMespl);
                    textBox46.Text = Convert.ToString(fiList[pos].nameElementFIMespl);
                    textBox47.Text = Convert.ToString(fiList[pos].codeSysFIMespl);
                    label81.Text = Convert.ToString(fiList[pos].nameSysFIMespl);
                    textBox48.Text = Convert.ToString(fiList[pos].codeUsIspMespl);
                    textBox49.Text = Convert.ToString(fiList[pos].distanceFIMespl);
                    textBox50.Text = Convert.ToString(fiList[pos].sizePartFIMespl);
                    textBox51.Text = Convert.ToString(fiList[pos].lgotFIMespl);
                    textBox52.Text = Convert.ToString(fiList[pos].countShotPartFIMespl);
                    textBox53.Text = Convert.ToString(fiList[pos].countReShotFIMespl);
                    textBox54.Text = Convert.ToString(fiList[pos].countPodShotFIMespl);
                    textBox55.Text = Convert.ToString(fiList[pos].uslCountPartYearFIMespl);
                    textBox56.Text = Convert.ToString(fiList[pos].codePregradiOneFIMespl);
                    textBox57.Text = Convert.ToString(fiList[pos].livePregradiOneFIMespl);
                    textBox58.Text = Convert.ToString(fiList[pos].codePregradiTwoFIMespl);
                    textBox59.Text = Convert.ToString(fiList[pos].livePregradiTwoFIMespl);
                    textBox60.Text = Convert.ToString(fiList[pos].liveSystemFIMespl);
                    textBox61.Text = Convert.ToString(fiList[pos].prevLiveSystemFIMespl);
                    textBox62.Text = Convert.ToString(fiList[pos].codeNameStFIMespl);
                    label82.Text = Convert.ToString(fiList[pos].nameNameStFIMespl);
                    textBox63.Text = Convert.ToString(fiList[pos].liveStFIMespl);
                    textBox64.Text = Convert.ToString(fiList[pos].prevLiveStFIMespl);
                    textBox65.Text = Convert.ToString(fiList[pos].codeNameStandFIMespl);
                    label83.Text = Convert.ToString(fiList[pos].nameNameStandFIMespl);
                    textBox66.Text = Convert.ToString(fiList[pos].liveStandFIMespl);
                    textBox67.Text = Convert.ToString(fiList[pos].prevLiveStandFIMespl);
                    textBox68.Text = Convert.ToString(fiList[pos].koefAmorGilzFIMespl);
                    textBox69.Text = Convert.ToString(fiList[pos].koefPrivedZarFIMespl);
                    textBox70.Text = Convert.ToString(fiList[pos].koefPrivShotFIMespl);
                    textBox71.Text = Convert.ToString(fiList[pos].uslCountZvFIMespl);
                    textBox72.Text = Convert.ToString(fiList[pos].codeEdIzmFIMespl);
                    label85.Text = Convert.ToString(fiList[pos].nameEdIzmFIMespl);
                    textBox74.Text = Convert.ToString(fiList[pos].id);
                }
                else
                {
                    textBox42.Text = "";
                    textBox44.Text = "";
                    textBox43.Text = "";
                    label80.Text = "";
                    textBox45.Text = "";
                    textBox46.Text = "";
                    textBox47.Text = "";
                    label81.Text = "";
                    textBox48.Text = "";
                    textBox49.Text = "";
                    textBox50.Text = "";
                    textBox51.Text = "";
                    textBox52.Text = "";
                    textBox53.Text = "";
                    textBox54.Text = "";
                    textBox55.Text = "";
                    textBox56.Text = "";
                    textBox57.Text = "";
                    textBox58.Text = "";
                    textBox59.Text = "";
                    textBox60.Text = "";
                    textBox61.Text = "";
                    textBox62.Text = "";
                    label82.Text = "";
                    textBox63.Text = "";
                    textBox64.Text = "";
                    textBox65.Text = "";
                    label83.Text = "";
                    textBox66.Text = "";
                    textBox67.Text = "";
                    textBox68.Text = "";
                    textBox69.Text = "";
                    textBox70.Text = "";
                    textBox71.Text = "";
                    textBox72.Text = "";
                    label85.Text = "";
                    textBox74.Text = "";
                }
            }
        }

        //Позиция форматки испытания
        private void createPositionFIMespl(int s)
        {
            if (s == 0)
            {
                if (positionFIMesplList - 1 >= 0)
                    positionFIMesplList--;
            }
            else
            {
                if (positionFIMesplList + 1 < fiList.Count)
                    positionFIMesplList++;
            }
            functionShowFIMespl(positionFIMesplList);
        }

        private void button87_Click(object sender, EventArgs e)
        {
            createPositionFIMespl(0);
        }

        private void button83_Click(object sender, EventArgs e)
        {
            createPositionFIMespl(1);
        }

        //Кнопка удаления
        private void button84_Click(object sender, EventArgs e)
        {
            if (positionFIMesplList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить форматку испытания?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [FIMespl] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox74.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Форматка испытания успешна удалена");
                    functionQueryFI();
                    createPositionFIMespl(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите форматку испытания для удаления");
            }
        }

        //Кнопка добавить
        private void button86_Click(object sender, EventArgs e)
        {
            functionShowFIMespl(-1);
            spFIMesplEdit = true;
            textBox42.Focus();
            button78.Visible = false;
            button79.Visible = false;
            button80.Visible = false;
            button83.Visible = false;
            button84.Visible = false;
            button85.Visible = false;
            button86.Visible = false;
            button87.Visible = false;
            button88.Visible = false;
            button81.Visible = true;
            button82.Visible = true;
            textBox42.ReadOnly = false;
            textBox43.ReadOnly = false;
            textBox47.ReadOnly = false;
            textBox48.ReadOnly = false;
            textBox49.ReadOnly = false;
            textBox50.ReadOnly = false;
            textBox51.ReadOnly = false;
            textBox52.ReadOnly = false;
            textBox53.ReadOnly = false;
            textBox54.ReadOnly = false;
            textBox55.ReadOnly = false;
            textBox56.ReadOnly = false;
            textBox57.ReadOnly = false;
            textBox58.ReadOnly = false;
            textBox59.ReadOnly = false;
            textBox60.ReadOnly = false;
            textBox61.ReadOnly = false;
            textBox62.ReadOnly = false;
            textBox63.ReadOnly = false;
            textBox64.ReadOnly = false;
            textBox65.ReadOnly = false;
            textBox66.ReadOnly = false;
            textBox67.ReadOnly = false;
            textBox68.ReadOnly = false;
            textBox69.ReadOnly = false;
            textBox70.ReadOnly = false;
            textBox71.ReadOnly = false;
            textBox72.ReadOnly = false;
        }

        //Кнопка редактировать
        private void button85_Click(object sender, EventArgs e)
        {
            spFIMesplEdit = true;
            button78.Visible = false;
            button79.Visible = false;
            button80.Visible = false;
            button83.Visible = false;
            button84.Visible = false;
            button85.Visible = false;
            button86.Visible = false;
            button87.Visible = false;
            button88.Visible = false;
            button80.Visible = true;
            button82.Visible = true;
            textBox42.ReadOnly = false;
            textBox43.ReadOnly = false;
            textBox47.ReadOnly = false;
            textBox48.ReadOnly = false;
            textBox49.ReadOnly = false;
            textBox50.ReadOnly = false;
            textBox51.ReadOnly = false;
            textBox52.ReadOnly = false;
            textBox53.ReadOnly = false;
            textBox54.ReadOnly = false;
            textBox55.ReadOnly = false;
            textBox56.ReadOnly = false;
            textBox57.ReadOnly = false;
            textBox58.ReadOnly = false;
            textBox59.ReadOnly = false;
            textBox60.ReadOnly = false;
            textBox61.ReadOnly = false;
            textBox62.ReadOnly = false;
            textBox63.ReadOnly = false;
            textBox64.ReadOnly = false;
            textBox65.ReadOnly = false;
            textBox66.ReadOnly = false;
            textBox67.ReadOnly = false;
            textBox68.ReadOnly = false;
            textBox69.ReadOnly = false;
            textBox70.ReadOnly = false;
            textBox71.ReadOnly = false;
            textBox72.ReadOnly = false;
        }
        
        //Кнопка отмены добавления и редактирования
        private void button82_Click(object sender, EventArgs e)
        {
            functionDisableShoeNewFIMespl();
        }

        //Фнукция отмены добавления и редактирования
        private void functionDisableShoeNewFIMespl()
        {
            spFIMesplEdit = false;
            button78.Visible = true;
            button79.Visible = true;
            button80.Visible = true;
            button83.Visible = true;
            button84.Visible = true;
            button85.Visible = true;
            button86.Visible = true;
            button87.Visible = true;
            button88.Visible = true;
            button80.Visible = false;
            button81.Visible = false;
            button82.Visible = false;
            textBox42.ReadOnly = true;
            textBox44.ReadOnly = true;
            textBox43.ReadOnly = true;
            textBox45.ReadOnly = true;
            textBox46.ReadOnly = true;
            textBox47.ReadOnly = true;
            textBox48.ReadOnly = true;
            textBox49.ReadOnly = true;
            textBox50.ReadOnly = true;
            textBox51.ReadOnly = true;
            textBox52.ReadOnly = true;
            textBox53.ReadOnly = true;
            textBox54.ReadOnly = true;
            textBox55.ReadOnly = true;
            textBox56.ReadOnly = true;
            textBox57.ReadOnly = true;
            textBox58.ReadOnly = true;
            textBox59.ReadOnly = true;
            textBox60.ReadOnly = true;
            textBox61.ReadOnly = true;
            textBox62.ReadOnly = true;
            textBox63.ReadOnly = true;
            textBox64.ReadOnly = true;
            textBox65.ReadOnly = true;
            textBox66.ReadOnly = true;
            textBox67.ReadOnly = true;
            textBox68.ReadOnly = true;
            textBox69.ReadOnly = true;
            textBox70.ReadOnly = true;
            textBox71.ReadOnly = true;
            textBox72.ReadOnly = true;
            functionShowFIMespl(positionFIMesplList);
        }

        //Кнопка подтверждения добавления
        private void button81_Click(object sender, EventArgs e)
        {
            //Проверка на наличия кода испытуемого элемента и вида испытания
            if (!string.IsNullOrEmpty(textBox43.Text) && !string.IsNullOrWhiteSpace(textBox43.Text) && !string.IsNullOrEmpty(textBox42.Text) && !string.IsNullOrWhiteSpace(textBox42.Text))
            {
                //Проверка на наличие форматки испытания
                if (!functionProverkaFIInList(textBox42.Text, textBox43.Text))
                {
                    //Проверка на заполненные поля
                    string proverkaAllFIMespl = functionProverkaAllFIMespl();
                    if (proverkaAllFIMespl.Length > 0)
                    {
                        functionMessageShow(2, proverkaAllFIMespl);
                    }
                    else
                    {
                        bool proverkaShifrov = true;
                        if (!functionProverkaElementsInListFI(textBox42.Text))
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaVidIspInList(textBox43.Text))
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Вид испытания с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaMCInList(textBox47.Text) && textBox47.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkapregradiInList(textBox56.Text) && textBox56.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkapregradiInList(textBox58.Text) && textBox58.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaMCInList(textBox62.Text) && textBox62.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaMCInList(textBox65.Text) && textBox65.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaEdIzmInList(textBox72.Text))
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Ед. измерения с данным кодом отсутствует в справочнике!");
                        }
                        if (proverkaShifrov)
                        {
                            string polInBD = "";
                            string valInBD = "";
                            if (textBox47.Text != "000")
                            {
                                polInBD += ",codeSysFIMespl";
                                valInBD += ",@codeSysFIMespl";
                            }
                            if (textBox48.Text.Length > 0)
                            {
                                polInBD += ",codeUsIspMespl";
                                valInBD += ",@codeUsIspMespl";
                            }
                            if (textBox49.Text.Length > 0)
                            {
                                polInBD += ",distanceFIMespl";
                                valInBD += ",@distanceFIMespl";
                            }
                            if (textBox50.Text.Length > 0)
                            {
                                polInBD += ",sizePartFIMespl";
                                valInBD += ",@sizePartFIMespl";
                            }
                            if (textBox51.Text.Length > 0)
                            {
                                polInBD += ",lgotFIMespl";
                                valInBD += ",@lgotFIMespl";
                            }
                            if (textBox52.Text.Length > 0)
                            {
                                polInBD += ",countShotPartFIMespl";
                                valInBD += ",@countShotPartFIMespl";
                            }
                            if (textBox53.Text.Length > 0)
                            {
                                polInBD += ",countReShotFIMespl";
                                valInBD += ",@countReShotFIMespl";
                            }
                            if (textBox54.Text.Length > 0)
                            {
                                polInBD += ",countPodShotFIMespl";
                                valInBD += ",@countPodShotFIMespl";
                            }
                            if (textBox55.Text.Length > 0)
                            {
                                polInBD += ",uslCountPartYearFIMespl";
                                valInBD += ",@uslCountPartYearFIMespl";
                            }
                            if (textBox56.Text != "000")
                            {
                                polInBD += ",codePregradiOneFIMespl";
                                valInBD += ",@codePregradiOneFIMespl";
                            }
                            if (textBox57.Text.Length > 0)
                            {
                                polInBD += ",livePregradiOneFIMespl";
                                valInBD += ",@livePregradiOneFIMespl";
                            }
                            if (textBox58.Text != "000")
                            {
                                polInBD += ",codePregradiTwoFIMespl";
                                valInBD += ",@codePregradiTwoFIMespl";
                            }
                            if (textBox59.Text.Length > 0)
                            {
                                polInBD += ",livePregradiTwoFIMespl";
                                valInBD += ",@livePregradiTwoFIMespl";
                            }
                            if (textBox60.Text.Length > 0)
                            {
                                polInBD += ",liveSystemFIMespl";
                                valInBD += ",@liveSystemFIMespl";
                            }
                            if (textBox61.Text.Length > 0)
                            {
                                polInBD += ",prevLiveSystemFIMespl";
                                valInBD += ",@prevLiveSystemFIMespl";
                            }
                            if (textBox62.Text != "000")
                            {
                                polInBD += ",codeNameStFIMespl";
                                valInBD += ",@codeNameStFIMespl";
                            }
                            if (textBox63.Text.Length > 0)
                            {
                                polInBD += ",liveStFIMespl";
                                valInBD += ",@liveStFIMespl";
                            }
                            if (textBox64.Text.Length > 0)
                            {
                                polInBD += ",prevLiveStFIMespl";
                                valInBD += ",@prevLiveStFIMespl";
                            }
                            if (textBox65.Text != "000")
                            {
                                polInBD += ",codeNameStandFIMespl";
                                valInBD += ",@codeNameStandFIMespl";
                            }
                            if (textBox66.Text.Length > 0)
                            {
                                polInBD += ",liveStandFIMespl";
                                valInBD += ",@liveStandFIMespl";
                            }
                            if (textBox67.Text.Length > 0)
                            {
                                polInBD += ",prevLiveStandFIMespl";
                                valInBD += ",@prevLiveStandFIMespl";
                            }
                            if (textBox68.Text.Length > 0)
                            {
                                polInBD += ",koefAmorGilzFIMespl";
                                valInBD += ",@koefAmorGilzFIMespl";
                            }
                            if (textBox69.Text.Length > 0)
                            {
                                polInBD += ",koefPrivedZarFIMespl";
                                valInBD += ",@koefPrivedZarFIMespl";
                            }
                            if (textBox70.Text.Length > 0)
                            {
                                polInBD += ",koefPrivShotFIMespl";
                                valInBD += ",@koefPrivShotFIMespl";
                            }
                            if (textBox71.Text.Length > 0)
                            {
                                polInBD += ",uslCountZvFIMespl";
                                valInBD += ",@uslCountZvFIMespl";
                            }
                            if (textBox72.Text.Length > 0)
                            {
                                polInBD += ",codeEdIzmFIMespl";
                                valInBD += ",@codeEdIzmFIMespl";
                            }
                            string commandInBD = "INSERT INTO [FIMespl] (codeElementFIMespl,vidIspFIMespl" + polInBD + ") VALUES (@codeElementFIMespl,@vidIspFIMespl" + valInBD + ")";
                            SQLiteCommand command = new SQLiteCommand(commandInBD, sqliteConnection);
                            //Код испытуемого элемента
                            int idElementsFIMespl = 0;
                            foreach (ClassElements el in elementsList)
                                if (el.getCode() == textBox42.Text)
                                    idElementsFIMespl = el.getId();
                            command.Parameters.AddWithValue("codeElementFIMespl", idElementsFIMespl);
                            //Вид испытания
                            int idVidIspFIMespl = 0;
                            foreach (ClassVidIsp el in vidIspList)
                                if (el.code == textBox43.Text)
                                    idVidIspFIMespl = el.id;
                            command.Parameters.AddWithValue("vidIspFIMespl", idVidIspFIMespl);
                            //Шифр системы
                            int idCodeSysFIMespl = 0;
                            foreach (ClassMC el in mcList)
                                if (el.codeMC3 == textBox47.Text)
                                    idCodeSysFIMespl = el.id;
                            command.Parameters.AddWithValue("codeSysFIMespl", idCodeSysFIMespl);
                            //Шифр условий испытания
                            command.Parameters.AddWithValue("codeUsIspMespl", textBox48.Text);
                            //Дистанция
                            command.Parameters.AddWithValue("distanceFIMespl", textBox49.Text);
                            //Размер партии
                            command.Parameters.AddWithValue("sizePartFIMespl", textBox50.Text);
                            //Льготность
                            command.Parameters.AddWithValue("lgotFIMespl", textBox51.Text);
                            //Количество выстрелов от партии
                            command.Parameters.AddWithValue("countShotPartFIMespl", textBox52.Text);
                            //Количество повторных выстрелов
                            command.Parameters.AddWithValue("countReShotFIMespl", textBox53.Text);
                            //Количество подготовительных выстрелов
                            command.Parameters.AddWithValue("countPodShotFIMespl", textBox54.Text);
                            //Усл. кол. парт/год
                            command.Parameters.AddWithValue("uslCountPartYearFIMespl", textBox55.Text);
                            //Шифр преграды 1
                            int idCodePregradiOneFIMespl = 0;
                            foreach (ClassPregrads el in pregradsList)
                                if (el.getCode() == textBox56.Text)
                                    idCodePregradiOneFIMespl = el.getId();
                            command.Parameters.AddWithValue("codePregradiOneFIMespl", idCodePregradiOneFIMespl);
                            //Живучесть преграды 1
                            command.Parameters.AddWithValue("livePregradiOneFIMespl", textBox57.Text);
                            //Шифр преграды 2
                            int idCodePregradiTwoFIMespl = 0;
                            foreach (ClassPregrads el in pregradsList)
                                if (el.getCode() == textBox58.Text)
                                    idCodePregradiTwoFIMespl = el.getId();
                            command.Parameters.AddWithValue("codePregradiTwoFIMespl", idCodePregradiTwoFIMespl);
                            //Живучесть преграды 2
                            command.Parameters.AddWithValue("livePregradiTwoFIMespl", textBox59.Text);
                            //Живучесть системы
                            command.Parameters.AddWithValue("liveSystemFIMespl", textBox60.Text);
                            //Пред. живучесть системы
                            command.Parameters.AddWithValue("prevLiveSystemFIMespl", textBox61.Text);
                            //Шифр ствола
                            int idCodeStFIMespl = 0;
                            foreach (ClassMC el in mcList)
                                if (el.codeMC3 == textBox62.Text)
                                    idCodeStFIMespl = el.id;
                            command.Parameters.AddWithValue("codeNameStFIMespl", idCodeStFIMespl);
                            //Живучесть ствола
                            command.Parameters.AddWithValue("liveStFIMespl", textBox63.Text);
                            //Пред. жив. ствола
                            command.Parameters.AddWithValue("prevLiveStFIMespl", textBox64.Text);
                            //Шифр стенда
                            int idCodeStandFIMespl = 0;
                            foreach (ClassMC el in mcList)
                                if (el.codeMC3 == textBox65.Text)
                                    idCodeStandFIMespl = el.id;
                            command.Parameters.AddWithValue("codeNameStandFIMespl", idCodeStandFIMespl);
                            //Живу. стенда
                            command.Parameters.AddWithValue("liveStandFIMespl", textBox66.Text);
                            //Пред. жив. стенда
                            command.Parameters.AddWithValue("prevLiveStandFIMespl", textBox67.Text);
                            //Коэф. аморт. гильзы
                            command.Parameters.AddWithValue("koefAmorGilzFIMespl", textBox68.Text);
                            //Коэф. привед. заряда
                            command.Parameters.AddWithValue("koefPrivedZarFIMespl", textBox69.Text);
                            //Коэф. прив. выстрела
                            command.Parameters.AddWithValue("koefPrivShotFIMespl", textBox70.Text);
                            //Услов. кол. звеньев
                            command.Parameters.AddWithValue("uslCountZvFIMespl", textBox71.Text);
                            //Шифр ед. измерения
                            int idCodeEdIzmFIMespl = 0;
                            foreach (ClassEdIzm el in edIzmList)
                                if (el.code2 == textBox72.Text)
                                    idCodeEdIzmFIMespl = el.id;
                            command.Parameters.AddWithValue("codeEdIzmFIMespl", idCodeEdIzmFIMespl);
                            sqliteConnection.Open();
                            command.ExecuteNonQuery();
                            sqliteConnection.Close();
                            functionMessageShow(2, "Данные успешно добавлены");
                            functionQueryFI();
                            functionDisableShoeNewFIMespl();
                            positionFIMesplList = fiList.Count - 1;
                            functionShowFIMespl(positionFIMesplList);
                        }
                    }
                }
                else
                {
                    functionMessageShow(1, "Данная УФИ имеется в справочнике!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код испытуемого элемента','Вид испытания' должны быть заполнены!");
            }
        }

        //Кнопка подтверждения редактирования
        private void button80_Click(object sender, EventArgs e)
        {
            //Проверка на наличия кода испытуемого элемента и вида испытания
            if (!string.IsNullOrEmpty(textBox43.Text) && !string.IsNullOrWhiteSpace(textBox43.Text) && !string.IsNullOrEmpty(textBox42.Text) && !string.IsNullOrWhiteSpace(textBox42.Text))
            {
                //Проверка на заполненные поля
                string proverkaAllFIMespl = functionProverkaAllFIMespl();
                if (proverkaAllFIMespl.Length > 0)
                {
                    functionMessageShow(2, proverkaAllFIMespl);
                }
                else
                {
                    bool proverkaShifrov = true;
                    if (!functionProverkaElementsInListFI(textBox42.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaVidIspInList(textBox43.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Вид испытания с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaMCInList(textBox47.Text) && textBox47.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkapregradiInList(textBox56.Text) && textBox56.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkapregradiInList(textBox58.Text) && textBox58.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaMCInList(textBox62.Text) && textBox62.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaMCInList(textBox65.Text) && textBox65.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaEdIzmInList(textBox72.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Ед. измерения с данным кодом отсутствует в справочнике!");
                    }
                    if (proverkaShifrov)
                    {
                        string valInBD = "";
                        if (textBox47.Text != "000")
                            valInBD += ",[codeSysFIMespl]=@codeSysFIMespl";
                        if (textBox48.Text.Length > 0)
                            valInBD += ",[codeUsIspMespl]=@codeUsIspMespl";
                        if (textBox49.Text.Length > 0)
                            valInBD += ",[distanceFIMespl]=@distanceFIMespl";
                        if (textBox50.Text.Length > 0)
                            valInBD += ",[sizePartFIMespl]=@sizePartFIMespl";
                        if (textBox51.Text.Length > 0)
                            valInBD += ",[lgotFIMespl]=@lgotFIMespl";
                        if (textBox52.Text.Length > 0)
                            valInBD += ",[countShotPartFIMespl]=@countShotPartFIMespl";
                        if (textBox53.Text.Length > 0)
                            valInBD += ",[countReShotFIMespl]=@countReShotFIMespl";
                        if (textBox54.Text.Length > 0)
                            valInBD += ",[countPodShotFIMespl]=@countPodShotFIMespl";
                        if (textBox55.Text.Length > 0)
                            valInBD += ",[uslCountPartYearFIMespl]=@uslCountPartYearFIMespl";
                        if (textBox56.Text != "000")
                            valInBD += ",[codePregradiOneFIMespl]=@codePregradiOneFIMespl";
                        if (textBox57.Text.Length > 0)
                            valInBD += ",[livePregradiOneFIMespl]=@livePregradiOneFIMespl";
                        if (textBox58.Text != "000")
                            valInBD += ",[codePregradiTwoFIMespl]=@codePregradiTwoFIMespl";
                        if (textBox59.Text.Length > 0)
                            valInBD += ",[livePregradiTwoFIMespl]=@livePregradiTwoFIMespl";
                        if (textBox60.Text.Length > 0)
                            valInBD += ",[liveSystemFIMespl]=@liveSystemFIMespl";
                        if (textBox61.Text.Length > 0)
                            valInBD += ",[prevLiveSystemFIMespl]=@prevLiveSystemFIMespl";
                        if (textBox62.Text != "000")
                            valInBD += ",[codeNameStFIMespl]=@codeNameStFIMespl";
                        if (textBox63.Text.Length > 0)
                            valInBD += ",[liveStFIMespl]=@liveStFIMespl";
                        if (textBox64.Text.Length > 0)
                            valInBD += ",[prevLiveStFIMespl]=@prevLiveStFIMespl";
                        if (textBox65.Text != "000")
                            valInBD += ",[codeNameStandFIMespl]=@codeNameStandFIMespl";
                        if (textBox66.Text.Length > 0)
                            valInBD += ",[liveStandFIMespl]=@liveStandFIMespl";
                        if (textBox67.Text.Length > 0)
                            valInBD += ",[prevLiveStandFIMespl]=@prevLiveStandFIMespl";
                        if (textBox68.Text.Length > 0)
                            valInBD += ",[koefAmorGilzFIMespl]=@koefAmorGilzFIMespl";
                        if (textBox69.Text.Length > 0)
                            valInBD += ",[koefPrivedZarFIMespl]=@koefPrivedZarFIMespl";
                        if (textBox70.Text.Length > 0)
                            valInBD += ",[koefPrivShotFIMespl]=@koefPrivShotFIMespl";
                        if (textBox71.Text.Length > 0)
                            valInBD += ",[uslCountZvFIMespl]=@uslCountZvFIMespl";
                        if (textBox72.Text.Length > 0)
                            valInBD += ",[codeEdIzmFIMespl]=@codeEdIzmFIMespl";
                        string commandInBD = "UPDATE [FIMespl] SET [codeElementFIMespl]=@codeElementFIMespl,[vidIspFIMespl]=@vidIspFIMespl" + valInBD + " WHERE [id]=@id";
                        SQLiteCommand command = new SQLiteCommand(commandInBD, sqliteConnection);
                        //ID форматки
                        command.Parameters.AddWithValue("id", textBox74.Text);
                        //Код испытуемого элемента
                        int idElementsFIMespl = 0;
                        foreach (ClassElements el in elementsList)
                            if (el.getCode() == textBox42.Text)
                                idElementsFIMespl = el.getId();
                        command.Parameters.AddWithValue("codeElementFIMespl", idElementsFIMespl);
                        //Вид испытания
                        int idVidIspFIMespl = 0;
                        foreach (ClassVidIsp el in vidIspList)
                            if (el.code == textBox43.Text)
                                idVidIspFIMespl = el.id;
                        command.Parameters.AddWithValue("vidIspFIMespl", idVidIspFIMespl);
                        //Шифр системы
                        int idCodeSysFIMespl = 0;
                        foreach (ClassMC el in mcList)
                            if (el.codeMC3 == textBox47.Text)
                                idCodeSysFIMespl = el.id;
                        command.Parameters.AddWithValue("codeSysFIMespl", idCodeSysFIMespl);
                        //Шифр условий испытания
                        command.Parameters.AddWithValue("codeUsIspMespl", textBox48.Text);
                        //Дистанция
                        command.Parameters.AddWithValue("distanceFIMespl", textBox49.Text);
                        //Размер партии
                        command.Parameters.AddWithValue("sizePartFIMespl", textBox50.Text);
                        //Льготность
                        command.Parameters.AddWithValue("lgotFIMespl", textBox51.Text);
                        //Количество выстрелов от партии
                        command.Parameters.AddWithValue("countShotPartFIMespl", textBox52.Text);
                        //Количество повторных выстрелов
                        command.Parameters.AddWithValue("countReShotFIMespl", textBox53.Text);
                        //Количество подготовительных выстрелов
                        command.Parameters.AddWithValue("countPodShotFIMespl", textBox54.Text);
                        //Усл. кол. парт/год
                        command.Parameters.AddWithValue("uslCountPartYearFIMespl", textBox55.Text);
                        //Шифр преграды 1
                        int idCodePregradiOneFIMespl = 0;
                        foreach (ClassPregrads el in pregradsList)
                            if (el.getCode() == textBox56.Text)
                                idCodePregradiOneFIMespl = el.getId();
                        command.Parameters.AddWithValue("codePregradiOneFIMespl", idCodePregradiOneFIMespl);
                        //Живучесть преграды 1
                        command.Parameters.AddWithValue("livePregradiOneFIMespl", textBox57.Text);
                        //Шифр преграды 2
                        int idCodePregradiTwoFIMespl = 0;
                        foreach (ClassPregrads el in pregradsList)
                            if (el.getCode() == textBox58.Text)
                                idCodePregradiTwoFIMespl = el.getId();
                        command.Parameters.AddWithValue("codePregradiTwoFIMespl", idCodePregradiTwoFIMespl);
                        //Живучесть преграды 2
                        command.Parameters.AddWithValue("livePregradiTwoFIMespl", textBox59.Text);
                        //Живучесть системы
                        command.Parameters.AddWithValue("liveSystemFIMespl", textBox60.Text);
                        //Пред. живучесть системы
                        command.Parameters.AddWithValue("prevLiveSystemFIMespl", textBox61.Text);
                        //Шифр ствола
                        int idCodeStFIMespl = 0;
                        foreach (ClassMC el in mcList)
                            if (el.codeMC3 == textBox62.Text)
                                idCodeStFIMespl = el.id;
                        command.Parameters.AddWithValue("codeNameStFIMespl", idCodeStFIMespl);
                        //Живучесть ствола
                        command.Parameters.AddWithValue("liveStFIMespl", textBox63.Text);
                        //Пред. жив. ствола
                        command.Parameters.AddWithValue("prevLiveStFIMespl", textBox64.Text);
                        //Шифр стенда
                        int idCodeStandFIMespl = 0;
                        foreach (ClassMC el in mcList)
                            if (el.codeMC3 == textBox65.Text)
                                idCodeStandFIMespl = el.id;
                        command.Parameters.AddWithValue("codeNameStandFIMespl", idCodeStandFIMespl);
                        //Живу. стенда
                        command.Parameters.AddWithValue("liveStandFIMespl", textBox66.Text);
                        //Пред. жив. стенда
                        command.Parameters.AddWithValue("prevLiveStandFIMespl", textBox67.Text);
                        //Коэф. аморт. гильзы
                        command.Parameters.AddWithValue("koefAmorGilzFIMespl", textBox68.Text);
                        //Коэф. привед. заряда
                        command.Parameters.AddWithValue("koefPrivedZarFIMespl", textBox69.Text);
                        //Коэф. прив. выстрела
                        command.Parameters.AddWithValue("koefPrivShotFIMespl", textBox70.Text);
                        //Услов. кол. звеньев
                        command.Parameters.AddWithValue("uslCountZvFIMespl", textBox71.Text);
                        //Шифр ед. измерения
                        int idCodeEdIzmFIMespl = 0;
                        foreach (ClassEdIzm el in edIzmList)
                            if (el.code2 == textBox72.Text)
                                idCodeEdIzmFIMespl = el.id;
                        command.Parameters.AddWithValue("codeEdIzmFIMespl", idCodeEdIzmFIMespl);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно обновлены");
                        functionQueryFI();
                        functionDisableShoeNewFIMespl();
                        functionShowFIMespl(positionFIMesplList);
                    }
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код испытуемого элемента','Вид испытания' должны быть заполнены!");
            }
        }

        //Ввод кода испытуемого элемента
        private void textBox42_Leave(object sender, EventArgs e)
        {
            if (textBox42.Text.Length > 0 && textBox42.ReadOnly != true)
            {
                if (!functionProverkaElementsInListFI(textBox42.Text))
                    functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
            }
        }

        //Функция проверки наличия элемента в справочнике
        private bool functionProverkaElementsInListFI(string code)
        {
            bool proverkaElement = false;
            foreach (ClassElements el in elementsList)
                if (el.getCode() == code)
                {
                    proverkaElement = true;
                    textBox44.Text = el.getPicture();
                    textBox45.Text = el.getIndex();
                    textBox46.Text = el.getName();
                    break;
                }
            return proverkaElement;
        }

        //Ввод вида испытания
        private void textBox43_Leave(object sender, EventArgs e)
        {
            if (textBox43.Text.Length > 0 && textBox43.ReadOnly != true)
            {
                if (!functionProverkaVidIspInList(textBox43.Text))
                    functionMessageShow(1, "Вид испытания с данным кодом отсутствует в справочнике!");
            }
        }

        //Функция проверки наличия вида испытания в справочнике
        private bool functionProverkaVidIspInList(string code)
        {
            bool proverkaEl = false;
            foreach (ClassVidIsp el in vidIspList)
                if (el.code == code)
                {
                    proverkaEl = true;
                    label80.Text = el.name;
                    break;
                }
            return proverkaEl;
        }

        //Функция проверки форматки испытания в справочнике
        private bool functionProverkaFIInList(string code, string vid)
        {
            bool proverkaEl = false;
            foreach (ClassFI el in fiList)
                if (el.codeElementFIMespl == code && el.codeVidIspFIMespl == vid)
                {
                    proverkaEl = true;
                    break;
                }
            return proverkaEl;
        }

        //Функция проверки заполненных полей
        private string functionProverkaAllFIMespl()
        {
            string proverkaEl = "";
            if (textBox47.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Шифр системы'!\nВыставлено значение 000\n";
                textBox47.Text = "000";
                label81.Text = "*******";
            }
            if (textBox50.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Размер партии'!\nВыставлено значение 1000\n";
                textBox50.Text = "1000";
            }
            if (textBox51.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Льготность'!\nВыставлено значение 1\n";
                textBox51.Text = "1";
            }
            if (textBox56.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Преграда 1'!\nВыставлено значение 000\n";
                textBox56.Text = "000";
            }
            if (textBox58.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Преграда 2'!\nВыставлено значение 000\n";
                textBox58.Text = "000";
            }
            if (textBox62.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Шифр ствола'!\nВыставлено значение 000\n";
                textBox62.Text = "000";
                label82.Text = "*******";
            }
            if (textBox65.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Шифр стенда'!\nВыставлено значение 000\n";
                textBox65.Text = "000";
                label83.Text = "*******";
            }
            if (textBox72.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Шифр ед. измерения'!\nВыставлено значение 70\n";
                textBox72.Text = "70";
                label85.Text = "Штук";
            }
            return proverkaEl;
        }

        //Ввод шифра системы
        private void textBox47_Leave(object sender, EventArgs e)
        {
            if (textBox47.ReadOnly != true && textBox47.Text.Length > 0)
            {
                if (!functionProverkaMCInList(textBox47.Text))
                    functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
            }
        }

        //Функция проверки Мат Части в справочнике
        private bool functionProverkaMCInList(string code)
        {
            bool proverkaEl = false;
            foreach (ClassMC el in mcList)
                if (el.codeMC3 == code)
                {
                    proverkaEl = true;
                    break;
                }
            return proverkaEl;
        }

        //Ввод шифра преграды 1
        private void textBox56_Leave(object sender, EventArgs e)
        {
            if (textBox56.ReadOnly != true && textBox56.Text.Length > 0)
            {
                if (!functionProverkapregradiInList(textBox56.Text))
                    functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
            }
        }

        //Ввод шифра преграды 2
        private void textBox58_Leave(object sender, EventArgs e)
        {
            if (textBox58.ReadOnly != true && textBox58.Text.Length > 0)
            {
                if (!functionProverkapregradiInList(textBox58.Text))
                    functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
            }
        }

        //Функция проверки преграды в справочнике
        private bool functionProverkapregradiInList(string code)
        {
            bool proverkaEl = false;
            foreach (ClassPregrads el in pregradsList)
                if (el.getCode() == code)
                {
                    proverkaEl = true;
                    break;
                }
            return proverkaEl;
        }

        //Ввод шифра ствола
        private void textBox62_Leave(object sender, EventArgs e)
        {
            if (textBox62.ReadOnly != true && textBox62.Text.Length > 0)
            {
                if (!functionProverkaMCInList(textBox62.Text))
                    functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
            }
        }

        //Ввод шифра стенда
        private void textBox65_Leave(object sender, EventArgs e)
        {
            if (textBox65.ReadOnly != true && textBox65.Text.Length > 0)
            {
                if (!functionProverkaMCInList(textBox65.Text))
                    functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
            }
        }

        //Ввод шифра единицы измерения
        private void textBox72_Leave(object sender, EventArgs e)
        {
            if (textBox72.ReadOnly != true && textBox72.Text.Length > 0)
            {
                if (!functionProverkaEdIzmInList(textBox72.Text))
                    functionMessageShow(1, "Ед. измерения с данным кодом отсутствует в справочнике!");
            }
        }

        //Функция для проверки наличия ед. измерения в справочнике
        private bool functionProverkaEdIzmInList(string code)
        {
            bool proverkaEl = false;
            foreach (ClassEdIzm el in edIzmList)
                if (el.code2 == code)
                {
                    proverkaEl = true;
                    break;
                }
            return proverkaEl;
        }

        //Кнопка поиска
        private void button79_Click(object sender, EventArgs e)
        {
            Form9 form9 = new Form9(fiList);
            form9.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionFIMesplList = ClassSearchStatic.position;
                    functionShowFIMespl(positionFIMesplList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "УФИ с данным " + ClassSearchStatic.searchtype + " не найдена!");
                }
            }
        }

        //Кнопка отображения ведомости комплектации
        private void button88_Click(object sender, EventArgs e)
        {
            bool proverkaVKMespl = false;
            string vkInUFIstr = "";
            foreach (ClassVKMespl el in vkMesplList)
                if (el.idFIMespl == Convert.ToInt32(textBox74.Text))
                {
                    foreach(ClassVKMesplElements element in el.listElements)
                        vkInUFIstr += "            " + element.el.getCode() + "\t\t           " + element.codeEdIzmVKMespl + "\t\t           " + element.countVKMespl + "\n";
                    proverkaVKMespl = true;
                }
            foreach (ClassVKMespl el in vkMesplSbList)
                if (el.idFIMespl == Convert.ToInt32(textBox74.Text))
                {
                    foreach (ClassVKMesplElements element in el.listElements)
                        vkInUFIstr += "            " + element.el.getCode() + "\t\t           " + element.codeEdIzmVKMespl + "\t\t           " + element.countVKMespl + "\n";
                    proverkaVKMespl = true;
                }
            if(proverkaVKMespl)
                MessageBox.Show("Комплектующий элемент\tЕд.Измерения\tКоличество КЭ\n" + vkInUFIstr, "Ведомость комплектаций", MessageBoxButtons.OK, MessageBoxIcon.Information);
            else
                functionMessageShow(1, "Не найдета ведомость комплектаций!");
        }

        //------------------------------ВЕДОМОСТЬ КОМПЛЕКТАЦИЙ------------------------------
        private void button77_Click(object sender, EventArgs e)
        {
            panel9.Visible = false;
            panel12.Visible = true;
            functionQueryFI();
            //functionQueryVK();
            functionShowVKMespl(-1);
        }
        //Кнопка назад в меню
        private void button98_Click(object sender, EventArgs e)
        {
            functionCancelMespl();
        }

        //Функция отображение форматки испытания месячного плана
        private void functionShowVKMespl(int pos)
        {
            if (!spVKMesplEdit)
            {
                if (pos >= 0)
                {
                    if (typeVKMespl)
                    {
                        if (typeVKMesplElement)
                        {
                            if (vkMesplList.Count > 0)
                            {
                                textBox80.Text = Convert.ToString(vkMesplList[pos].id);
                                textBox81.Text = Convert.ToString(vkMesplList[pos].idFIMespl);
                                textBox75.Text = Convert.ToString(vkMesplList[pos].codeElementVKMespl);
                                textBox76.Text = Convert.ToString(vkMesplList[pos].pictureElementVKMespl);
                                textBox77.Text = Convert.ToString(vkMesplList[pos].indexElementVKMespl);
                                textBox78.Text = Convert.ToString(vkMesplList[pos].nameElementVKMespl);
                                textBox79.Text = Convert.ToString(vkMesplList[pos].codeVidIspVKMespl);
                                label92.Text = Convert.ToString(vkMesplList[pos].nameVidIspVKMespl);
                                listBox1.Items.Clear();
                                listBox1.Items.Add("Комплектующий элемент\tЕд.Измерения\tКоличество КЭ");
                                foreach (ClassVKMesplElements el in vkMesplList[pos].listElements)
                                {
                                    listBox1.Items.Add("            " + el.el.getCode() + "\t\t           " + el.codeEdIzmVKMespl + "\t\t         " + el.countVKMespl);
                                }
                            }
                        }
                        else
                        {
                            if (vkMesplElementList.Count > 0)
                            {
                                textBox80.Text = Convert.ToString(vkMesplElementList[pos].id);
                                textBox75.Text = Convert.ToString(vkMesplElementList[pos].el.getCode());
                                textBox76.Text = Convert.ToString(vkMesplElementList[pos].el.getPicture());
                                textBox77.Text = Convert.ToString(vkMesplElementList[pos].el.getIndex());
                                textBox78.Text = Convert.ToString(vkMesplElementList[pos].el.getName());
                                textBox79.Text = Convert.ToString(vkMesplElementList[pos].codeEdIzmVKMespl);
                                label92.Text = Convert.ToString(vkMesplElementList[pos].nameEdIzmVKMespl);
                                listBox1.Items.Clear();
                                listBox1.Items.Add("Испытуемый элемент\tВид испытания\tКоличество КЭ");
                                int posElementCountPr = 0;
                                foreach (ClassVKMespl el in vkMesplElementList[pos].listElements)
                                {
                                    listBox1.Items.Add("            " + el.codeElementVKMespl + "\t\t           " + el.codeVidIspVKMespl + "\t\t         " + vkMesplElementList[pos].listElementsCount[posElementCountPr]);
                                    posElementCountPr++;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (typeVKMesplElement)
                        {
                            if (vkMesplSbList.Count > 0)
                            {
                                textBox80.Text = Convert.ToString(vkMesplSbList[pos].id);
                                textBox81.Text = Convert.ToString(vkMesplSbList[pos].idFIMespl);
                                textBox75.Text = Convert.ToString(vkMesplSbList[pos].codeElementVKMespl);
                                textBox76.Text = Convert.ToString(vkMesplSbList[pos].pictureElementVKMespl);
                                textBox77.Text = Convert.ToString(vkMesplSbList[pos].indexElementVKMespl);
                                textBox78.Text = Convert.ToString(vkMesplSbList[pos].nameElementVKMespl);
                                textBox79.Text = Convert.ToString(vkMesplSbList[pos].codeVidIspVKMespl);
                                label92.Text = Convert.ToString(vkMesplSbList[pos].nameVidIspVKMespl);
                                listBox1.Items.Clear();
                                listBox1.Items.Add("Комплектующий элемент\tЕд.Измерения\tКоличество");
                                foreach (ClassVKMesplElements el in vkMesplSbList[pos].listElements)
                                {
                                    listBox1.Items.Add("            " + el.el.getCode() + "\t\t           " + el.codeEdIzmVKMespl + "\t\t       " + el.countVKMespl);
                                }
                            }
                        }
                        else
                        {
                            if (vkMesplSbElementList.Count > 0)
                            {
                                textBox80.Text = Convert.ToString(vkMesplSbElementList[pos].id);
                                textBox75.Text = Convert.ToString(vkMesplSbElementList[pos].el.getCode());
                                textBox76.Text = Convert.ToString(vkMesplSbElementList[pos].el.getPicture());
                                textBox77.Text = Convert.ToString(vkMesplSbElementList[pos].el.getIndex());
                                textBox78.Text = Convert.ToString(vkMesplSbElementList[pos].el.getName());
                                textBox79.Text = Convert.ToString(vkMesplSbElementList[pos].codeEdIzmVKMespl);
                                label92.Text = Convert.ToString(vkMesplSbElementList[pos].nameEdIzmVKMespl);
                                listBox1.Items.Clear();
                                listBox1.Items.Add("Испытуемый элемент\tВид испытания\tКоличество КЭ");
                                int posElementCountPr = 0;
                                foreach (ClassVKMespl el in vkMesplSbElementList[pos].listElements)
                                {
                                    listBox1.Items.Add("            " + el.codeElementVKMespl + "\t\t           " + el.codeVidIspVKMespl + "\t\t       " + vkMesplElementList[pos].listElementsCount[posElementCountPr]);
                                    posElementCountPr++;
                                }
                            }
                        }
                    }
                }
                else
                {
                    textBox80.Text = "";
                    textBox81.Text = "";
                    textBox75.Text = "";
                    textBox76.Text = "";
                    textBox77.Text = "";
                    textBox78.Text = "";
                    textBox79.Text = "";
                    label92.Text = "";
                    listBox1.Items.Clear();
                    listBox1.Items.Add("Комплектующий элемент\tЕд.Измерения\tКоличество");
                }
            }
        }

        //Позиция ведомости испытаний
        private void createPositionVKMespl(int s)
        {
            if (s == 0)
            {
                if (positionVKMesplList - 1 >= 0)
                    positionVKMesplList--;
            }
            else
            {
                if (typeVKMesplElement)
                {
                    if (typeVKMespl)
                        if (positionVKMesplList + 1 < vkMesplList.Count)
                            positionVKMesplList++;
                    if (!typeVKMespl)
                        if (positionVKMesplList + 1 < vkMesplSbList.Count)
                            positionVKMesplList++;
                }
                else
                {
                    if (typeVKMespl)
                        if (positionVKMesplList + 1 < vkMesplElementList.Count)
                            positionVKMesplList++;
                    if (!typeVKMespl)
                        if (positionVKMesplList + 1 < vkMesplSbElementList.Count)
                            positionVKMesplList++;
                }
            }
            functionShowVKMespl(positionVKMesplList);
        }
        //Кнопка назад
        private void button96_Click(object sender, EventArgs e)
        {
            createPositionVKMespl(0);
        }

        //Кнопка вперед
        private void button92_Click(object sender, EventArgs e)
        {
            createPositionVKMespl(1);
        }

        //Выбор прямая или обратная
        private void comboBox6_SelectedIndexChanged(object sender, EventArgs e)
        {
            functionShowVKMesplElement();
        }

        //Выбор общей или сборка
        private void comboBox7_SelectedIndexChanged(object sender, EventArgs e)
        {
            functionShowVKMesplElement();
        }

        //Функция отображения
        private void functionShowVKMesplElement()
        {
            if (comboBox6.Text == "Прямая ВК" && comboBox7.Text == "ВК общая")
            {
                functionShowVKMespl(-1);
                positionVKMesplList = 0;
                typeVKMespl = true;
                label87.Text = "Испытуемый элемент";
                label91.Text = "Вид испытания";
                typeVKMesplElement = true;
                button93.Visible = true;
                button94.Visible = true;
                button95.Visible = true;
                button99.Visible = true;
                functionShowVKMespl(positionVKMesplList);
            }
            if (comboBox6.Text == "Прямая ВК" && comboBox7.Text == "ВК на сборку")
            {
                functionShowVKMespl(-1);
                positionVKMesplList = 0;
                typeVKMespl = false;
                label87.Text = "Испытуемый элемент";
                label91.Text = "Вид испытания";
                typeVKMesplElement = true;
                button93.Visible = true;
                button94.Visible = true;
                button95.Visible = true;
                button99.Visible = true;
                functionShowVKMespl(positionVKMesplList);
            }
            if (comboBox6.Text == "Обратная ВК" && comboBox7.Text == "ВК общая")
            {
                functionShowVKMespl(-1);
                positionVKMesplList = 0;
                typeVKMespl = true;
                label87.Text = "Комплект. элемент";
                label91.Text = "Ед. измерения";
                typeVKMesplElement = false;
                button93.Visible = false;
                button94.Visible = false;
                button95.Visible = false;
                button99.Visible = false;
                functionShowVKMespl(positionVKMesplList);
            }
            if (comboBox6.Text == "Обратная ВК" && comboBox7.Text == "ВК на сборку")
            {
                functionShowVKMespl(-1);
                positionVKMesplList = 0;
                typeVKMespl = false;
                label87.Text = "Комплект. элемент";
                label91.Text = "Ед. измерения";
                typeVKMesplElement = false;
                button93.Visible = false;
                button94.Visible = false;
                button95.Visible = false;
                button99.Visible = false;
                functionShowVKMespl(positionVKMesplList);
            }
        }

        //Кнопка просмотра элемента
        private void button100_Click(object sender, EventArgs e)
        {
            if(listBox1.SelectedIndex > 0)
            {
                if (typeVKMespl)
                {
                    if (typeVKMesplElement)
                    {
                        ClassElements el = vkMesplList[positionVKMesplList].listElements[listBox1.SelectedIndex - 1].el;
                        functionMessageShow(2, "Код комплектующего элемента: " + el.getCode() + "\nЧертеж: " + el.getPicture() + "\nИндекс: " + el.getIndex() + "\nНаименование элемента: " + el.getName());
                    }
                    else
                    {
                        ClassVKMespl el = vkMesplElementList[positionVKMesplList].listElements[listBox1.SelectedIndex - 1];
                        functionMessageShow(2, "Код комплектующего элемента: " + el.codeElementVKMespl + "\nЧертеж: " + el.pictureElementVKMespl + "\nИндекс: " + el.indexElementVKMespl + "\nНаименование элемента: " + el.nameElementVKMespl);
                    }
                }
                else
                {
                    if (typeVKMesplElement)
                    {
                        ClassElements el = vkMesplSbList[positionVKMesplList].listElements[listBox1.SelectedIndex - 1].el;
                        functionMessageShow(2, "Код комплектующего элемента: " + el.getCode() + "\nЧертеж: " + el.getPicture() + "\nИндекс: " + el.getIndex() + "\nНаименование элемента: " + el.getName());
                    }
                    else
                    {
                        ClassVKMespl el = vkMesplSbElementList[positionVKMesplList].listElements[listBox1.SelectedIndex - 1];
                        functionMessageShow(2, "Код комплектующего элемента: " + el.codeElementVKMespl + "\nЧертеж: " + el.pictureElementVKMespl + "\nИндекс: " + el.indexElementVKMespl + "\nНаименование элемента: " + el.nameElementVKMespl);
                    }
                }
            }
        }

        //Кнопка удаления
        private void button93_Click(object sender, EventArgs e)
        {
            if (positionVKMesplList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить ведомость комплектации?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [VKMespl] WHERE [idFIMespl]=@idFIMespl", sqliteConnection);
                    command.Parameters.AddWithValue("idFIMespl", textBox81.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    if (typeVKMespl)
                    {
                        foreach (ClassVKMesplElements el in vkMesplElementList.ToArray())
                        {
                            int indexEl = 0;
                            bool isElementInList = false;
                            foreach (ClassVKMespl vk in el.listElements)
                            {
                                if (vk == vkMesplList[positionVKMesplList])
                                {
                                    isElementInList = true;
                                    break;
                                }
                                else
                                    indexEl++;
                            }
                            if (isElementInList)
                            {
                                el.listElements.RemoveAt(indexEl);
                                el.listElementsCount.RemoveAt(indexEl);
                                if (el.listElements.Count == 0)
                                    vkMesplElementList.Remove(el);
                            }
                        }
                        vkMesplList.Remove(vkMesplList[positionVKMesplList]);
                    }
                    else
                    {
                        foreach (ClassVKMesplElements el in vkMesplSbElementList.ToArray())
                        {
                            int indexEl = 0;
                            bool isElementInList = false;
                            foreach (ClassVKMespl vk in el.listElements)
                            {
                                if (vk == vkMesplSbList[positionVKMesplList])
                                {
                                    isElementInList = true;
                                    break;
                                }
                                else
                                    indexEl++;
                            }
                            if (isElementInList)
                            {
                                el.listElements.RemoveAt(indexEl);
                                el.listElementsCount.RemoveAt(indexEl);
                                if (el.listElements.Count == 0)
                                    vkMesplSbElementList.Remove(el);
                            }
                        }
                        vkMesplSbList.Remove(vkMesplSbList[positionVKMesplList]);
                    }
                    functionMessageShow(2, "Ведомость комплектации успешна удалена");
                    //functionQueryVK();
                    createPositionVKMespl(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите ведомость комплектации для удаления");
            }
        }

        //Кнопка поиска
        private void button97_Click(object sender, EventArgs e)
        {
            if (typeVKMespl)
            {
                if (typeVKMesplElement)
                {
                    Form10 form10 = new Form10(vkMesplList, true);
                    form10.ShowDialog();
                }
                else
                {
                    Form10 form10 = new Form10(vkMesplElementList, false);
                    form10.ShowDialog();
                }
            }
            else
            {
                if (typeVKMesplElement)
                {
                    Form10 form10 = new Form10(vkMesplSbList, true);
                    form10.ShowDialog();
                }
                else
                {
                    Form10 form10 = new Form10(vkMesplSbElementList, false);
                    form10.ShowDialog();
                }
            }
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionVKMesplList = ClassSearchStatic.position;
                    functionShowVKMespl(positionVKMesplList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "ВК с данным " + ClassSearchStatic.searchtype + " не найдена!");
                }
            }
        }

        //Отображение УФИ
        private void button99_Click(object sender, EventArgs e)
        {
            if (positionVKMesplList != -1)
            {
                string ufiInVKstr = "";
                foreach (ClassFI el in fiList)
                    if (el.id == Convert.ToInt32(textBox81.Text))
                    {
                        ufiInVKstr += "\nШифр, наименование системы  " + el.codeSysFIMespl + "   " + el.nameSysFIMespl +
                                        "\nШифр условия испытаний    " + el.codeUsIspMespl + "   " + "\t\t\tДистанция " + el.distanceFIMespl +
                                        "\nРазмер партии             " + el.sizePartFIMespl + "   " + "\t\t\tЛьготность " + el.lgotFIMespl +
                                        "\nКол. выстр. от партии     " + el.countShotPartFIMespl + "   " + "\t\t\tКол. повт. выстрелов " + el.countReShotFIMespl +
                                        "\nКол. подгот. выстрелов    " + el.countPodShotFIMespl + "   " + "\t\t\tУсл. кол. парт/год " + el.uslCountPartYearFIMespl +
                                        "\nШифр преграды 1           " + el.codePregradiOneFIMespl + "   " + "\t\t\tЖив. преграды 1 " + el.livePregradiOneFIMespl +
                                        "\nШифр преграды 2           " + el.codePregradiTwoFIMespl + "   " + "\t\t\tЖив. преграды 2 " + el.livePregradiTwoFIMespl +
                                        "\nЖивуч. системы            " + el.liveSystemFIMespl + "   " + "\t\t\tПред. живуч. системы " + el.prevLiveSystemFIMespl +
                                        "\nШифр, наименование ствола " + el.codeNameStFIMespl + "   " + el.nameNameStFIMespl +
                                        "\nЖивуч. ствола             " + el.liveStFIMespl + "   " + "\t\t\tПред. живуч. ствола " + el.prevLiveStFIMespl +
                                        "\nШифр, наименование стенда " + el.codeNameStandFIMespl + "   " + el.nameNameStandFIMespl +
                                        "\nЖивуч. стенда             " + el.liveStandFIMespl + "   " + "\t\t\tПред. живуч. стенда " + el.prevLiveStandFIMespl +
                                        "\nКоэф. амор. гильзы        " + el.koefAmorGilzFIMespl + "   " + "\t\t\tКоэф. привед. заряда " + el.koefPrivedZarFIMespl +
                                        "\nКоэф. прив. выстрела      " + el.koefPrivShotFIMespl + "   " + "\t\t\tУслов. кол. звеньев " + el.uslCountZvFIMespl +
                                        "\nШифр ед. измерения        " + el.codeEdIzmFIMespl + "   " + el.nameEdIzmFIMespl;
                    }
                MessageBox.Show("Унифицированная форматка испытаний\n" + ufiInVKstr, "УФИ", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                functionMessageShow(2, "Выберите ведомость комплектации для отображения УФИ");
            }
        }

        //Кнопка отмены добавления и редактирования
        private void button91_Click(object sender, EventArgs e)
        {
            functionDisableShoeNewVKMespl();
        }

        //Функция отмены отображения добавления и редактирования
        private void functionDisableShoeNewVKMespl()
        {
            button89.Visible = true;
            button92.Visible = true;
            button93.Visible = true;
            button94.Visible = true;
            button95.Visible = true;
            button96.Visible = true;
            button89.Visible = false;
            button90.Visible = false;
            button91.Visible = false;
            button97.Visible = true;
            button98.Visible = true;
            button99.Visible = true;
            button100.Visible = true;
            comboBox6.Visible = true;
            comboBox7.Visible = true;
            textBox75.ReadOnly = true;
            textBox79.ReadOnly = true;
            listBox1.Height = 220;
            textBox102.Visible = false;
            textBox103.Visible = false;
            textBox104.Visible = false;
            button101.Visible = false;
            button112.Visible = false;
            spVKMesplEdit = false;
            functionShowVKMespl(positionVKMesplList);
        }

        //Кнопка добавления
        private void button95_Click(object sender, EventArgs e)
        {
            functionShowVKMespl(-1);
            spVKMesplEdit = true;
            button89.Visible = false;
            button92.Visible = false;
            button93.Visible = false;
            button94.Visible = false;
            button95.Visible = false;
            button96.Visible = false;
            button90.Visible = true;
            button91.Visible = true;
            button97.Visible = false;
            button98.Visible = false;
            button99.Visible = false;
            button100.Visible = false;
            comboBox6.Visible = false;
            comboBox7.Visible = false;
            textBox75.ReadOnly = false;
            textBox79.ReadOnly = false;
            listBox1.Height = 150;
            textBox102.Visible = true;
            textBox103.Visible = true;
            textBox104.Visible = true;
            button101.Visible = true;
            button112.Visible = true;
            textBox102.Text = "";
            textBox103.Text = "";
            textBox104.Text = "";
        }

        //Добавление комплектующего элемента
        private void button112_Click(object sender, EventArgs e)
        {
            bool proverkaShifrov = true;
            if (!functionProverkaElementsInList(textBox102.Text))
            {
                proverkaShifrov = false;
                functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
            }
            if (!functionProverkaEdIzmInList(textBox103.Text))
            {
                proverkaShifrov = false;
                functionMessageShow(1, "Ед. измерения с данным кодом отсутствует в справочнике!");
            }
            if (textBox104.Text.Length == 0)
            {
                proverkaShifrov = false;
                functionMessageShow(1, "Необходимо написать количество комплектующих!");
            }
            if (textBox104.Text.Length > 0 && Convert.ToDouble(textBox104.Text) <= 0)
            {
                proverkaShifrov = false;
                functionMessageShow(1, "Необходимо написать количество комплектующих больше 0!");
            }
            if (proverkaShifrov)
            {
                listBox1.Items.Add("            " + textBox102.Text + "\t\t           " + textBox103.Text + "\t\t       " + textBox104.Text);
                textBox102.Text = "";
                textBox103.Text = "";
                textBox104.Text = "";
            }
        }

        //Удаление комплектующего элемента
        private void button101_Click(object sender, EventArgs e)
        {
            if (listBox1.SelectedIndex > 0)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить комплектующий элемент?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    listBox1.Items.Remove(listBox1.Items[listBox1.SelectedIndex]);
                }
            }
        }

        //Функция проверки наличия элемента в справочнике
        private bool functionProverkaElementsInList(string code)
        {
            bool proverkaElement = false;
            foreach (ClassElements el in elementsList)
                if (el.getCode() == code)
                {
                    proverkaElement = true;
                    break;
                }
            return proverkaElement;
        }

        //Кнопка редактировать
        private void button94_Click(object sender, EventArgs e)
        {
            button92.Visible = false;
            button93.Visible = false;
            button94.Visible = false;
            button95.Visible = false;
            button96.Visible = false;
            button89.Visible = true;
            button91.Visible = true;
            button97.Visible = false;
            button98.Visible = false;
            button99.Visible = false;
            button100.Visible = false;
            comboBox6.Visible = false;
            comboBox7.Visible = false;
            textBox75.ReadOnly = false;
            textBox79.ReadOnly = false;
            listBox1.Height = 150;
            textBox102.Visible = true;
            textBox103.Visible = true;
            textBox104.Visible = true;
            button101.Visible = true;
            button112.Visible = true;
            textBox102.Text = "";
            textBox103.Text = "";
            textBox104.Text = "";
            spVKMesplEdit = true;           
        }

        //Выделение комплектующего элемента при создании и редактировании
        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (spVKMesplEdit)
                if (listBox1.SelectedIndex > 0)
                {
                    string[] strNewVKPr = Convert.ToString(listBox1.Items[listBox1.SelectedIndex]).Split(' ');
                    List<string> strNewVKPrBP = new List<string>();
                    foreach (string k in strNewVKPr)
                        if (k.Length > 0)
                            strNewVKPrBP.Add(k.Trim());
                    textBox102.Text = strNewVKPrBP[0];
                    textBox103.Text = strNewVKPrBP[1];
                    textBox104.Text = strNewVKPrBP[2];
                }
        }

        //Кнопка подтверждение добавления
        private void button90_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox75.Text) && !string.IsNullOrWhiteSpace(textBox79.Text))
            {
                if (functionSearchIDFIMespl(textBox75.Text, textBox79.Text) != -1)
                {
                    string strCodeElPr = textBox75.Text;
                    string strCodeVidPr = textBox79.Text;
                    int idFIMespl = functionSearchIDFIMespl(strCodeElPr, strCodeVidPr);
                    ClassFI searchFIMespl = functionSearchFIMespl(strCodeElPr, strCodeVidPr);
                    bool proverkaVKMespl = true;
                    foreach (ClassVKMespl el in vkMesplList)
                        if (el.idFIMespl == idFIMespl)
                            proverkaVKMespl = false;
                    foreach (ClassVKMespl el in vkMesplSbList)
                        if (el.idFIMespl == idFIMespl)
                            proverkaVKMespl = false;
                    if (proverkaVKMespl)
                    {
                        List<List<string>> newVK = new List<List<string>>();
                        for (int i = 1; i < listBox1.Items.Count; i++)
                        {
                            string[] strNewVKPr = Convert.ToString(listBox1.Items[i]).Split(' ');
                            List<string> strNewVKPrBP = new List<string>();
                            foreach (string k in strNewVKPr)
                                if (k.Length > 0)
                                    strNewVKPrBP.Add(k.Trim());
                            newVK.Add(strNewVKPrBP);
                        }
                        if (newVK.Count > 0)
                        {
                            bool proverkaAddNewData = false;
                            ClassVKMespl newVkMespl = new ClassVKMespl();
                            newVkMespl.idFIMespl = searchFIMespl.id;
                            newVkMespl.codeElementVKMespl = searchFIMespl.codeElementFIMespl;
                            newVkMespl.indexElementVKMespl = searchFIMespl.indexElementFIMespl;
                            newVkMespl.pictureElementVKMespl = searchFIMespl.pictureElementFIMespl;
                            newVkMespl.nameElementVKMespl = searchFIMespl.nameElementFIMespl;
                            newVkMespl.codeVidIspVKMespl = searchFIMespl.codeVidIspFIMespl;
                            newVkMespl.nameVidIspVKMespl = searchFIMespl.nameVidIspFIMespl;
                            if (newVkMespl.codeVidIspVKMespl == "098" || newVkMespl.codeVidIspVKMespl == "099" || newVkMespl.codeVidIspVKMespl == "205" || newVkMespl.codeVidIspVKMespl == "206" || newVkMespl.codeVidIspVKMespl == "207" || newVkMespl.codeVidIspVKMespl == "239")
                                vkMesplSbList.Add(newVkMespl);
                            else
                                vkMesplList.Add(newVkMespl);
                            foreach (List<string> k2 in newVK)
                            {
                                int idVKElement = functionSearchIDElInSp(k2[0]);
                                int idVKEdIzm = functionSearcgIDEdIzmInSp(k2[1]);
                                if (idVKElement > 0 && idVKEdIzm > 0)
                                {
                                    SQLiteCommand command = new SQLiteCommand("INSERT INTO [VKMespl] (idFIMespl,idElementVKMespl,edIzmVKMespl,countVKMespl) VALUES (@idFIMespl,@idElementVKMespl,@edIzmVKMespl,@countVKMespl)", sqliteConnection);
                                    command.Parameters.AddWithValue("idFIMespl", idFIMespl);
                                    command.Parameters.AddWithValue("idElementVKMespl", idVKElement);
                                    command.Parameters.AddWithValue("edIzmVKMespl", idVKEdIzm);
                                    command.Parameters.AddWithValue("countVKMespl", Convert.ToDouble(k2[2]));
                                    sqliteConnection.Open();
                                    command.ExecuteNonQuery();
                                    sqliteConnection.Close();
                                    ClassVKMesplElements newVkMesplElement = new ClassVKMesplElements();
                                    newVkMesplElement.listElements.Add(newVkMespl);
                                    //Добавление элемента
                                    ClassVKMesplElements el = new ClassVKMesplElements();
                                    el.id = idVKElement;
                                    el.countVKMespl = Convert.ToDouble(k2[2]);
                                    ClassEdIzm prEdIzm = functionSearchEdIzmInSp(k2[1]);
                                    el.codeEdIzmVKMespl = Convert.ToString(prEdIzm.code2);
                                    el.nameEdIzmVKMespl = Convert.ToString(prEdIzm.fName);
                                    int prIdElement = idVKElement;
                                    string prIdVKMespl = strCodeElPr;
                                    int prIdFIMespl = idFIMespl;
                                    foreach (ClassElements element in elementsList)
                                        if (element.getId() == prIdElement)
                                        {
                                            el.el = element;
                                            //MessageBox.Show(element.getCode());
                                            break;
                                        }
                                    foreach (ClassVKMespl element in vkMesplList)
                                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                                        {
                                            element.listElements.Add(el);
                                            //Если такой элемент уже встречался
                                            bool proverkaInVKMesplElement = true;
                                            if (vkMesplElementList.Count > 0)
                                                foreach (ClassVKMesplElements k in vkMesplElementList)
                                                    if (k.el == el.el)
                                                    {
                                                        k.listElements.Add(element);
                                                        k.listElementsCount.Add(el.countVKMespl);
                                                        proverkaInVKMesplElement = false;
                                                    }
                                            if (proverkaInVKMesplElement)
                                            {
                                                el.listElements.Add(element);
                                                el.listElementsCount.Add(el.countVKMespl);
                                                vkMesplElementList.Add(el);
                                            }
                                        }
                                    foreach (ClassVKMespl element in vkMesplSbList)
                                        if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                                        {
                                            element.listElements.Add(el);
                                            //Если такой элемент уже встречался
                                            bool proverkaInVKMesplElement = true;
                                            if (vkMesplSbElementList.Count > 0)
                                                foreach (ClassVKMesplElements k in vkMesplSbElementList)
                                                    if (k.el == el.el)
                                                    {
                                                        k.listElements.Add(element);
                                                        k.listElementsCount.Add(el.countVKMespl);
                                                        proverkaInVKMesplElement = false;
                                                    }
                                            if (proverkaInVKMesplElement)
                                            {
                                                el.listElements.Add(element);
                                                el.listElementsCount.Add(el.countVKMespl);
                                                vkMesplSbElementList.Add(el);
                                            }
                                        }
                                    proverkaAddNewData = true;
                                }
                                else
                                {
                                    functionMessageShow(1, "Ошибка при добавлении элемента " + k2[0] + "!");
                                }
                            }
                            if (proverkaAddNewData)
                            {
                                functionMessageShow(2, "Данные успешно добавлены");
                                //functionQueryVK(false);
                                functionDisableShoeNewVKMespl();
                                positionVKMesplList = vkMesplList.Count - 1;
                                functionShowVKMespl(positionVKMesplList);
                            }
                        }
                        else
                        {
                            functionMessageShow(1, "Необходимо добавить комплектующий элемент!");
                        }
                    }
                    else
                    {
                        functionMessageShow(1, "Ведомость комплектации для данной форматки уже существует!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Не найденна форматка испытания с данным кодом испытуемого элемента и вида испытания!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Испытуемый элемент' и 'Вид испытания' должны быть заполнены!");
            }
        }

        //Кнопка подтверждение редактирования
        private void button89_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox75.Text) && !string.IsNullOrWhiteSpace(textBox79.Text))
            {
                if (functionSearchIDFIMespl(textBox75.Text, textBox79.Text) != -1)
                {
                    string strCodeElPr = textBox75.Text;
                    string strCodeVidPr = textBox79.Text;
                    ClassFI searchFIMespl = functionSearchFIMespl(strCodeElPr, strCodeVidPr);
                    int idFIMespl = searchFIMespl.id;
                    List<List<string>> newVK = new List<List<string>>();
                    for (int i = 1; i < listBox1.Items.Count; i++)
                    {
                        string[] strNewVKPr = Convert.ToString(listBox1.Items[i]).Split(' ');
                        List<string> strNewVKPrBP = new List<string>();
                        foreach (string k in strNewVKPr)
                            if (k.Length > 0)
                                strNewVKPrBP.Add(k.Trim());
                        newVK.Add(strNewVKPrBP);
                    }
                    if (newVK.Count > 0)
                    {
                        bool proverkaAddNewData = false;
                        SQLiteCommand command = new SQLiteCommand("DELETE FROM [VKMespl] WHERE [idFIMespl]=@idFIMespl", sqliteConnection);
                        command.Parameters.AddWithValue("idFIMespl", textBox81.Text);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        //Удаление элемента из коллекции
                        if (searchFIMespl.codeVidIspFIMespl != "098" || searchFIMespl.codeVidIspFIMespl != "099" || searchFIMespl.codeVidIspFIMespl != "205" || searchFIMespl.codeVidIspFIMespl != "206" || searchFIMespl.codeVidIspFIMespl != "207" || searchFIMespl.codeVidIspFIMespl != "239")
                        {
                            foreach (ClassVKMesplElements el in vkMesplElementList.ToArray())
                            {
                                int indexEl = 0;
                                bool isElementInList = false;
                                foreach (ClassVKMespl vk in el.listElements)
                                {
                                    if (vk == vkMesplList[positionVKMesplList])
                                    {
                                        isElementInList = true;
                                        break;
                                    }
                                    else
                                        indexEl++;
                                }
                                if (isElementInList)
                                {
                                    el.listElements.RemoveAt(indexEl);
                                    el.listElementsCount.RemoveAt(indexEl);
                                    if (el.listElements.Count == 0)
                                        vkMesplElementList.Remove(el);
                                }
                            }
                            vkMesplList.Remove(vkMesplList[positionVKMesplList]);
                        }
                        else
                        {
                            foreach (ClassVKMesplElements el in vkMesplSbElementList.ToArray())
                            {
                                int indexEl = 0;
                                bool isElementInList = false;
                                foreach (ClassVKMespl vk in el.listElements)
                                {
                                    if (vk == vkMesplSbList[positionVKMesplList])
                                    {
                                        isElementInList = true;
                                        break;
                                    }
                                    else
                                        indexEl++;
                                }
                                if (isElementInList)
                                {
                                    el.listElements.RemoveAt(indexEl);
                                    el.listElementsCount.RemoveAt(indexEl);
                                    if (el.listElements.Count == 0)
                                        vkMesplSbElementList.Remove(el);
                                }
                            }
                            vkMesplSbList.Remove(vkMesplSbList[positionVKMesplList]);
                        }
                        //Создание нового элемента
                        ClassVKMespl newVkMespl = new ClassVKMespl();
                        newVkMespl.idFIMespl = searchFIMespl.id;
                        newVkMespl.codeElementVKMespl = searchFIMespl.codeElementFIMespl;
                        newVkMespl.indexElementVKMespl = searchFIMespl.indexElementFIMespl;
                        newVkMespl.pictureElementVKMespl = searchFIMespl.pictureElementFIMespl;
                        newVkMespl.nameElementVKMespl = searchFIMespl.nameElementFIMespl;
                        newVkMespl.codeVidIspVKMespl = searchFIMespl.codeVidIspFIMespl;
                        newVkMespl.nameVidIspVKMespl = searchFIMespl.nameVidIspFIMespl;
                        if (newVkMespl.codeVidIspVKMespl == "098" || newVkMespl.codeVidIspVKMespl == "099" || newVkMespl.codeVidIspVKMespl == "205" || newVkMespl.codeVidIspVKMespl == "206" || newVkMespl.codeVidIspVKMespl == "207" || newVkMespl.codeVidIspVKMespl == "239")
                            vkMesplSbList.Add(newVkMespl);
                        else
                            vkMesplList.Add(newVkMespl);
                        foreach (List<string> k2 in newVK)
                        {
                            int idVKElement = functionSearchIDElInSp(k2[0]);
                            int idVKEdIzm = functionSearcgIDEdIzmInSp(k2[1]);
                            if (idVKElement > 0 && idVKEdIzm > 0)
                            {
                                command = new SQLiteCommand("INSERT INTO [VKMespl] (idFIMespl,idElementVKMespl,edIzmVKMespl,countVKMespl) VALUES (@idFIMespl,@idElementVKMespl,@edIzmVKMespl,@countVKMespl)", sqliteConnection);
                                command.Parameters.AddWithValue("idFIMespl", idFIMespl);
                                command.Parameters.AddWithValue("idElementVKMespl", idVKElement);
                                command.Parameters.AddWithValue("edIzmVKMespl", idVKEdIzm);
                                command.Parameters.AddWithValue("countVKMespl", Convert.ToDouble(k2[2]));
                                sqliteConnection.Open();
                                command.ExecuteNonQuery();
                                sqliteConnection.Close();
                                ClassVKMesplElements el = new ClassVKMesplElements();
                                el.id = idVKElement;
                                el.countVKMespl = Convert.ToDouble(k2[2]);
                                ClassEdIzm prEdIzm = functionSearchEdIzmInSp(k2[1]);
                                el.codeEdIzmVKMespl = Convert.ToString(prEdIzm.code2);
                                el.nameEdIzmVKMespl = Convert.ToString(prEdIzm.fName);
                                int prIdElement = idVKElement;
                                string prIdVKMespl = strCodeElPr;
                                int prIdFIMespl = idFIMespl;
                                foreach (ClassElements element in elementsList)
                                    if (element.getId() == prIdElement)
                                    {
                                        el.el = element;
                                        //MessageBox.Show(element.getCode());
                                        break;
                                    }
                                foreach (ClassVKMespl element in vkMesplList)
                                    if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                                    {
                                        element.listElements.Add(el);
                                        //Если такой элемент уже встречался
                                        bool proverkaInVKMesplElement = true;
                                        if (vkMesplElementList.Count > 0)
                                            foreach (ClassVKMesplElements k in vkMesplElementList)
                                                if (k.el == el.el)
                                                {
                                                    k.listElements.Add(element);
                                                    k.listElementsCount.Add(el.countVKMespl);
                                                    proverkaInVKMesplElement = false;
                                                }
                                        if (proverkaInVKMesplElement)
                                        {
                                            el.listElements.Add(element);
                                            el.listElementsCount.Add(el.countVKMespl);
                                            vkMesplElementList.Add(el);
                                        }
                                    }
                                foreach (ClassVKMespl element in vkMesplSbList)
                                    if (element.codeElementVKMespl == prIdVKMespl && element.idFIMespl == prIdFIMespl)
                                    {
                                        element.listElements.Add(el);
                                        //Если такой элемент уже встречался
                                        bool proverkaInVKMesplElement = true;
                                        if (vkMesplSbElementList.Count > 0)
                                            foreach (ClassVKMesplElements k in vkMesplSbElementList)
                                                if (k.el == el.el)
                                                {
                                                    k.listElements.Add(element);
                                                    k.listElementsCount.Add(el.countVKMespl);
                                                    proverkaInVKMesplElement = false;
                                                }
                                        if (proverkaInVKMesplElement)
                                        {
                                            el.listElements.Add(element);
                                            el.listElementsCount.Add(el.countVKMespl);
                                            vkMesplSbElementList.Add(el);
                                        }
                                    }
                                proverkaAddNewData = true;
                            }
                            else
                            {
                                functionMessageShow(1, "Ошибка при добавлении элемента " + k2[0] + "!");
                            }
                        }
                        if (proverkaAddNewData)
                        {
                            functionMessageShow(2, "Данные успешно изменены");
                            //functionQueryVK(false);
                            functionDisableShoeNewVKMespl();
                            functionShowVKMespl(positionVKMesplList);
                        }
                    }
                    else
                    {
                        functionMessageShow(1, "Необходимо добавить комплектующий элемент!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Не найденна форматка испытания с данным кодом испытуемого элемента и вида испытания!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Испытуемый элемент' и 'Вид испытания' должны быть заполнены!");
            }
        }
        //------------------------------ПЛАН ИСПЫТАНИЙ------------------------------
        private void button73_Click(object sender, EventArgs e)
        {
            Form11 form11 = new Form11();
            form11.ShowDialog();
            if (form11.exitAgree)
            {
                functionShowVIspMespl(-1);
                functionQueryFI();
                if (form11.strFunction)
                {
                    label96.Text = "ПЛАН ИСПЫТАНИЙ НА " + form11.numericUpDown1.Text + " ГОД";
                    label111.Visible = false;
                    label112.Visible = false;
                    label113.Visible = false;
                    textBox89.Visible = false;
                    textBox90.Visible = false;
                    textBox91.Visible = false;
                    label115.Text = "Примечание";
                    vOrPlIspMespl = true;

                    label104.Visible = true;
                    textBox88.Visible = true;
                    label118.Visible = true;
                    label105.Visible = true;
                    label106.Visible = true;
                    label107.Visible = true;
                    label108.Visible = true;
                    label109.Visible = true;
                    label110.Visible = true;
                    textBox92.Visible = true;
                    textBox93.Visible = true;
                    textBox94.Visible = true;
                    textBox95.Visible = true;
                    textBox96.Visible = true;
                    yearVIspMespl = form11.numericUpDown1.Text;
                    functionQueryVIspMespl(yearVIspMespl);
                    positionVIspMesplList = 0;
                    functionShowVIspMespl(positionVIspMesplList);
                }
                else
                {
                    label96.Text = "ПЛАН ИСПЫТАНИЙ НА " + form11.comboBox1.Text + " " + form11.numericUpDown1.Text + " ГОДА";
                    label111.Visible = true;
                    label112.Visible = true;
                    label113.Visible = true;
                    textBox89.Visible = true;
                    textBox90.Visible = true;
                    textBox91.Visible = true;
                    label115.Text = "№, дата ГОСЗАКАЗА";
                    vOrPlIspMespl = false;

                    label104.Visible = false;
                    textBox88.Visible = false;
                    label118.Visible = false;
                    label105.Visible = false;
                    label106.Visible = false;
                    label107.Visible = false;
                    label108.Visible = false;
                    label109.Visible = false;
                    label110.Visible = false;
                    textBox92.Visible = false;
                    textBox93.Visible = false;
                    textBox94.Visible = false;
                    textBox95.Visible = false;
                    textBox96.Visible = false;
                    yearPlIspMespl = form11.numericUpDown1.Text;
                    monthPlIspMespl = form11.comboBox1.Text;
                    functionQueryPlIspMespl(monthPlIspMespl, yearPlIspMespl);
                    positionPlIspMesplList = 0;
                    functionShowVIspMespl(positionPlIspMesplList);
                }
                panel9.Visible = false;
                panel13.Visible = true;
            }
        }

        private void button111_Click(object sender, EventArgs e)
        {
            functionCancelMespl();
        }

        //Функция отображение объема испытаний
        private void functionShowVIspMespl(int pos)
        {
            if (!spVIspMesplEdit && !spPlIspMesplEdit)
            {
                if (vOrPlIspMespl)
                    if (pos >= 0 && vIspMesplList.Count > 0)
                    {
                        textBox101.Text = Convert.ToString(vIspMesplList[pos].id);
                        //Позиции по планам
                        textBox99.Text = Convert.ToString(vIspMesplList[pos].nPosPlVIspMespl);
                        textBox100.Text = Convert.ToString(vIspMesplList[pos].nPosSvVIspMespl);
                        //Элемент
                        textBox82.Text = Convert.ToString(vIspMesplList[pos].codeElementVIspMespl);
                        textBox83.Text = Convert.ToString(vIspMesplList[pos].pictureElementVIspMespl);
                        textBox84.Text = Convert.ToString(vIspMesplList[pos].indexElementVIspMespl);
                        textBox85.Text = Convert.ToString(vIspMesplList[pos].nameElementVIspMespl);
                        //Завод
                        textBox97.Text = Convert.ToString(vIspMesplList[pos].codeFactoryVIspMespl);
                        textBox86.Text = Convert.ToString(vIspMesplList[pos].nameFactoryVIspMespl);
                        //Вид испытания
                        textBox87.Text = Convert.ToString(vIspMesplList[pos].codeVidIspVIspMespl);
                        label117.Text = Convert.ToString(vIspMesplList[pos].nameVidIspVIspMespl);
                        //Мат Часть
                        textBox88.Text = Convert.ToString(vIspMesplList[pos].codeMCVIspMespl);
                        label118.Text = Convert.ToString(vIspMesplList[pos].nameMCVIspMespl);
                        //Объем испытаний
                        textBox92.Text = Convert.ToString(vIspMesplList[pos].vYearVIspMespl);
                        textBox93.Text = Convert.ToString(vIspMesplList[pos].vOneVIspMespl);
                        textBox94.Text = Convert.ToString(vIspMesplList[pos].vTwoVIspMespl);
                        textBox95.Text = Convert.ToString(vIspMesplList[pos].vThreVIspMespl);
                        textBox96.Text = Convert.ToString(vIspMesplList[pos].vThourVIspMespl);
                        //Примечание
                        textBox98.Text = Convert.ToString(vIspMesplList[pos].commentVIspMespl);
                    }
                    else
                    {
                        textBox101.Text = "";
                        textBox99.Text = "";
                        textBox100.Text = "";
                        textBox82.Text = "";
                        textBox83.Text = "";
                        textBox84.Text = "";
                        textBox85.Text = "";
                        textBox97.Text = "";
                        textBox86.Text = "";
                        textBox87.Text = "";
                        label117.Text = "";
                        textBox88.Text = "";
                        label118.Text = "";
                        textBox93.Text = "";
                        textBox94.Text = "";
                        textBox95.Text = "";
                        textBox96.Text = "";
                        textBox98.Text = "";
                        textBox89.Text = "";
                        textBox90.Text = "";
                        textBox91.Text = "";
                        textBox92.Text = "";
                    }
                else
                    if (pos >= 0 && plIspMesplList.Count > 0)
                    {
                        textBox101.Text = Convert.ToString(plIspMesplList[pos].id);
                        //Позиции по планам
                        textBox99.Text = Convert.ToString(plIspMesplList[pos].nPosPlPlIspMespl);
                        textBox100.Text = Convert.ToString(plIspMesplList[pos].nPosSvPlIspMespl);
                        //Элемент
                        textBox82.Text = Convert.ToString(plIspMesplList[pos].codeElementPlIspMespl);
                        textBox83.Text = Convert.ToString(plIspMesplList[pos].pictureElementPlIspMespl);
                        textBox84.Text = Convert.ToString(plIspMesplList[pos].indexElementPlIspMespl);
                        textBox85.Text = Convert.ToString(plIspMesplList[pos].nameElementPlIspMespl);
                        //Завод
                        textBox97.Text = Convert.ToString(plIspMesplList[pos].codeFactoryPlIspMespl);
                        textBox86.Text = Convert.ToString(plIspMesplList[pos].nameFactoryPlIspMespl);
                        //Вид испытания
                        textBox87.Text = Convert.ToString(plIspMesplList[pos].codeVidIspPlIspMespl);
                        label117.Text = Convert.ToString(plIspMesplList[pos].nameVidIspPlIspMespl);
                        //Объем испытаний
                        textBox89.Text = Convert.ToString(plIspMesplList[pos].numberOfPartyPlIspMespl);
                        textBox90.Text = Convert.ToString(plIspMesplList[pos].countShotPlIspMespl);
                        textBox91.Text = Convert.ToString(plIspMesplList[pos].datePostPlIspMespl);
                        //Примечание
                        textBox98.Text = Convert.ToString(plIspMesplList[pos].commentPlIspMespl);
                    }
                    else
                    {
                        textBox101.Text = "";
                        textBox99.Text = "";
                        textBox100.Text = "";
                        textBox82.Text = "";
                        textBox83.Text = "";
                        textBox84.Text = "";
                        textBox85.Text = "";
                        textBox97.Text = "";
                        textBox86.Text = "";
                        textBox87.Text = "";
                        label117.Text = "";
                        textBox88.Text = "";
                        label118.Text = "";
                        textBox93.Text = "";
                        textBox94.Text = "";
                        textBox95.Text = "";
                        textBox96.Text = "";
                        textBox98.Text = "";
                        textBox89.Text = "";
                        textBox90.Text = "";
                        textBox91.Text = "";
                        textBox92.Text = "";
                    }
            }
        }

        //Позиция объема испытаний
        private void createPositionVIspMespl(int s)
        {
            if (vOrPlIspMespl)
            {
                if (s == 0)
                {
                    if (positionVIspMesplList - 1 >= 0)
                        positionVIspMesplList--;
                }
                else
                {
                    if (positionVIspMesplList + 1 < vIspMesplList.Count)
                        positionVIspMesplList++;
                }
                functionShowVIspMespl(positionVIspMesplList);
            }
            else
            {
                if (s == 0)
                {
                    if (positionPlIspMesplList - 1 >= 0)
                        positionPlIspMesplList--;
                }
                else
                {
                    if (positionPlIspMesplList + 1 < plIspMesplList.Count)
                        positionPlIspMesplList++;
                }
                functionShowVIspMespl(positionPlIspMesplList);
            }
        }
        //Кнопка назад
        private void button109_Click(object sender, EventArgs e)
        {
            createPositionVIspMespl(0);
        }

        //Кнопка вперед
        private void button105_Click(object sender, EventArgs e)
        {
            createPositionVIspMespl(1);
        }

        //Кнопка удаления объема испытаний
        private void button106_Click(object sender, EventArgs e)
        {
            if (vOrPlIspMespl)
            {
                if (positionVIspMesplList != -1)
                {
                    if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить объем испытаний?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    {
                        SQLiteCommand command = new SQLiteCommand("DELETE FROM [VIspMespl] WHERE [id]=@id", sqliteConnection);
                        command.Parameters.AddWithValue("id", textBox101.Text);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Объем испытаний успешно удален");
                        functionQueryVIspMespl(yearVIspMespl);
                        createPositionVIspMespl(0);
                    }
                }
                else
                {
                    functionMessageShow(2, "Выберите объем испытаний для удаления");
                }
            }
            else
            {
                if (positionVIspMesplList != -1)
                {
                    if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить план испытаний?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    {
                        SQLiteCommand command = new SQLiteCommand("DELETE FROM [PlIspMespl] WHERE [id]=@id", sqliteConnection);
                        command.Parameters.AddWithValue("id", textBox101.Text);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "План испытаний успешно удален");
                        functionQueryPlIspMespl(monthPlIspMespl, yearPlIspMespl);
                        createPositionVIspMespl(0);
                    }
                }
                else
                {
                    functionMessageShow(2, "Выберите объем испытаний для удаления");
                }
            }
        }

        //Кнопка добавить
        private void button108_Click(object sender, EventArgs e)
        {
            functionShowVIspMespl(-1);
            textBox99.ReadOnly = false;
            textBox100.ReadOnly = false;
            textBox82.ReadOnly = false;
            textBox97.ReadOnly = false;
            textBox87.ReadOnly = false;
            textBox88.ReadOnly = false;
            textBox93.ReadOnly = false;
            textBox94.ReadOnly = false;
            textBox95.ReadOnly = false;
            textBox96.ReadOnly = false;
            textBox98.ReadOnly = false;
            textBox89.ReadOnly = false;
            textBox90.ReadOnly = false;
            textBox91.ReadOnly = false;
            button103.Visible = true;
            button104.Visible = true;
            button102.Visible = false;
            button105.Visible = false;
            button106.Visible = false;
            button107.Visible = false;
            button108.Visible = false;
            button109.Visible = false;
            button110.Visible = false;
            button111.Visible = false;
            spVIspMesplEdit = true;
            spPlIspMesplEdit = true;
            textBox99.Focus();
        }

        //Кнопка отмены добавления и редактирования
        private void button104_Click(object sender, EventArgs e)
        {
            functionDisableShowNewIspMespl();
        }

        //Функция отмены добавления и редактирования
        private void functionDisableShowNewIspMespl()
        {
            spVIspMesplEdit = false;
            spPlIspMesplEdit = false;
            textBox99.ReadOnly = true;
            textBox100.ReadOnly = true;
            textBox82.ReadOnly = true;
            textBox97.ReadOnly = true;
            textBox87.ReadOnly = true;
            textBox88.ReadOnly = true;
            textBox93.ReadOnly = true;
            textBox94.ReadOnly = true;
            textBox95.ReadOnly = true;
            textBox96.ReadOnly = true;
            textBox98.ReadOnly = true;
            textBox89.ReadOnly = true;
            textBox90.ReadOnly = true;
            textBox91.ReadOnly = true;
            button102.Visible = false;
            button103.Visible = false;
            button104.Visible = false;
            button105.Visible = true;
            button106.Visible = true;
            button107.Visible = true;
            button108.Visible = true;
            button109.Visible = true;
            button110.Visible = true;
            button111.Visible = true;
            if (vOrPlIspMespl)
                functionShowVIspMespl(positionVIspMesplList);
            else
                functionShowVIspMespl(positionPlIspMesplList);
        }

        //Кнопка редактирования
        private void button107_Click(object sender, EventArgs e)
        {
            textBox99.ReadOnly = false;
            textBox100.ReadOnly = false;
            textBox82.ReadOnly = false;
            textBox97.ReadOnly = false;
            textBox87.ReadOnly = false;
            textBox88.ReadOnly = false;
            textBox93.ReadOnly = false;
            textBox94.ReadOnly = false;
            textBox95.ReadOnly = false;
            textBox96.ReadOnly = false;
            textBox98.ReadOnly = false;
            textBox89.ReadOnly = false;
            textBox90.ReadOnly = false;
            textBox91.ReadOnly = false;
            button104.Visible = true;
            button103.Visible = false;
            button102.Visible = true;
            button105.Visible = false;
            button106.Visible = false;
            button107.Visible = false;
            button108.Visible = false;
            button109.Visible = false;
            button110.Visible = false;
            button111.Visible = false;
            spVIspMesplEdit = true;
            spPlIspMesplEdit = true;
            textBox99.Focus();
        }

        //Подтверждение добавления
        private void button103_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox82.Text) && !string.IsNullOrWhiteSpace(textBox82.Text) && !string.IsNullOrEmpty(textBox97.Text) && !string.IsNullOrWhiteSpace(textBox97.Text) && !string.IsNullOrEmpty(textBox87.Text) && !string.IsNullOrWhiteSpace(textBox87.Text))
            {
                if (functionSearchIDFIMespl(textBox82.Text, textBox87.Text) != -1)
                {
                    if (vOrPlIspMespl)
                    {
                        bool proverkaVIspMespl = true;
                        bool proverkaShifrov = true;
                        foreach (ClassVIspMespl el in vIspMesplList)
                            if (el.codeElementVIspMespl == textBox82.Text && el.codeFactoryVIspMespl == textBox97.Text && el.codeVidIspVIspMespl == textBox87.Text)
                                proverkaVIspMespl = false;
                        if (!functionProverkaFactorysInList(textBox97.Text))
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Завод с данным кодом отсутствует в справочнике!");
                        }
                        if (proverkaVIspMespl && proverkaShifrov)
                        {
                            SQLiteCommand command;
                            if(textBox88.Text.Length > 0)
                                command = new SQLiteCommand("INSERT INTO [VIspMespl] (codeElementVIspMespl,codeFactoryVIspMespl,codeVidIspVIspmespl,codeMCVIspMespl,vOneVIspmespl,vTwoVIspmespl,vThreVIspmespl,vThourVIspmespl,nPosPlVIspmespl,nPosSvVIspmespl,commentVIspmespl,yearVIspMespl) VALUES (@codeElementVIspMespl,@codeFactoryVIspMespl,@codeVidIspVIspmespl,@codeMCVIspMespl,@vOneVIspmespl,@vTwoVIspmespl,@vThreVIspmespl,@vThourVIspmespl,@nPosPlVIspmespl,@nPosSvVIspmespl,@commentVIspmespl,@yearVIspMespl)", sqliteConnection);
                            else
                                command = new SQLiteCommand("INSERT INTO [VIspMespl] (codeElementVIspMespl,codeFactoryVIspMespl,codeVidIspVIspmespl,vOneVIspmespl,vTwoVIspmespl,vThreVIspmespl,vThourVIspmespl,nPosPlVIspmespl,nPosSvVIspmespl,commentVIspmespl,yearVIspMespl) VALUES (@codeElementVIspMespl,@codeFactoryVIspMespl,@codeVidIspVIspmespl,@vOneVIspmespl,@vTwoVIspmespl,@vThreVIspmespl,@vThourVIspmespl,@nPosPlVIspmespl,@nPosSvVIspmespl,@commentVIspmespl,@yearVIspMespl)", sqliteConnection);
                            //Код испытуемого элемента
                            int idElementsVIspMespl = 0;
                            foreach (ClassElements el in elementsList)
                                if (el.getCode() == textBox82.Text)
                                    idElementsVIspMespl = el.getId();
                            command.Parameters.AddWithValue("codeElementVIspMespl", idElementsVIspMespl);
                            //Код завода
                            int idFactorysVIspMespl = 0;
                            foreach (ClassFactorys el in factorysList)
                                if (el.getCode() == textBox97.Text)
                                    idFactorysVIspMespl = el.getId();
                            command.Parameters.AddWithValue("codeFactoryVIspMespl", idFactorysVIspMespl);
                            //Вид испытания
                            int idVidIspVIspMespl = 0;
                            foreach (ClassVidIsp el in vidIspList)
                                if (el.code == textBox87.Text)
                                    idVidIspVIspMespl = el.id;
                            command.Parameters.AddWithValue("codeVidIspVIspMespl", idVidIspVIspMespl);
                            //Мат Часть
                            int idMCVIspMespl = 0;
                            foreach (ClassMC el in mcList)
                                if (el.codeMC3 == textBox88.Text)
                                    idMCVIspMespl = el.id;
                            command.Parameters.AddWithValue("codeMCVIspMespl", idMCVIspMespl);
                            //Объем испытаний
                            command.Parameters.AddWithValue("vOneVIspMespl", textBox93.Text);
                            command.Parameters.AddWithValue("vTwoVIspMespl", textBox94.Text);
                            command.Parameters.AddWithValue("vThreVIspMespl", textBox95.Text);
                            command.Parameters.AddWithValue("vThourVIspMespl", textBox96.Text);
                            //Позиции
                            command.Parameters.AddWithValue("nPosPlVIspMespl", textBox99.Text);
                            command.Parameters.AddWithValue("nPosSvVIspMespl", textBox100.Text);
                            //Год
                            command.Parameters.AddWithValue("yearVIspMespl", yearVIspMespl);
                            //Комментарий
                            command.Parameters.AddWithValue("commentVIspMespl", textBox98.Text);
                            sqliteConnection.Open();
                            command.ExecuteNonQuery();
                            sqliteConnection.Close();
                            functionMessageShow(2, "Данные успешно добавлены");
                            functionQueryVIspMespl(yearVIspMespl);
                            functionDisableShowNewIspMespl();
                            positionVIspMesplList = vIspMesplList.Count - 1;
                            functionShowVIspMespl(positionVIspMesplList);
                        }
                        else
                        {
                            functionMessageShow(1, "Объем испытаний с данным кодом элемента, заводом изготовителя и видом испытания уже существует!");
                        }
                    }
                    else
                    {
                        bool proverkaPlIspMespl = true;
                        foreach (ClassPlIspMespl el in plIspMesplList)
                            if (el.codeElementPlIspMespl == textBox82.Text && el.codeFactoryPlIspMespl == textBox97.Text && el.codeVidIspPlIspMespl == textBox87.Text)
                                proverkaPlIspMespl = false;
                        if (proverkaPlIspMespl)
                        {
                            SQLiteCommand command = new SQLiteCommand("INSERT INTO [PlIspMespl] (codeElementPlIspMespl,codeFactoryPlIspMespl,codeVidIspPlIspmespl,numberOfPartyPlIspMespl,countShotPlIspMespl,datePostPlIspMespl,nPosPlPlIspmespl,nPosSvPlIspmespl,commentPlIspMespl,yearPlIspMespl,monthPlIspMespl) VALUES (@codeElementPlIspMespl,@codeFactoryPlIspMespl,@codeVidIspPlIspmespl,@numberOfPartyPlIspMespl,@countShotPlIspMespl,@datePostPlIspMespl,@nPosPlPlIspmespl,@nPosSvPlIspmespl,@commentPlIspMespl,@yearPlIspMespl,@monthPlIspMespl)", sqliteConnection);
                            //Код испытуемого элемента
                            int idElementsVIspMespl = 0;
                            foreach (ClassElements el in elementsList)
                                if (el.getCode() == textBox82.Text)
                                    idElementsVIspMespl = el.getId();
                            command.Parameters.AddWithValue("codeElementPlIspMespl", idElementsVIspMespl);
                            //Код завода
                            int idFactorysVIspMespl = 0;
                            foreach (ClassFactorys el in factorysList)
                                if (el.getCode() == textBox97.Text)
                                    idFactorysVIspMespl = el.getId();
                            command.Parameters.AddWithValue("codeFactoryPlIspMespl", idFactorysVIspMespl);
                            //Вид испытания
                            int idVidIspVIspMespl = 0;
                            foreach (ClassVidIsp el in vidIspList)
                                if (el.code == textBox87.Text)
                                    idVidIspVIspMespl = el.id;
                            command.Parameters.AddWithValue("codeVidIspPlIspMespl", idVidIspVIspMespl);
                            //Данные о испытаниях
                            command.Parameters.AddWithValue("numberOfPartyPlIspMespl", textBox89.Text);
                            command.Parameters.AddWithValue("countShotPlIspMespl", textBox90.Text);
                            command.Parameters.AddWithValue("datePostPlIspMespl", textBox91.Text);
                            //Позиции
                            command.Parameters.AddWithValue("nPosPlPlIspMespl", textBox99.Text);
                            command.Parameters.AddWithValue("nPosSvPlIspMespl", textBox100.Text);
                            //Год и месяц
                            command.Parameters.AddWithValue("monthPlIspMespl", monthPlIspMespl);
                            command.Parameters.AddWithValue("yearPlIspMespl", yearPlIspMespl);
                            //Комментарий
                            command.Parameters.AddWithValue("commentPlIspMespl", textBox98.Text);
                            sqliteConnection.Open();
                            command.ExecuteNonQuery();
                            sqliteConnection.Close();
                            functionMessageShow(2, "Данные успешно добавлены");
                            functionQueryPlIspMespl(monthPlIspMespl, yearPlIspMespl);
                            functionDisableShowNewIspMespl();
                            positionPlIspMesplList = plIspMesplList.Count - 1;
                            functionShowVIspMespl(positionPlIspMesplList);
                        }
                        else
                        {
                            functionMessageShow(1, "План испытаний с данным кодом элемента, заводом изготовителя и видом испытания уже существует!");
                        }
                    }
                }
                else
                {
                    functionMessageShow(1, "Не найденна форматка испытания с данным кодом элемента и видом испытания!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код элемента','Завод изготовитель' и 'Вид испытания' должны быть заполнены!");
            }
        }

        //Подтверждение редактирования
        private void button102_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox82.Text) && !string.IsNullOrWhiteSpace(textBox82.Text) && !string.IsNullOrEmpty(textBox97.Text) && !string.IsNullOrWhiteSpace(textBox97.Text) && !string.IsNullOrEmpty(textBox87.Text) && !string.IsNullOrWhiteSpace(textBox87.Text))
            {
                if (functionSearchIDFIMespl(textBox82.Text, textBox87.Text) != -1)
                {
                    if (vOrPlIspMespl)
                    {
                        SQLiteCommand command;
                        if(textBox88.Text.Length > 0)
                            command = new SQLiteCommand("UPDATE [VIspMespl] SET [codeElementVIspMespl]=@codeElementVIspMespl,[codeFactoryVIspMespl]=@codeFactoryVIspMespl,[codeVidIspVIspMespl]=@codeVidIspVIspMespl,[codeMCVIspMespl]=@codeMCVIspMespl,[vOneVIspMespl]=@vOneVIspMespl,[vTwoVIspMespl]=@vTwoVIspMespl,[vThreVIspMespl]=@vThreVIspMespl,[vThourVIspMespl]=@vThourVIspMespl,[nPosPlVIspMespl]=@nPosPlVIspMespl,[nPosSvVIspMespl]=@nPosSvVIspMespl,[commentVIspmespl]=@commentVIspmespl,[yearVIspMespl]=@yearVIspMespl WHERE [id]=@id", sqliteConnection);
                        else
                            command = new SQLiteCommand("UPDATE [VIspMespl] SET [codeElementVIspMespl]=@codeElementVIspMespl,[codeFactoryVIspMespl]=@codeFactoryVIspMespl,[codeVidIspVIspMespl]=@codeVidIspVIspMespl,[vOneVIspMespl]=@vOneVIspMespl,[vTwoVIspMespl]=@vTwoVIspMespl,[vThreVIspMespl]=@vThreVIspMespl,[vThourVIspMespl]=@vThourVIspMespl,[nPosPlVIspMespl]=@nPosPlVIspMespl,[nPosSvVIspMespl]=@nPosSvVIspMespl,[commentVIspmespl]=@commentVIspmespl,[yearVIspMespl]=@yearVIspMespl WHERE [id]=@id", sqliteConnection);
                        command.Parameters.AddWithValue("id", textBox101.Text);
                        //Код испытуемого элемента
                        int idElementsVIspMespl = 0;
                        foreach (ClassElements el in elementsList)
                            if (el.getCode() == textBox82.Text)
                                idElementsVIspMespl = el.getId();
                        command.Parameters.AddWithValue("codeElementVIspMespl", idElementsVIspMespl);
                        //Код завода
                        int idFactorysVIspMespl = 0;
                        foreach (ClassFactorys el in factorysList)
                            if (el.getCode() == textBox97.Text)
                                idFactorysVIspMespl = el.getId();
                        command.Parameters.AddWithValue("codeFactoryVIspMespl", idFactorysVIspMespl);
                        //Вид испытания
                        int idVidIspVIspMespl = 0;
                        foreach (ClassVidIsp el in vidIspList)
                            if (el.code == textBox87.Text)
                                idVidIspVIspMespl = el.id;
                        command.Parameters.AddWithValue("codeVidIspVIspMespl", idVidIspVIspMespl);
                        //Мат Часть
                        int idMCVIspMespl = 0;
                        foreach (ClassMC el in mcList)
                            if (el.codeMC3 == textBox88.Text)
                                idMCVIspMespl = el.id;
                        command.Parameters.AddWithValue("codeMCVIspMespl", idMCVIspMespl);
                        //Объем испытаний
                        command.Parameters.AddWithValue("vOneVIspMespl", textBox93.Text);
                        command.Parameters.AddWithValue("vTwoVIspMespl", textBox94.Text);
                        command.Parameters.AddWithValue("vThreVIspMespl", textBox95.Text);
                        command.Parameters.AddWithValue("vThourVIspMespl", textBox96.Text);
                        //Позиции
                        command.Parameters.AddWithValue("nPosPlVIspMespl", textBox99.Text);
                        command.Parameters.AddWithValue("nPosSvVIspMespl", textBox100.Text);
                        //Год
                        command.Parameters.AddWithValue("yearVIspMespl", yearVIspMespl);
                        //Комментарий
                        command.Parameters.AddWithValue("commentVIspMespl", textBox98.Text);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно обновлены");
                        functionQueryVIspMespl(yearVIspMespl);
                        functionDisableShowNewIspMespl();
                        functionShowVIspMespl(positionVIspMesplList);
                    }
                    else
                    {
                        SQLiteCommand command = new SQLiteCommand("UPDATE [PlIspMespl] SET [codeElementPlIspMespl]=@codeElementPlIspMespl,[codeFactoryPlIspMespl]=@codeFactoryPlIspMespl,[codeVidIspPlIspMespl]=@codeVidIspPlIspMespl,[numberOfPartyPlIspMespl]=@numberOfPartyPlIspMespl,[countShotPlIspMespl]=@countShotPlIspMespl,[datePostPlIspMespl]=@datePostPlIspMespl,[nPosPlPlIspMespl]=@nPosPlPlIspMespl,[nPosSvPlIspMespl]=@nPosSvPlIspMespl,[commentPlIspMespl]=@commentPlIspMespl,[yearPlIspMespl]=@yearPlIspMespl,[monthPlIspMespl]=@monthPlIspMespl WHERE [id]=@id", sqliteConnection);
                        command.Parameters.AddWithValue("id", textBox101.Text);
                        //Код испытуемого элемента
                        int idElementsVIspMespl = 0;
                        foreach (ClassElements el in elementsList)
                            if (el.getCode() == textBox82.Text)
                                idElementsVIspMespl = el.getId();
                        command.Parameters.AddWithValue("codeElementPlIspMespl", idElementsVIspMespl);
                        //Код завода
                        int idFactorysVIspMespl = 0;
                        foreach (ClassFactorys el in factorysList)
                            if (el.getCode() == textBox97.Text)
                                idFactorysVIspMespl = el.getId();
                        command.Parameters.AddWithValue("codeFactoryPlIspMespl", idFactorysVIspMespl);
                        //Вид испытания
                        int idVidIspVIspMespl = 0;
                        foreach (ClassVidIsp el in vidIspList)
                            if (el.code == textBox87.Text)
                                idVidIspVIspMespl = el.id;
                        command.Parameters.AddWithValue("codeVidIspPlIspMespl", idVidIspVIspMespl);
                        //Данные о испытаниях
                        command.Parameters.AddWithValue("numberOfPartyPlIspMespl", textBox89.Text);
                        command.Parameters.AddWithValue("countShotPlIspMespl", textBox90.Text);
                        command.Parameters.AddWithValue("datePostPlIspMespl", textBox91.Text);
                        //Позиции
                        command.Parameters.AddWithValue("nPosPlPlIspMespl", textBox99.Text);
                        command.Parameters.AddWithValue("nPosSvPlIspMespl", textBox100.Text);
                        //Год и месяц
                        command.Parameters.AddWithValue("monthPlIspMespl", monthPlIspMespl);
                        command.Parameters.AddWithValue("yearPlIspMespl", yearPlIspMespl);
                        //Комментарий
                        command.Parameters.AddWithValue("commentPlIspMespl", textBox98.Text);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно обновлены");
                        functionQueryPlIspMespl(monthPlIspMespl, yearPlIspMespl);
                        functionDisableShowNewIspMespl();
                        functionShowVIspMespl(positionPlIspMesplList);
                    }
                }
                else
                {
                    functionMessageShow(1, "Не найденна форматка испытания с данным кодом элемента и видом испытания!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код элемента','Завод изготовитель' и 'Вид испытания' должны быть заполнены!");
            }
        }

        private void textBox93_Leave(object sender, EventArgs e)
        {
            functionReShetVIspMespl();
        }

        private void textBox94_Leave(object sender, EventArgs e)
        {
            functionReShetVIspMespl();
        }

        private void textBox95_Leave(object sender, EventArgs e)
        {
            functionReShetVIspMespl();
        }

        private void textBox96_Leave(object sender, EventArgs e)
        {
            functionReShetVIspMespl();
        }

        //Функция пересчета объема испытаний за год
        private void functionReShetVIspMespl()
        {
            if (spVIspMesplEdit || spPlIspMesplEdit)
            {
                int prResVIspMespl = 0;
                if (textBox93.Text.Length > 0)
                    prResVIspMespl += Convert.ToInt32(textBox93.Text);
                if (textBox94.Text.Length > 0)
                    prResVIspMespl += Convert.ToInt32(textBox94.Text);
                if (textBox95.Text.Length > 0)
                    prResVIspMespl += Convert.ToInt32(textBox95.Text);
                if (textBox96.Text.Length > 0)
                    prResVIspMespl += Convert.ToInt32(textBox96.Text);
                if (prResVIspMespl > 0)
                    textBox92.Text = Convert.ToString(prResVIspMespl);
                else
                    textBox92.Text = "";
            }
        }

        //Функция проверки наличия завода в справочнике
        private bool functionProverkaFactorysInList(string code)
        {
            bool proverkaFactory = false;
            foreach (ClassFactorys el in factorysList)
                if (el.getCode() == code)
                {
                    proverkaFactory = true;
                    break;
                }
            return proverkaFactory;
        }

        //Поиск
        private void button110_Click(object sender, EventArgs e)
        {
            if (vOrPlIspMespl)
            {
                Form12 form12 = new Form12(vIspMesplList);
                form12.ShowDialog();
            }
            else
            {
                Form12 form12 = new Form12(plIspMesplList);
                form12.ShowDialog();
            }
            if (!ClassSearchStatic.exit)
            {
                if (vOrPlIspMespl)
                {
                    if (ClassSearchStatic.id != -1)
                    {
                        positionVIspMesplList = ClassSearchStatic.position;
                        functionShowVIspMespl(positionVIspMesplList);
                        ClassSearchStatic.exit = true;
                    }
                    else
                    {
                        functionMessageShow(1, "Объем испытаний с данным " + ClassSearchStatic.searchtype + " не найден!");
                    }
                }
                else
                {
                    if (ClassSearchStatic.id != -1)
                    {
                        positionPlIspMesplList = ClassSearchStatic.position;
                        functionShowVIspMespl(positionPlIspMesplList);
                        ClassSearchStatic.exit = true;
                    }
                    else
                    {
                        functionMessageShow(1, "План испытаний с данным " + ClassSearchStatic.searchtype + " не найден!");
                    }
                }
            }
        }
        //------------------------------ПОТРЕБНОСТЬ В КЭ------------------------------
        private void button75_Click(object sender, EventArgs e)
        {
            Form13 form13 = new Form13();
            form13.ShowDialog();
            if (form13.exitAgree)
            {
                yearKEMespl = form13.numericUpDown1.Text;
                monthKEMespl = form13.comboBox1.Text;
                functionQueryVIspMespl(form13.numericUpDown1.Text);
                functionQueryPlIspMespl(form13.comboBox1.Text, form13.numericUpDown1.Text);
                //functionQueryVK();
                functionQueryNoneVk();
                panel9.Visible = false;
                panel14.Visible = true;
                label119.Text = monthKEMespl + " " + yearKEMespl;
                pkEMesplList.Clear();
                pkENoneVKMesplList.Clear();
                listBox2.Items.Clear();
                textBox105.Text = "";
                textBox106.Text = "";
                textBox107.Text = "";
                label123.Text = "";
                if (plIspMesplList.Count > 0)
                {
                    functionVKEForming();
                    listBox2.Items.Clear();
                    listBox2.Items.Add("Комплектующий элемент\tЕд.измерения\t      Кол-во");
                    foreach (ClassPKEMespl el in pkEMesplList)
                    {
                        listBox2.Items.Add("             " + el.codeEKElement + "\t\t      " + el.edIzmCode + " " + el.edIzmName + "\t          " + Math.Ceiling(el.potrKE));
                    }
                    if (pkENoneVKMesplList.Count > 0)
                    {
                        listBox2.Items.Add("\tНе найдена ведомость комплектации!");
                        foreach (ClassPlIspMespl el in pkENoneVKMesplList)
                        {
                            listBox2.Items.Add("             " + el.codeElementPlIspMespl + "\t\t" + el.codeVidIspPlIspMespl + "\t" + el.codeFactoryPlIspMespl);
                        }
                    }
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }


        //Функция для формирования ведомости комплектации
        private void functionVKEForming()
        {
            foreach (ClassPlIspMespl pl in plIspMesplList)
            {
                bool proverkaPlInVK = false;
                foreach (ClassVKMespl vk in vkMesplList)
                {
                    if (pl.codeElementPlIspMespl == vk.codeElementVKMespl && pl.codeVidIspPlIspMespl == vk.codeVidIspVKMespl)
                    {
                        proverkaPlInVK = true;
                        foreach (ClassVKMesplElements el in vk.listElements)
                        {
                            bool proverkaPKE = true;
                            if (pkEMesplList.Count > 0)
                            {
                                foreach (ClassPKEMespl pk in pkEMesplList)
                                {
                                    if (pk.codeEKElement == el.el.getCode())
                                    {
                                        if (pl.countShotPlIspMespl.Length > 0)
                                            pk.potrKE += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.countShotPlIspMespl);
                                        ClassPlIspMespl pl2 = ClassPlIspMespl.Clone(pl);
                                        pk.ispEl.Add(pl2);
                                        proverkaPKE = false;
                                        break;
                                    }
                                }
                            }
                            if (proverkaPKE)
                            {
                                ClassPKEMespl pkNew = new ClassPKEMespl();
                                pkNew.codeEKElement = el.el.getCode();
                                pkNew.pictureEKElement = el.el.getPicture();
                                pkNew.indexEKElement = el.el.getIndex();
                                pkNew.nameEKElement = el.el.getName();
                                pkNew.edIzmCode = el.codeEdIzmVKMespl;
                                pkNew.edIzmName = el.nameEdIzmVKMespl;
                                if (pl.countShotPlIspMespl.Length > 0)
                                    pkNew.potrKE += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.countShotPlIspMespl);
                                pkNew.sklad = "";
                                ClassPlIspMespl pl2 = ClassPlIspMespl.Clone(pl);
                                pkNew.ispEl.Add(pl2);
                                pkEMesplList.Add(pkNew);
                            }
                        }
                    }
                }
                foreach (ClassVKMespl vk in vkMesplSbList)
                {
                    if (pl.codeElementPlIspMespl == vk.codeElementVKMespl && pl.codeVidIspPlIspMespl == vk.codeVidIspVKMespl)
                    {
                        proverkaPlInVK = true;
                        foreach (ClassVKMesplElements el in vk.listElements)
                        {
                            bool proverkaPKE = true;
                            if (pkEMesplList.Count > 0)
                            {
                                foreach (ClassPKEMespl pk in pkEMesplList)
                                {
                                    if (pk.codeEKElement == el.el.getCode())
                                    {
                                        if (pl.countShotPlIspMespl.Length > 0)
                                            pk.potrKE += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.countShotPlIspMespl);
                                        ClassPlIspMespl pl2 = ClassPlIspMespl.Clone(pl);
                                        pk.ispEl.Add(pl2);
                                        proverkaPKE = false;
                                        break;
                                    }
                                }
                            }
                            if (proverkaPKE)
                            {
                                ClassPKEMespl pkNew = new ClassPKEMespl();
                                pkNew.codeEKElement = el.el.getCode();
                                pkNew.pictureEKElement = el.el.getPicture();
                                pkNew.indexEKElement = el.el.getIndex();
                                pkNew.nameEKElement = el.el.getName();
                                pkNew.edIzmCode = el.codeEdIzmVKMespl;
                                pkNew.edIzmName = el.nameEdIzmVKMespl;
                                if (pl.countShotPlIspMespl.Length > 0)
                                    pkNew.potrKE += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.countShotPlIspMespl);
                                pkNew.sklad = "";
                                ClassPlIspMespl pl2 = ClassPlIspMespl.Clone(pl);
                                pkNew.ispEl.Add(pl2);
                                pkEMesplList.Add(pkNew);
                            }
                        }
                    }
                }
                if (!proverkaPlInVK)
                {
                    bool proverkaPlInNoneVk = true;
                    foreach (ClassNoneVk el in noneVkList)
                    {
                        if (el.codeElement == pl.codeElementPlIspMespl)
                            proverkaPlInNoneVk = false;
                    }
                    if (proverkaPlInNoneVk)
                        pkENoneVKMesplList.Add(pl);
                }
            }
        }

        //Функция для формирования обратной ведомости комплектации (для НС)
        private void functionVKENSForming()
        {
            pkENSMesplList.Clear();
            ClassCalibrList.calibrList.Clear();
            ClassPKENSMespl.elList.Clear();
            foreach (ClassPlIspMespl pl in plIspMesplList)
            {
                foreach (ClassVKMespl vk in vkMesplList)
                {
                    if (pl.codeElementPlIspMespl == vk.codeElementVKMespl && pl.codeVidIspPlIspMespl == vk.codeVidIspVKMespl)
                    {
                        ClassPKENSMespl newPkNS = new ClassPKENSMespl();
                        newPkNS.pl = pl;
                        newPkNS.vk = vk;
                        newPkNS.fi = functionSearchFIMespl(pl.codeElementPlIspMespl, pl.codeVidIspPlIspMespl);
                        pkENSMesplList.Add(newPkNS);
                    }
                }
                foreach (ClassVKMespl vk in vkMesplSbList)
                {
                    if (pl.codeElementPlIspMespl == vk.codeElementVKMespl && pl.codeVidIspPlIspMespl == vk.codeVidIspVKMespl)
                    {
                        ClassPKENSMespl newPkNS = new ClassPKENSMespl();
                        newPkNS.pl = pl;
                        newPkNS.vk = vk;
                        newPkNS.fi = functionSearchFIMespl(pl.codeElementPlIspMespl, pl.codeVidIspPlIspMespl);
                        pkENSMesplList.Add(newPkNS);
                    }
                }
            }
            sortedPKENSMesplList = pkENSMesplList.OrderBy(a => a.pl.codeFactoryPlIspMespl);
        }

        private void button113_Click(object sender, EventArgs e)
        {
            functionCancelMespl();
        }

        //Печать справки-обоснования
        private void button114_Click(object sender, EventArgs e)
        {
            //functionQueryVIspMespl(label119.Text);
            //functionQueryPlIspMespl(label120.Text, label119.Text);
            //functionQueryVK();
            if (plIspMesplList.Count > 0)
            {
                if (pkEMesplList.Count > 0)
                {
                    Form14 form14 = new Form14();
                    form14.ShowDialog();
                    if (form14.exitAgree)
                    {
                        bool printProverka = true;
                        button114.Enabled = false;
                        //Количество экземпляров
                        string countEkz = form14.textBox1.Text;
                        //Учетный номер
                        string uchNumber = form14.textBox2.Text;
                        //Месяц
                        string month = monthKEMespl;
                        //Год
                        string year = yearKEMespl;
                        //EXCEL
                        /*Excel.Application excel = new Excel.Application();
                        excel.Visible = true;
                        try
                        {
                            //excel.SheetsInNewWorkbook = 1;
                            //excel.Workbooks.Add();
                            //Открытие шаблона
                            excel.Workbooks.Open(mainDirectoryForSave+@"ШАБЛОНЫ\ШАБЛОН.xlsx");
                            excel.Cells.Replace("{countEkz}", countEkz, Excel.XlLookAt.xlPart, Excel.XlSearchOrder.xlByColumns, MatchCase: false, SearchFormat: false, ReplaceFormat: false);
                            excel.Cells.Replace("{uchNumber}", uchNumber, Excel.XlLookAt.xlPart, Excel.XlSearchOrder.xlByColumns, MatchCase: false, SearchFormat: false, ReplaceFormat: false);
                            excel.Cells.Replace("{month}", month, Excel.XlLookAt.xlPart, Excel.XlSearchOrder.xlByColumns, MatchCase: false, SearchFormat: false, ReplaceFormat: false);
                            excel.Cells.Replace("{year}", year, Excel.XlLookAt.xlPart, Excel.XlSearchOrder.xlByColumns, MatchCase: false, SearchFormat: false, ReplaceFormat: false);
                            dateNowFileName = DateTime.Now;
                            string strSaveName = Convert.ToString(dateNowFileName);
                            strSaveName = strSaveName.Replace(':', '-');
                            excel.Workbooks[1].SaveAs(mainDirectoryForSave+@"" + strSaveName + ".xlsx");
                            excel.Workbooks[1].Close();
                        }
                        catch
                        {
                            MessageBox.Show("Ошибка!");
                            printProverka = false;
                        }
                        finally
                        {
                            excel.Quit();
                            if (printProverka)
                                functionMessageShow(2, "Справка-обоснование напечатана!");
                            button114.Enabled = true;
                        }*/
                        //WORD
                        label123.Text = "Печать: подготовка документа к печати";
                        //Удаление повторов
                        foreach (ClassPKEMespl pk in pkEMesplList)
                        {
                            foreach (ClassPlIspMespl pl in pk.ispEl.ToArray())
                            {
                                int countEquals = 0;
                                foreach (ClassPlIspMespl pl2 in pk.ispEl.ToArray())
                                {
                                    if(pl.codeElementPlIspMespl == pl2.codeElementPlIspMespl && pl.codeFactoryPlIspMespl == pl2.codeFactoryPlIspMespl)
                                    {
                                        if (countEquals > 0)
                                        {
                                            pl.countShotPlIspMespl = Convert.ToString(Convert.ToInt32(pl.countShotPlIspMespl) + Convert.ToInt32(pl2.countShotPlIspMespl));
                                            pk.ispEl.Remove(pl2);
                                        }
                                        countEquals++;
                                    }
                                }
                            }
                        }
                        //Отдельный поток для печати
                        new Thread(() =>
                        {
                            //Сортировка
                            var sortedList = pkEMesplList.OrderBy(a => a.codeEKElement);
                            Word.Application oWord = new Word.Application();
                            oWord.Visible = false;
                            try
                            {
                                //Открытие документа
                                Word.Document wordDocument = oWord.Documents.Open(templateFileNameWord);
                                //Поиск и замена текста
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                                functionReplaceInText(wordDocument, oWord, "{month}", month);
                                functionReplaceInText(wordDocument, oWord, "{year}", year);
                                //Колонтитул
                                /*object aligment = Word.WdPageNumberAlignment.wdAlignPageNumberRight;
                                //Word.Range rangeKol = wordDocument.Range().GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, 1);
                                //wordDocument.Sections.Add(rangeKol, Word.WdSectionStart.wdSectionContinuous);
                                //wordDocument.Sections.Add(rangeKol, Word.WdSectionStart.wdSectionContinuous);
                                Word.HeaderFooter hf = wordDocument.Sections[wordDocument.Sections.Count].Headers[Word.WdHeaderFooterIndex.wdHeaderFooterPrimary];
                                hf.LinkToPrevious = false;
                                hf.PageNumbers.RestartNumberingAtSection = false;
                                hf.PageNumbers.Add(aligment, true);*/
                                //Добавление в файл таблицы
                                label123.BeginInvoke((MethodInvoker)(() => this.label123.Text = "Печать: создание титульного листа"));
                                wordDocument.Paragraphs.Add();
                                Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                                var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                wordDocument.Tables.Add(range, 1, 5, autoFitBehavior);
                                Word.Table oTable = wordDocument.Tables[1];
                                string[] nameHeaderTable = { "Код комплектующего элемента", "Ед. измерения", "Потребность на месяц", "Наличие на складе", "Испытуемый элемент", "Код испытуемого элемента", "Завод изготовитель", "Объем испытаний" };
                                for (int i = 0; i < oTable.Columns.Count; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Text = nameHeaderTable[i];
                                    wordCellRange.Rows.HeadingFormat = -1;
                                    wordCellRange.Font.Name = "Times New Roman";
                                }
                                oTable.Cell(1, 1).Width = 200;
                                oTable.Cell(1, 2).Width = 90;
                                oTable.Cell(1, 3).Width = 90;
                                oTable.Cell(1, 4).Width = 90;
                                oTable.Cell(1, 5).Width = 325;
                                oTable.Cell(1, 5).Split(2, 1);
                                for (int i = 2; i < oTable.Rows.Count + 1; i++)
                                {
                                    oTable.Cell(i, 5).Split(1, 3);
                                }
                                for (int i = 5; i < 8; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Text = nameHeaderTable[i];
                                    wordCellRange.Rows.HeadingFormat = -1;
                                }
                                int countKompEl = pkEMesplList.Count;
                                int positionRows = 3;
                                int printKECount = 1;
                                foreach (ClassPKEMespl pk in sortedList)
                                {
                                    label123.BeginInvoke((MethodInvoker)(() => this.label123.Text = "Печать: печать комплектующих элементов " + printKECount + " из " + pkEMesplList.Count));
                                    printKECount++;
                                    oTable.Rows.Add();
                                    for (int j = 0; j < 4; j++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                        wordCellRange.Rows.HeadingFormat = 0;
                                        if (j == 0)
                                            wordCellRange.Text = pk.codeEKElement + "\n" + pk.pictureEKElement + "\n" + pk.indexEKElement + "\n" + pk.nameEKElement;
                                        if (j == 1)
                                            wordCellRange.Text = pk.edIzmCode + "\n" + pk.edIzmName;
                                        if (j == 2)
                                            wordCellRange.Text = Convert.ToString(Math.Ceiling(pk.potrKE));
                                        if (j == 3)
                                            wordCellRange.Text = pk.sklad;
                                    }
                                    int i = positionRows;
                                    if (pk.ispEl.Count > 0)
                                    {
                                        oTable.Cell(i, 5).Split(pk.ispEl.Count, 1);
                                        oTable.Cell(i, 6).Split(pk.ispEl.Count, 1);
                                        oTable.Cell(i, 7).Split(pk.ispEl.Count, 1);
                                    }
                                    foreach (ClassPlIspMespl pl in pk.ispEl)
                                    {
                                        for (int j = 5; j < 8; j++)
                                        {
                                            Word.Range wordCellRange = oTable.Cell(i, j).Range;
                                            if (j == 5)
                                                wordCellRange.Text = pl.codeElementPlIspMespl + "\n" + pl.pictureElementPlIspMespl + "\n" + pl.indexElementPlIspMespl + "\n" + pl.nameElementPlIspMespl;
                                            if (j == 6)
                                                wordCellRange.Text = pl.codeFactoryPlIspMespl + "\n" + pl.nameFactoryPlIspMespl;
                                            if (j == 7)
                                                wordCellRange.Text = pl.countShotPlIspMespl;
                                        }
                                        i++;
                                        positionRows++;
                                    }
                                }
                                label123.BeginInvoke((MethodInvoker)(() => this.label123.Text = "Печать: создание экземпляров"));
                                //Создание экземпляров
                                wordDocument.Range().Copy();
                                var rangeAllDocument = wordDocument.Content;
                                rangeAllDocument.Find.ClearFormatting();
                                rangeAllDocument.Find.Execute(FindText: "{numberEkz}", ReplaceWith: "1");
                                for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                                {
                                    //В конец документа
                                    object what = Word.WdGoToItem.wdGoToLine;
                                    object which = Word.WdGoToDirection.wdGoToLast;
                                    Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                    //Создаем разрыв РАЗДЕЛА (не страниц)
                                    endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                    //Вставляем
                                    endRange.Paste();
                                    rangeAllDocument = wordDocument.Content;
                                    rangeAllDocument.Find.ClearFormatting();
                                    rangeAllDocument.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                }
                                label123.BeginInvoke((MethodInvoker)(() => this.label123.Text = "Печать: сохранение документа"));
                                //Сохранение
                                dateNowFileName = DateTime.Now;
                                string strSaveName = Convert.ToString(dateNowFileName);
                                strSaveName = strSaveName.Replace(':', '-');
                                wordDocument.SaveAs(mainDirectoryForSave + @"МЕСЯЧНЫЙ ПЛАН\МЕСЯЧНАЯ СПРАВКА-ОБОСНОВАНИЕ " + strSaveName + ".docx");
                                wordDocument.Close();
                            }
                            catch
                            {
                                MessageBox.Show("Ошибка!");
                                printProverka = false;
                            }
                            finally
                            {
                                oWord.Quit();
                                if (printProverka)
                                    functionMessageShow(2, "Справка-обоснование напечатана!");
                                label123.BeginInvoke((MethodInvoker)(() => this.label123.Text = ""));
                                button114.BeginInvoke((MethodInvoker)(() => this.button114.Enabled = true));
                            }
                        }).Start();
                    }
                }
                else
                    functionMessageShow(1, "Не найдена потребность в комплектующих!");
            }
            else
                functionMessageShow(1, "Не найден план испытаний на данный период!");
        }

        //Функция замены текста (+колонтитул)
        private void functionReplaceInText(Word.Document wordDocument, Word.Application oWord, string findText, string replaceText)
        {
            //var range = wordDocument.Content;
            //range.Find.ClearFormatting();
            //range.Find.Execute(FindText: findText, ReplaceWith: replaceText);
            object wrap = Word.WdFindWrap.wdFindContinue;
            //Word.Range ra = oWord.Inse
            wordDocument.TrackRevisions = false;
            //Word.Range r = 
            foreach (Word.Range range in wordDocument.StoryRanges)
            {
                Word.Range rng = range;
                while (rng != null)
                {
                    rng.Find.ClearFormatting();
                    rng.Find.Execute(findText, ReplaceWith: replaceText, Replace: Word.WdReplace.wdReplaceAll);
                    rng = rng.NextStoryRange;
                }
                //range.Find.ClearFormatting();
                //range.Find.Execute(FindText: findText, ReplaceWith: replaceText, Wrap: wrap, MatchCase: true, Replace: Word.WdReplace.wdReplaceAll, MatchWholeWord: true, Forward: true);
            }
        }

        //Выбор комплектующего элемента
        private void listBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listBox2.SelectedIndex > 0 && listBox2.SelectedIndex < pkEMesplList.Count + 1)
            {
                textBox105.Text = pkEMesplList[listBox2.SelectedIndex - 1].pictureEKElement;
                textBox106.Text = pkEMesplList[listBox2.SelectedIndex - 1].indexEKElement;
                textBox107.Text = pkEMesplList[listBox2.SelectedIndex - 1].nameEKElement;
            }
            else
            {
                textBox105.Text = "";
                textBox106.Text = "";
                textBox107.Text = "";
            }
        }
        //------------------------------ПЕЧАТЬ ЗАПРОСОВ И ПЛАНОВ ИСПЫТАНИЙ (И ПОТРЕБНОСТИ В КЭ)------------------------------
        private void button74_Click(object sender, EventArgs e)
        {
            panel9.Visible = false;
            panel15.Visible = true;
            label126.Text = "";
        }

        //Кнопка возврата в меню
        private void button115_Click(object sender, EventArgs e)
        {
            functionCancelMespl();
        }

        //Печать запросов на годовой период
        private void button116_Click(object sender, EventArgs e)
        {
            Form15 form15 = new Form15(true, true);
            form15.ShowDialog();
            string year = form15.numericUpDown1.Text;
            bool oneUchet = true;
            if (form15.comboBox2.Text == "На разные учетные")
                oneUchet = false;
            if (form15.exitAgree)
            {
                functionQueryVIspMespl(year);
                if (vIspMesplList.Count > 0)
                {
                    bool printProverka = true;
                    button116.Enabled = false;
                    button117.Enabled = false;
                    button118.Enabled = false;
                    button119.Enabled = false;
                    button120.Enabled = false;
                    button290.Enabled = false;
                    //Количество экземпляров
                    string countEkz = form15.textBox2.Text;
                    //Учетный номер
                    string uchNumber = form15.textBox1.Text;
                    int newUchNumber = -1;
                    if (uchNumber.Length > 0)
                        newUchNumber = Convert.ToInt32(uchNumber);
                    //WORD
                    label126.Text = "Печать: подготовка документа к печати";
                    new Thread(() =>
                    {
                        Word.Application oWord = new Word.Application();
                        oWord.Visible = false;
                        try
                        {
                            //Открытие документа
                            Word.Document wordDocument = oWord.Documents.Open(templateFileNameWordQueryOnYear);
                            //Поиск и замена текста
                            if (oneUchet)
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                            functionReplaceInText(wordDocument, oWord, "{year}", year);
                            functionReplaceInText(wordDocument, oWord, "{year}", year);
                            //Добавление в файл таблицы
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание титульного листа"));
                            Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                            //Создание запроса
                            printQueryOnYear.Clear();
                            foreach (ClassVIspMespl vIsp in vIspMesplList)
                            {
                                bool proverkaZavodaPrint = true;
                                if (printQueryOnYear.Count > 0)
                                    foreach (ClassPrintQueryOnYear pr in printQueryOnYear)
                                        if (pr.codeFactory == vIsp.codeFactoryVIspMespl)
                                        {
                                            pr.elementVIspList.Add(vIsp);
                                            proverkaZavodaPrint = false;
                                            break;
                                        }
                                if (proverkaZavodaPrint || printQueryOnYear.Count == 0)
                                {
                                    ClassPrintQueryOnYear print = new ClassPrintQueryOnYear();
                                    print.codeFactory = vIsp.codeFactoryVIspMespl;
                                    foreach (ClassFactorys fc in factorysList)
                                        if (fc.getCode() == vIsp.codeFactoryVIspMespl)
                                            print.otprText = fc.getSend();
                                    print.elementVIspList.Add(vIsp);
                                    printQueryOnYear.Add(print);
                                }
                            }
                            int printKECount = 1;
                            int tablesCount = 1;
                            //Печать запроса
                            wordDocument.Range().Copy();
                            if (newUchNumber > 0)
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", Convert.ToString(newUchNumber));
                            else
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                            foreach (ClassPrintQueryOnYear print in printQueryOnYear)
                            {
                                label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: печать запроса для предприятия " + printKECount + " из " + printQueryOnYear.Count));
                                printKECount++;
                                var rangeAllDocument = wordDocument.Content;
                                rangeAllDocument = wordDocument.Content;
                                rangeAllDocument.Find.ClearFormatting();
                                rangeAllDocument.Find.Execute(FindText: "{otprText}", ReplaceWith: print.otprText);
                                wordDocument.Paragraphs.Add();
                                var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                range.Text = print.codeFactory;
                                wordDocument.Paragraphs.Add();
                                range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                                wordDocument.Tables.Add(range, print.elementVIspList.Count + 1, 9, autoFitBehavior);
                                Word.Table oTable = wordDocument.Tables[tablesCount];
                                tablesCount++;
                                string[] nameHeaderTable = { "№\nп/п", "Код и наименование испытуемого элемента", "Код и наименование вида испытания", "Код и наименование матчасти", "Номер\nпартии", "Число выстрелов от партии", "Дата поставки на полигон", "Номер заказа на заводе", "№, дата ГОСЗАКАЗА\nПримечание" };
                                for (int i = 0; i < oTable.Columns.Count; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Text = nameHeaderTable[i];
                                    wordCellRange.Rows.HeadingFormat = -1;
                                    wordCellRange.Font.Name = "Times New Roman";
                                }
                                int countKompEl = print.elementVIspList.Count;
                                int positionRows = 2;
                                foreach (ClassVIspMespl vIsp in print.elementVIspList)
                                {
                                    for (int i = 0; i < 9; i++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(positionRows, i + 1).Range;
                                        wordCellRange.Rows.HeadingFormat = 0;
                                        wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                        switch (i)
                                        {
                                            case 0:
                                                if (vIsp.nPosPlVIspMespl.Length > 0)
                                                    wordCellRange.Text = vIsp.nPosPlVIspMespl;
                                                else
                                                    wordCellRange.Text = "0";
                                                if (vIsp.nPosSvVIspMespl.Length > 0)
                                                    wordCellRange.Text += vIsp.nPosSvVIspMespl;
                                                else
                                                    wordCellRange.Text += "0";
                                                break;
                                            case 1:
                                                wordCellRange.Text = vIsp.codeElementVIspMespl + "\n" + vIsp.pictureElementVIspMespl + "\n" + vIsp.indexElementVIspMespl + "\n" + vIsp.nameElementVIspMespl;
                                                break;
                                            case 2:
                                                wordCellRange.Text = vIsp.codeVidIspVIspMespl + "\n" + vIsp.nameVidIspVIspMespl;
                                                break;
                                            case 3:
                                                wordCellRange.Text = vIsp.codeMCVIspMespl + "\n" + vIsp.nameMCVIspMespl;
                                                break;
                                            case 4:
                                                wordCellRange.Text = "";
                                                break;
                                            case 5:
                                                wordCellRange.Text = "Год-\n1кв-\n2кв-\n3кв-\n4кв-";
                                                break;
                                            case 6:
                                                wordCellRange.Text = "";
                                                break;
                                            case 7:
                                                wordCellRange.Text = "";
                                                break;
                                            case 8:
                                                wordCellRange.Text = "";
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                    positionRows++;
                                }
                                range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                                wordDocument.Paragraphs.Add();
                                range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                                range.Text = "Начальник сборочно-испытательного производства - зам. главного инженера\t\tА.И. Кочуров";
                                range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                                wordDocument.Paragraphs.Add();
                                range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                                //Создаем разрыв РАЗДЕЛА (не страниц)
                                if (printKECount - 1 != printQueryOnYear.Count)
                                {
                                    range.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                    range.Paste();
                                    if (newUchNumber > 0)
                                        newUchNumber++;
                                    if (!oneUchet)
                                        if (newUchNumber > 0)
                                            functionReplaceInText(wordDocument, oWord, "{uchNumber}", Convert.ToString(newUchNumber));
                                        else
                                            functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                                }
                            }
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание экземпляров"));
                            //Создание экземпляров
                            wordDocument.Range().Copy();
                            var rangeAllDocumentEkz = wordDocument.Content;
                            rangeAllDocumentEkz.Find.ClearFormatting();
                            for (int j = 0; j < printQueryOnYear.Count; j++)
                            {
                                functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                            }
                            for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                            {
                                //В конец документа
                                object what = Word.WdGoToItem.wdGoToLine;
                                object which = Word.WdGoToDirection.wdGoToLast;
                                Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                //Создаем разрыв РАЗДЕЛА (не страниц)
                                endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                //Вставляем
                                endRange.Paste();
                                for (int j = 0; j < printQueryOnYear.Count; j++)
                                {
                                    rangeAllDocumentEkz = wordDocument.Content;
                                    rangeAllDocumentEkz.Find.ClearFormatting();
                                    rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                }
                            }
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: сохранение документа"));
                            //Сохранение
                            dateNowFileName = DateTime.Now;
                            string strSaveName = Convert.ToString(dateNowFileName);
                            strSaveName = strSaveName.Replace(':', '-');
                            wordDocument.SaveAs(mainDirectoryForSave + @"МЕСЯЧНЫЙ ПЛАН\ПЕЧАСТЬ ЗАПРОСОВ НА ГОД " + strSaveName + ".docx");
                            wordDocument.Close();
                        }
                        catch
                        {
                            MessageBox.Show("Ошибка!");
                            printProverka = false;
                        }
                        finally
                        {
                            oWord.Quit();
                            if (printProverka)
                                functionMessageShow(2, "Запрос на год напечатан!");
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = ""));
                            button116.BeginInvoke((MethodInvoker)(() => this.button116.Enabled = true));
                            button117.BeginInvoke((MethodInvoker)(() => this.button117.Enabled = true));
                            button118.BeginInvoke((MethodInvoker)(() => this.button118.Enabled = true));
                            button119.BeginInvoke((MethodInvoker)(() => this.button119.Enabled = true));
                            button120.BeginInvoke((MethodInvoker)(() => this.button120.Enabled = true));
                            button290.BeginInvoke((MethodInvoker)(() => this.button290.Enabled = true));
                        }
                    }).Start();
                }
                else
                    functionMessageShow(1, "Не найден объем испытаний на данный период!");
            }
        }

        //Печать запросов на месячный период
        private void button117_Click(object sender, EventArgs e)
        {
            Form15 form15 = new Form15(false, true);
            form15.ShowDialog();
            if (form15.exitAgree)
            {
                string year = form15.numericUpDown1.Text;
                string month = form15.comboBox1.Text;
                if (month != "МАРТ" && month != "АВГУСТ")
                    month = month.Substring(0, month.Length - 1);
                month += "Е";
                bool oneUchet = true;
                if (form15.comboBox2.Text == "На разные учетные")
                    oneUchet = false;
                functionQueryVIspMespl(year);
                if (vIspMesplList.Count > 0)
                {
                    bool printProverka = true;
                    button116.Enabled = false;
                    button117.Enabled = false;
                    button118.Enabled = false;
                    button119.Enabled = false;
                    button120.Enabled = false;
                    button290.Enabled = false;
                    //Количество экземпляров
                    string countEkz = form15.textBox2.Text;
                    //Учетный номер
                    string uchNumber = form15.textBox1.Text;
                    int newUchNumber = -1;
                    if (uchNumber.Length > 0)
                        newUchNumber = Convert.ToInt32(uchNumber);
                    //WORD
                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: подготовка документа к печати"));
                    new Thread(() =>
                    {
                        Word.Application oWord = new Word.Application();
                        oWord.Visible = false;
                        try
                        {
                            //Открытие документа
                            Word.Document wordDocument = oWord.Documents.Open(templateFileNameWordQueryOnMonth);
                            //Поиск и замена текста
                            if (oneUchet)
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                            functionReplaceInText(wordDocument, oWord, "{year}", year);
                            functionReplaceInText(wordDocument, oWord, "{year}", year);
                            functionReplaceInText(wordDocument, oWord, "{month}", month);
                            string month2 = month;
                            switch (month)
                            {
                                case "ЯНВАРЕ":
                                    month2 = "ДЕКАБРЯ";
                                    break;
                                case "ФЕВРАЛЕ":
                                    month2 = "ЯНВАРЯ";
                                    break;
                                case "МАРТЕ":
                                    month2 = "ФЕВРАЛЯ";
                                    break;
                                case "АПРЕЛЕ":
                                    month2 = "МАРТА";
                                    break;
                                case "МАЕ":
                                    month2 = "АПРЕЛЯ";
                                    break;
                                case "ИЮНЕ":
                                    month2 = "МАЯ";
                                    break;
                                case "ИЮЛЕ":
                                    month2 = "ИЮНЯ";
                                    break;
                                case "АВГУСТЕ":
                                    month2 = "ИЮЛЯ";
                                    break;
                                case "СЕНТЯБРЕ":
                                    month2 = "АВГУСТА";
                                    break;
                                case "ОКТЯБРЕ":
                                    month2 = "СЕНТЯБРЯ";
                                    break;
                                case "НОЯБРЕ":
                                    month2 = "ОКТЯБРЯ";
                                    break;
                                case "ДЕКАБРЕ":
                                    month2 = "НОЯБРЯ";
                                    break;
                            }
                            functionReplaceInText(wordDocument, oWord, "{month2}", month2);
                            //Добавление в файл таблицы
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание титульного листа"));
                            Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                            //Создание запроса
                            printQueryOnYear.Clear();
                            foreach (ClassVIspMespl vIsp in vIspMesplList)
                            {
                                bool proverkaZavodaPrint = true;
                                if (printQueryOnYear.Count > 0)
                                    foreach (ClassPrintQueryOnYear pr in printQueryOnYear)
                                        if (pr.codeFactory == vIsp.codeFactoryVIspMespl)
                                        {
                                            pr.elementVIspList.Add(vIsp);
                                            proverkaZavodaPrint = false;
                                            break;
                                        }
                                if (proverkaZavodaPrint || printQueryOnYear.Count == 0)
                                {
                                    ClassPrintQueryOnYear print = new ClassPrintQueryOnYear();
                                    print.codeFactory = vIsp.codeFactoryVIspMespl;
                                    foreach (ClassFactorys fc in factorysList)
                                        if (fc.getCode() == vIsp.codeFactoryVIspMespl)
                                            print.otprText = fc.getSend();
                                    print.elementVIspList.Add(vIsp);
                                    printQueryOnYear.Add(print);
                                }
                            }
                            int printKECount = 1;
                            int tablesCount = 1;
                            //Печать запроса
                            wordDocument.Range().Copy();
                            if (newUchNumber > 0)
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", Convert.ToString(newUchNumber));
                            else
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                            foreach (ClassPrintQueryOnYear print in printQueryOnYear)
                            {
                                label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: печать запроса для предприятия " + printKECount + " из " + printQueryOnYear.Count));
                                printKECount++;
                                var rangeAllDocument = wordDocument.Content;
                                rangeAllDocument = wordDocument.Content;
                                rangeAllDocument.Find.ClearFormatting();
                                rangeAllDocument.Find.Execute(FindText: "{otprText}", ReplaceWith: print.otprText);
                                wordDocument.Paragraphs.Add();
                                var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                range.Text = print.codeFactory;
                                wordDocument.Paragraphs.Add();
                                range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                                wordDocument.Tables.Add(range, print.elementVIspList.Count + 1, 9, autoFitBehavior);
                                Word.Table oTable = wordDocument.Tables[tablesCount];
                                tablesCount++;
                                string[] nameHeaderTable = { "№\nп/п", "Код и наименование испытуемого элемента", "Код и наименование вида испытания", "Код и наименование матчасти", "Номер\nпартии", "Число выстрелов от партии", "Дата поставки на полигон", "Номер заказа на заводе", "№, дата ГОСЗАКАЗА\nПримечание" };
                                for (int i = 0; i < oTable.Columns.Count; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Text = nameHeaderTable[i];
                                    wordCellRange.Rows.HeadingFormat = -1;
                                    wordCellRange.Font.Name = "Times New Roman";
                                }
                                int countKompEl = print.elementVIspList.Count;
                                int positionRows = 2;
                                foreach (ClassVIspMespl vIsp in print.elementVIspList)
                                {
                                    for (int i = 0; i < 9; i++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(positionRows, i + 1).Range;
                                        wordCellRange.Rows.HeadingFormat = 0;
                                        wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                        switch (i)
                                        {
                                            case 0:
                                                if (vIsp.nPosPlVIspMespl.Length > 0)
                                                    wordCellRange.Text = vIsp.nPosPlVIspMespl;
                                                else
                                                    wordCellRange.Text = "0";
                                                if (vIsp.nPosSvVIspMespl.Length > 0)
                                                    wordCellRange.Text += vIsp.nPosSvVIspMespl;
                                                else
                                                    wordCellRange.Text += "0";
                                                break;
                                            case 1:
                                                wordCellRange.Text = vIsp.codeElementVIspMespl + "\n" + vIsp.pictureElementVIspMespl + "\n" + vIsp.indexElementVIspMespl + "\n" + vIsp.nameElementVIspMespl;
                                                break;
                                            case 2:
                                                wordCellRange.Text = vIsp.codeVidIspVIspMespl + "\n" + vIsp.nameVidIspVIspMespl;
                                                break;
                                            case 3:
                                                wordCellRange.Text = vIsp.codeMCVIspMespl + "\n" + vIsp.nameMCVIspMespl;
                                                break;
                                            case 4:
                                                wordCellRange.Text = "";
                                                break;
                                            case 5:
                                                wordCellRange.Text = "";
                                                break;
                                            case 6:
                                                wordCellRange.Text = "";
                                                break;
                                            case 7:
                                                wordCellRange.Text = "";
                                                break;
                                            case 8:
                                                wordCellRange.Text = "";
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                    positionRows++;
                                }
                                range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                                wordDocument.Paragraphs.Add();
                                range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                                range.Text = "Начальник сборочно-испытательного производства - зам. главного инженера\t\tА.И. Кочуров";
                                range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                                wordDocument.Paragraphs.Add();
                                range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                                //Создаем разрыв РАЗДЕЛА (не страниц)
                                if (printKECount - 1 != printQueryOnYear.Count)
                                {
                                    range.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                    range.Paste();
                                    if (newUchNumber > 0)
                                        newUchNumber++;
                                    if (!oneUchet)
                                        if (newUchNumber > 0)
                                            functionReplaceInText(wordDocument, oWord, "{uchNumber}", Convert.ToString(newUchNumber));
                                        else
                                            functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                                }
                            }
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание экземпляров"));
                            //Создание экземпляров
                            wordDocument.Range().Copy();
                            var rangeAllDocumentEkz = wordDocument.Content;
                            rangeAllDocumentEkz.Find.ClearFormatting();
                            for (int j = 0; j < printQueryOnYear.Count; j++)
                            {
                                functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                            }
                            for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                            {
                                //В конец документа
                                object what = Word.WdGoToItem.wdGoToLine;
                                object which = Word.WdGoToDirection.wdGoToLast;
                                Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                //Создаем разрыв РАЗДЕЛА (не страниц)
                                endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                //Вставляем
                                endRange.Paste();
                                for (int j = 0; j < printQueryOnYear.Count; j++)
                                {
                                    rangeAllDocumentEkz = wordDocument.Content;
                                    rangeAllDocumentEkz.Find.ClearFormatting();
                                    rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                }
                            }
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: сохранение документа"));
                            //Сохранение
                            dateNowFileName = DateTime.Now;
                            string strSaveName = Convert.ToString(dateNowFileName);
                            strSaveName = strSaveName.Replace(':', '-');
                            wordDocument.SaveAs(mainDirectoryForSave + @"МЕСЯЧНЫЙ ПЛАН\ПЕЧАСТЬ ЗАПРОСОВ НА МЕСЯЦ " + strSaveName + ".docx");
                            wordDocument.Close();
                        }
                        catch
                        {
                            MessageBox.Show("Ошибка!");
                            printProverka = false;
                        }
                        finally
                        {
                            oWord.Quit();
                            if (printProverka)
                                functionMessageShow(2, "Запрос на месяц напечатан!");
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = ""));
                            button116.BeginInvoke((MethodInvoker)(() => this.button116.Enabled = true));
                            button117.BeginInvoke((MethodInvoker)(() => this.button117.Enabled = true));
                            button118.BeginInvoke((MethodInvoker)(() => this.button118.Enabled = true));
                            button119.BeginInvoke((MethodInvoker)(() => this.button119.Enabled = true));
                            button120.BeginInvoke((MethodInvoker)(() => this.button120.Enabled = true));
                            button290.BeginInvoke((MethodInvoker)(() => this.button290.Enabled = true));
                        }
                    });
                }
                else
                    functionMessageShow(1, "Не найден объем испытаний на данный период!");
            }
        }

        //Печать плана контрольных испытаний
        private void button118_Click(object sender, EventArgs e)
        {
            Form15 form15 = new Form15(false, false);
            form15.ShowDialog();
            string year = form15.numericUpDown1.Text;
            string month = form15.comboBox1.Text;
            if (form15.exitAgree)
            {
                functionQueryPlIspMespl(month, year);
                if (plIspMesplList.Count > 0)
                {
                    List<ClassPlIspMespl> plIspMesplListSort = functionSortingControlPlan(plIspMesplList);
                    functionQueryFI();
                    functionRelationPlAndFI();
                    bool printProverka = true;
                    button116.Enabled = false;
                    button117.Enabled = false;
                    button118.Enabled = false;
                    button119.Enabled = false;
                    button120.Enabled = false;
                    button290.Enabled = false;
                    //Количество экземпляров
                    string countEkz = form15.textBox2.Text;
                    //Учетный номер
                    string uchNumber = form15.textBox1.Text;
                    //WORD
                    label126.Text = "Печать: подготовка документа к печати";
                    new Thread(() =>
                    {
                        Word.Application oWord = new Word.Application();
                        oWord.Visible = false;
                        try
                        {
                            //Открытие документа
                            Word.Document wordDocument = oWord.Documents.Open(templateFileNameWordControlPlan);
                            //Поиск и замена текста
                            functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                            functionReplaceInText(wordDocument, oWord, "{month}", month);
                            functionReplaceInText(wordDocument, oWord, "{year}", year);
                            //Добавление в файл таблицы
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание титульного листа"));
                            wordDocument.Paragraphs.Add();
                            Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                            var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                            wordDocument.Tables.Add(range, plIspMesplListSort.Count + 1, 9, autoFitBehavior);
                            Word.Table oTable = wordDocument.Tables[1];
                            string[] nameHeaderTable = { "№\nп/п", "Код и наименование испытуемого элемента", "Завод-изготовитель", "Код и наименование вида испытания", "Номер\nпартии", "Количество выстрелов", "Планируемая дата поставки", "Мишенная обстановка", "№, дата ГОСЗАКАЗА/Примечание" };
                            for (int i = 0; i < oTable.Columns.Count; i++)
                            {
                                Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                wordCellRange.Text = nameHeaderTable[i];
                                wordCellRange.Rows.HeadingFormat = -1;
                                wordCellRange.Font.Name = "Times New Roman";
                            }
                            int countKompEl = plIspMesplListSort.Count;
                            int positionRows = 2;
                            int printKECount = 1;
                            //Оглавление
                            string codeZavodaOgl = "";
                            List<ClassPlIspMespl> oglavlenieZavod = new List<ClassPlIspMespl>();
                            List<int> listPosition = new List<int>();
                            foreach (ClassPlIspMespl pl in plIspMesplListSort)
                            {
                                label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: печать испытуемого элемента " + printKECount + " из " + plIspMesplListSort.Count));
                                printKECount++;
                                for (int i = 0; i < 9; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(positionRows, i + 1).Range;
                                    wordCellRange.Rows.HeadingFormat = 0;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    switch (i)
                                    {
                                        case 0:
                                            if (pl.nPosPlPlIspMespl.Length > 0)
                                                wordCellRange.Text = pl.nPosPlPlIspMespl;
                                            else
                                                wordCellRange.Text = "0";
                                            if (pl.nPosSvPlIspMespl.Length > 0)
                                                wordCellRange.Text += pl.nPosSvPlIspMespl;
                                            else
                                                wordCellRange.Text += "0";
                                            break;
                                        case 1:
                                            wordCellRange.Text = pl.codeElementPlIspMespl + "\n" + pl.pictureElementPlIspMespl + "\n" + pl.indexElementPlIspMespl + "\n" + pl.nameElementPlIspMespl;
                                            break;
                                        case 2:
                                            if (codeZavodaOgl != pl.codeFactoryPlIspMespl)
                                            {
                                                codeZavodaOgl = pl.codeFactoryPlIspMespl;
                                                oglavlenieZavod.Add(pl);
                                                //Добавление номера страницы текущего положения
                                                listPosition.Add(wordDocument.ComputeStatistics(Word.WdStatistic.wdStatisticPages, false));
                                            }
                                            wordCellRange.Text = pl.codeFactoryPlIspMespl + "\n" + pl.nameFactoryPlIspMespl;
                                            break;
                                        case 3:
                                            wordCellRange.Text = pl.codeVidIspPlIspMespl + "\n" + pl.nameVidIspPlIspMespl;
                                            break;
                                        case 4:
                                            wordCellRange.Text = pl.numberOfPartyPlIspMespl;
                                            break;
                                        case 5:
                                            wordCellRange.Text = pl.countShotPlIspMespl;
                                            break;
                                        case 6:
                                            wordCellRange.Text = pl.datePostPlIspMespl;
                                            break;
                                        case 7:
                                            wordCellRange.Text = pl.namePregrad1PlIspMespl + "\n" + pl.sizePregrad1PlIspMespl + "\n" + pl.namePregrad2PlIspMespl + "\n" + pl.sizePregrad2PlIspMespl;
                                            break;
                                        case 8:
                                            wordCellRange.Text = pl.commentPlIspMespl;
                                            break;
                                        default:
                                            break;
                                    }
                                }
                                positionRows++;
                            }
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: печать оглавления"));
                            range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                            range.InsertBreak();
                            range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                            range.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                            range.Text = "ОГЛАВЛЕНИЕ";
                            wordDocument.Paragraphs.Add();
                            range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                            range.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                            range.Text = "   № п/п                            Предприятие                                           Стр";
                            for (int i = 0; i < oglavlenieZavod.Count; i++)
                            {
                                wordDocument.Paragraphs.Add();
                                range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                                range.ParagraphFormat.SpaceAfter = 0;
                                range.Text = (i + 1) + "           " + oglavlenieZavod[i].codeFactoryPlIspMespl + "      " + oglavlenieZavod[i].nameFactoryPlIspMespl + "                                   " + listPosition[i];
                            }
                            wordDocument.Paragraphs.Add();
                            range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count].Range;
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание экземпляров"));
                            //Создание экземпляров
                            wordDocument.Range().Copy();
                            var rangeAllDocument = wordDocument.Content;
                            rangeAllDocument.Find.ClearFormatting();
                            rangeAllDocument.Find.Execute(FindText: "{numberEkz}", ReplaceWith: "1");
                            for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                            {
                                //В конец документа
                                object what = Word.WdGoToItem.wdGoToLine;
                                object which = Word.WdGoToDirection.wdGoToLast;
                                Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                //Создаем разрыв РАЗДЕЛА (не страниц)
                                endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                //Вставляем
                                endRange.Paste();
                                rangeAllDocument = wordDocument.Content;
                                rangeAllDocument.Find.ClearFormatting();
                                rangeAllDocument.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                            }
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: сохранение документа"));
                            //Сохранение
                            dateNowFileName = DateTime.Now;
                            string strSaveName = Convert.ToString(dateNowFileName);
                            strSaveName = strSaveName.Replace(':', '-');
                            wordDocument.SaveAs(mainDirectoryForSave + @"МЕСЯЧНЫЙ ПЛАН\МЕСЯЧНЫЙ ПЛАН КОНТРОЛЬНЫХ ИСПЫТАНИЙ " + strSaveName + ".docx");
                            wordDocument.Close();
                        }
                        catch
                        {
                            MessageBox.Show("Ошибка!");
                            printProverka = false;
                        }
                        finally
                        {
                            oWord.Quit();
                            if (printProverka)
                                functionMessageShow(2, "План контрольных испытаний напечатан!");
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = ""));
                            button116.BeginInvoke((MethodInvoker)(() => this.button116.Enabled = true));
                            button117.BeginInvoke((MethodInvoker)(() => this.button117.Enabled = true));
                            button118.BeginInvoke((MethodInvoker)(() => this.button118.Enabled = true));
                            button119.BeginInvoke((MethodInvoker)(() => this.button119.Enabled = true));
                            button120.BeginInvoke((MethodInvoker)(() => this.button120.Enabled = true));
                            button290.BeginInvoke((MethodInvoker)(() => this.button290.Enabled = true));
                        }
                    }).Start();
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //Функция сортировки плана контрольных испытаний
        private List<ClassPlIspMespl> functionSortingControlPlan(List<ClassPlIspMespl> plIspOld)
        {
            List<ClassPlIspMespl> plIspNew = new List<ClassPlIspMespl>();
            List<int> sortArr = new List<int>();
            List<int> noSortArr = new List<int>();
            List<int> arr = new List<int>();
            foreach (ClassPlIspMespl pl in plIspOld)
            {
                sortArr.Add(Convert.ToInt32(pl.codeFactoryPlIspMespl));
                noSortArr.Add(Convert.ToInt32(pl.codeFactoryPlIspMespl));
            }
            sortArr.Sort();
            foreach (int str in sortArr)
            {
                if (!arr.Contains(str))
                {
                    bool proverochka = true;
                    for (int i = 0; i < noSortArr.Count; i++)
                        if (noSortArr[i] == str)
                        {
                            if (proverochka)
                                arr.Add(str);
                            plIspNew.Add(plIspOld[i]);
                            proverochka = false;
                        }
                }
            }
            return plIspNew;
        }

        //Функция для соединения плана испытаний и форматок испытаний
        private void functionRelationPlAndFI()
        {
            foreach(ClassPlIspMespl pl in plIspMesplList)
                foreach(ClassFI fi in fiList)
                    if (pl.codeElementPlIspMespl == fi.codeElementFIMespl)
                    {
                        bool isOne = false;
                        bool isTwo = false;
                        if (fi.codePregradiOneFIMespl != null)
                        {
                            if (fi.codePregradiOneFIMespl.Length > 0)
                                isOne = true;
                        }
                        if (fi.codePregradiTwoFIMespl != null)
                        {
                            if (fi.codePregradiTwoFIMespl.Length > 0)
                                isTwo = true;
                        }
                        if (isOne || isTwo)
                        {
                            foreach (ClassPregrads pr in pregradsList)
                            {
                                if(isOne)
                                    if (pr.getCode() == fi.codePregradiOneFIMespl)
                                    {
                                        pl.namePregrad1PlIspMespl = pr.getName();
                                        pl.sizePregrad1PlIspMespl = pr.getSize();
                                    }
                                if(isTwo)
                                    if (pr.getCode() == fi.codePregradiTwoFIMespl)
                                    {
                                        pl.namePregrad2PlIspMespl = pr.getName();
                                        pl.sizePregrad2PlIspMespl = pr.getSize();
                                    }
                            }
                        }
                    }
        }

        //Печать плана испытаний на год
        private void button119_Click(object sender, EventArgs e)
        {
            Form15 form15 = new Form15(true, false);
            form15.ShowDialog();
            string year = form15.numericUpDown1.Text;
            if (form15.exitAgree)
            {
                functionQueryVIspMespl(year);
                if (vIspMesplList.Count > 0)
                {
                    bool printProverka = true;
                    button116.Enabled = false;
                    button117.Enabled = false;
                    button118.Enabled = false;
                    button119.Enabled = false;
                    button120.Enabled = false;
                    button290.Enabled = false;
                    //WORD
                    label126.Text = "Печать: подготовка документа к печати";
                    new Thread(() =>
                    {
                        Word.Application oWord = new Word.Application();
                        oWord.Visible = false;
                        try
                        {
                            //Открытие документа
                            Word.Document wordDocument = oWord.Documents.Open(templateFileNameWordPlanOnYear);
                            //Поиск и замена текста
                            functionReplaceInText(wordDocument, oWord, "{date}", Convert.ToString(dateNow.Date).Split(' ')[0]);
                            functionReplaceInText(wordDocument, oWord, "{year}", year);
                            //Добавление в файл таблицы
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание титульного листа"));
                            wordDocument.Paragraphs.Add();
                            Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                            var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                            wordDocument.Tables.Add(range, 1, 6, autoFitBehavior);
                            Word.Table oTable = wordDocument.Tables[1];
                            string[] nameHeaderTable = { "№\nп/п", "Код элемента", "Завод-изготовитель", "Вид испытания", "Мат. часть", "Объем испытаний", "Год", "1кв", "2кв", "3кв", "4кв" };
                            for (int i = 0; i < oTable.Columns.Count; i++)
                            {
                                Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                wordCellRange.Text = nameHeaderTable[i];
                                wordCellRange.Rows.HeadingFormat = -1;
                                wordCellRange.Font.Name = "Times New Roman";
                            }
                            //Объем испытаний
                            oTable.Cell(1, 6).Split(2, 1);
                            oTable.Cell(2, 6).Split(1, 5);
                            for (int i = 6; i < 11; i++)
                            {
                                Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                wordCellRange.Text = nameHeaderTable[i];
                                wordCellRange.Rows.HeadingFormat = -1;
                            }
                            int countKompEl = vIspMesplList.Count;
                            int positionRows = 3;
                            int printKECount = 1;
                            foreach (ClassVIspMespl v in vIspMesplList)
                            {
                                label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: печать элемента " + printKECount + " из " + vIspMesplList.Count));
                                printKECount++;
                                oTable.Rows.Add();
                                for (int i = 0; i < 10; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(positionRows, i + 1).Range;
                                    wordCellRange.Rows.HeadingFormat = 0;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    switch (i)
                                    {
                                        case 0:
                                            string strokaPoligonov = "";
                                            if (v.nPosPlVIspMespl.Length > 0)
                                                strokaPoligonov = v.nPosPlVIspMespl;
                                            else
                                                strokaPoligonov = "0";
                                            strokaPoligonov += " / ";
                                            if (v.nPosSvVIspMespl.Length > 0)
                                                strokaPoligonov += v.nPosSvVIspMespl;
                                            else
                                                strokaPoligonov += "0";
                                            wordCellRange.Text = strokaPoligonov;
                                            break;
                                        case 1:
                                            wordCellRange.Text = v.codeElementVIspMespl;
                                            break;
                                        case 2:
                                            wordCellRange.Text = v.codeFactoryVIspMespl;
                                            break;
                                        case 3:
                                            wordCellRange.Text = v.codeVidIspVIspMespl;
                                            break;
                                        case 4:
                                            wordCellRange.Text = v.codeMCVIspMespl;
                                            break;
                                        case 5:
                                            wordCellRange.Text = v.vYearVIspMespl;
                                            break;
                                        case 6:
                                            wordCellRange.Text = v.vOneVIspMespl;
                                            break;
                                        case 7:
                                            wordCellRange.Text = v.vTwoVIspMespl;
                                            break;
                                        case 8:
                                            wordCellRange.Text = v.vThreVIspMespl;
                                            break;
                                        case 9:
                                            wordCellRange.Text = v.vThourVIspMespl;
                                            break;
                                        default:
                                            break;
                                    }
                                }
                                positionRows++;
                            }
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: сохранение документа"));
                            //Сохранение
                            dateNowFileName = DateTime.Now;
                            string strSaveName = Convert.ToString(dateNowFileName);
                            strSaveName = strSaveName.Replace(':', '-');
                            wordDocument.SaveAs(mainDirectoryForSave + @"МЕСЯЧНЫЙ ПЛАН\МЕСЯЧНЫЙ ПЛАН ИСПЫТАНИЙ НА ГОД" + strSaveName + ".docx");
                            wordDocument.Close();
                        }
                        catch
                        {
                            MessageBox.Show("Ошибка!");
                            printProverka = false;
                        }
                        finally
                        {
                            oWord.Quit();
                            if (printProverka)
                                functionMessageShow(2, "План испытаний на год напечатан!");
                            label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = ""));
                            button116.BeginInvoke((MethodInvoker)(() => this.button116.Enabled = true));
                            button117.BeginInvoke((MethodInvoker)(() => this.button116.Enabled = true));
                            button118.BeginInvoke((MethodInvoker)(() => this.button116.Enabled = true));
                            button119.BeginInvoke((MethodInvoker)(() => this.button116.Enabled = true));
                            button120.BeginInvoke((MethodInvoker)(() => this.button116.Enabled = true));
                            button290.BeginInvoke((MethodInvoker)(() => this.button290.Enabled = true));
                        }
                    }).Start();
                }
                else
                    functionMessageShow(1, "Не найден объем испытаний на данный период!");
            }
        }
        
        //Печать потребности в комплектующих элементов для обеспечения коннтрольных испытаний
        private void button120_Click(object sender, EventArgs e)
        {
            Form15 form15 = new Form15(false, false);
            form15.ShowDialog();
            string year = form15.numericUpDown1.Text;
            string month = form15.comboBox1.Text;
            //Количество экземпляров
            string countEkz = form15.textBox2.Text;
            //Учетный номер
            string uchNumber = form15.textBox1.Text;
            if (form15.exitAgree)
            {
                functionQueryVIspMespl(year);
                functionQueryPlIspMespl(month, year);
                //functionQueryVK();
                functionQueryNoneVk();
                pkEMesplList.Clear();
                pkENoneVKMesplList.Clear();
                if (plIspMesplList.Count > 0)
                {
                    functionVKEForming();
                    if (pkEMesplList.Count > 0)
                    {
                        //Разделение справки о потребности комплектующих элементов на С и НС
                        if (DialogResult.Yes == MessageBox.Show("Распечатать справку в полном объеме?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        {
                            bool printProverka = true;
                            button116.Enabled = false;
                            button117.Enabled = false;
                            button118.Enabled = false;
                            button119.Enabled = false;
                            button120.Enabled = false;
                            button290.Enabled = false;
                            //WORD
                            label126.Text = "Печать: подготовка документа к печати";
                            new Thread(() =>
                            {
                                Word.Application oWord = new Word.Application();
                                oWord.Visible = false;
                                try
                                {
                                    //Открытие документа
                                    Word.Document wordDocument = oWord.Documents.Open(templateFileNameWordQueryPotr);
                                    //Поиск и замена текста
                                    functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                                    functionReplaceInText(wordDocument, oWord, "{month}", month);
                                    functionReplaceInText(wordDocument, oWord, "{year}", year);
                                    //Добавление в файл таблицы
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание титульного листа"));
                                    wordDocument.Paragraphs.Add();
                                    Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                                    var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                    wordDocument.Tables.Add(range, 1, 3, autoFitBehavior);
                                    Word.Table oTable = wordDocument.Tables[1];
                                    string[] nameHeaderTable = { "Комплектующий элемент", "Единица\nизмерения", "Потребность на месяц", "Комплектующий элемент", "Единица\nизмерения", "Потребность на месяц", "Комплектующий элемент", "Единица\nизмерения", "Потребность на месяц" };
                                    for (int i = 0; i < oTable.Columns.Count; i++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                        wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                        wordCellRange.Text = nameHeaderTable[i];
                                    }
                                    int countKompEl = pkEMesplList.Count;
                                    int positionRows = 2;
                                    int positionCells = 1;
                                    int printKECount = 1;
                                    oTable.Rows.Add();
                                    oTable.Rows[1].HeadingFormat = -1;
                                    foreach (ClassPKEMespl pk in pkEMesplList)
                                    {
                                        label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: печать комплектующих элементов " + printKECount + " из " + countKompEl));
                                        printKECount++;
                                        if (positionCells >= 3)
                                        {
                                            positionCells = 1;
                                            oTable.Rows.Add();
                                            positionRows++;
                                        }
                                        for (int j = 0; j < 3; j++)
                                        {
                                            Word.Range wordCellRange = oTable.Cell(positionRows, positionCells).Range;
                                            positionCells++;
                                            if (j == 0)
                                                wordCellRange.Text = (printKECount - 1) + ".   " + pk.codeEKElement + "\n" + pk.pictureEKElement + "\n" + pk.indexEKElement + "\n" + pk.nameEKElement;
                                            if (j == 1)
                                                wordCellRange.Text = pk.edIzmName;
                                            if (j == 2)
                                                wordCellRange.Text = Convert.ToString(Math.Ceiling(pk.potrKE));
                                        }
                                    }
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание экземпляров"));
                                    //Создание экземпляров
                                    wordDocument.Range().Copy();
                                    var rangeAllDocument = wordDocument.Content;
                                    rangeAllDocument.Find.ClearFormatting();
                                    rangeAllDocument.Find.Execute(FindText: "{numberEkz}", ReplaceWith: "1");
                                    for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                                    {
                                        //В конец документа
                                        object what = Word.WdGoToItem.wdGoToLine;
                                        object which = Word.WdGoToDirection.wdGoToLast;
                                        Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                        //Создаем разрыв РАЗДЕЛА (не страниц)
                                        endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                        //Вставляем
                                        endRange.Paste();
                                        rangeAllDocument = wordDocument.Content;
                                        rangeAllDocument.Find.ClearFormatting();
                                        rangeAllDocument.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                    }
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: сохранение документа"));
                                    //Сохранение
                                    dateNowFileName = DateTime.Now;
                                    string strSaveName = Convert.ToString(dateNowFileName);
                                    strSaveName = strSaveName.Replace(':', '-');
                                    wordDocument.SaveAs(mainDirectoryForSave + @"МЕСЯЧНЫЙ ПЛАН\МЕСЯЧНАЯ ПОТРЕБНОСТЬ В КЭ " + strSaveName + ".docx");
                                    wordDocument.Close();
                                }
                                catch
                                {
                                    MessageBox.Show("Ошибка!");
                                    printProverka = false;
                                }
                                finally
                                {
                                    oWord.Quit();
                                    if (printProverka)
                                        functionMessageShow(2, "Потребность в КЭ для обеспечения плана испытаний напечатана!");
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = ""));
                                    button116.BeginInvoke((MethodInvoker)(() => this.button116.Enabled = true));
                                    button117.BeginInvoke((MethodInvoker)(() => this.button117.Enabled = true));
                                    button118.BeginInvoke((MethodInvoker)(() => this.button118.Enabled = true));
                                    button119.BeginInvoke((MethodInvoker)(() => this.button119.Enabled = true));
                                    button120.BeginInvoke((MethodInvoker)(() => this.button120.Enabled = true));
                                    button290.BeginInvoke((MethodInvoker)(() => this.button290.Enabled = true));
                                }
                            }).Start();
                        }
                        else
                        {
                            bool printProverka = true;
                            button116.Enabled = false;
                            button117.Enabled = false;
                            button118.Enabled = false;
                            button119.Enabled = false;
                            button120.Enabled = false;
                            button290.Enabled = false;
                            //WORD
                            label126.Text = "Печать: подготовка документа к печати";
                            new Thread(() =>
                            {
                                Word.Application oWord = new Word.Application();
                                oWord.Visible = false;
                                try
                                {
                                    //Открытие документа
                                    Word.Document wordDocument = oWord.Documents.Open(templateFileNameWordQueryPotrNoSecret);
                                    //Поиск и замена текста
                                    functionReplaceInText(wordDocument, oWord, "{month}", month);
                                    functionReplaceInText(wordDocument, oWord, "{year}", year);
                                    //Добавление в файл таблицы
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание титульного листа"));
                                    wordDocument.Paragraphs.Add();
                                    Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                                    var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                    wordDocument.Tables.Add(range, 1, 3, autoFitBehavior);
                                    Word.Table oTable = wordDocument.Tables[1];
                                    string[] nameHeaderTable = { "Комплектующий элемент", "Единица\nизмерения", "Потребность на месяц", "Комплектующий элемент", "Единица\nизмерения", "Потребность на месяц", "Комплектующий элемент", "Единица\nизмерения", "Потребность на месяц" };
                                    for (int i = 0; i < oTable.Columns.Count; i++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                        wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                        wordCellRange.Text = nameHeaderTable[i];
                                    }
                                    int countKompEl = pkEMesplList.Count;
                                    int positionRows = 2;
                                    int positionCells = 1;
                                    int printKECount = 1;
                                    oTable.Rows.Add();
                                    oTable.Rows[1].HeadingFormat = -1;
                                    foreach (ClassPKEMespl pk in pkEMesplList)
                                    {
                                        label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: печать комплектующих элементов " + printKECount + " из " + countKompEl));
                                        printKECount++;
                                        if (positionCells >= 3)
                                        {
                                            positionCells = 1;
                                            oTable.Rows.Add();
                                            positionRows++;
                                        }
                                        for (int j = 0; j < 3; j++)
                                        {
                                            Word.Range wordCellRange = oTable.Cell(positionRows, positionCells).Range;
                                            positionCells++;
                                            if (j == 0)
                                                if (pk.indexEKElement.Length > 0)
                                                    wordCellRange.Text = (printKECount - 1) + ".   " + pk.indexEKElement;
                                                else
                                                    wordCellRange.Text = (printKECount - 1) + ".   " + pk.nameEKElement;
                                            if (j == 1)
                                                wordCellRange.Text = pk.edIzmCode + "\n" + pk.edIzmName;
                                            if (j == 2)
                                                wordCellRange.Text = Convert.ToString(Math.Ceiling(pk.potrKE));
                                        }
                                    }
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание экземпляров"));
                                    //Создание экземпляров
                                    wordDocument.Range().Copy();
                                    var rangeAllDocument = wordDocument.Content;
                                    rangeAllDocument.Find.ClearFormatting();
                                    rangeAllDocument.Find.Execute(FindText: "{numberEkz}", ReplaceWith: "1");
                                    for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                                    {
                                        //В конец документа
                                        object what = Word.WdGoToItem.wdGoToLine;
                                        object which = Word.WdGoToDirection.wdGoToLast;
                                        Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                        //Создаем разрыв РАЗДЕЛА (не страниц)
                                        endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                        //Вставляем
                                        endRange.Paste();
                                        rangeAllDocument = wordDocument.Content;
                                        rangeAllDocument.Find.ClearFormatting();
                                        rangeAllDocument.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                    }
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: сохранение документа"));
                                    //Сохранение
                                    dateNowFileName = DateTime.Now;
                                    string strSaveName = Convert.ToString(dateNowFileName);
                                    strSaveName = strSaveName.Replace(':', '-');
                                    wordDocument.SaveAs(mainDirectoryForSave + @"МЕСЯЧНЫЙ ПЛАН\МЕСЯЧНАЯ ПОТРЕБНОСТЬ В КЭ (НС) " + strSaveName + ".docx");
                                    wordDocument.Close();
                                }
                                catch
                                {
                                    MessageBox.Show("Ошибка!");
                                    printProverka = false;
                                }
                                finally
                                {
                                    oWord.Quit();
                                    if (printProverka)
                                        functionMessageShow(2, "Потребность в КЭ (НС) для обеспечения плана испытаний напечатана!");
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = ""));
                                    button116.BeginInvoke((MethodInvoker)(() => this.button116.Enabled = true));
                                    button117.BeginInvoke((MethodInvoker)(() => this.button117.Enabled = true));
                                    button118.BeginInvoke((MethodInvoker)(() => this.button118.Enabled = true));
                                    button119.BeginInvoke((MethodInvoker)(() => this.button119.Enabled = true));
                                    button120.BeginInvoke((MethodInvoker)(() => this.button120.Enabled = true));
                                    button290.BeginInvoke((MethodInvoker)(() => this.button290.Enabled = true));
                                }
                            }).Start();
                        }
                    }
                    else
                        functionMessageShow(1, "Не найдена потребность в комплектующих!");
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //Печать потребности в комплектующих элементов (НС) для 10 отдела
        private void button290_Click(object sender, EventArgs e)
        {
            Form23 form23 = new Form23();
            form23.ShowDialog();
            string year = form23.numericUpDown1.Text;
            string month = "";
            if(form23.isMonth)
                month = form23.comboBox1.Text;
            bool sortCalibr = false;
            if (form23.checkBox1.Checked)
                sortCalibr = true;
            if (form23.exitAgree)
            {
                functionQueryVIspMespl(year);
                if (form23.isMonth)
                    functionQueryPlIspMespl(month, year);
                else
                    functionQueryPlIspMespl(year);
                //functionQueryVK();
                functionQueryNoneVk();
                pkEMesplList.Clear();
                pkENoneVKMesplList.Clear();
                if (plIspMesplList.Count > 0)
                {
                    functionVKENSForming();
                    if (pkENSMesplList.Count > 0 && sortedPKENSMesplList.Count() > 0)
                    {
                        bool printProverka = true;
                        button116.Enabled = false;
                        button117.Enabled = false;
                        button118.Enabled = false;
                        button119.Enabled = false;
                        button120.Enabled = false;
                        button290.Enabled = false;
                        //EXCEL
                        label126.Text = "Печать: подготовка документа к печати";
                        new Thread(() =>
                        {
                            Excel.Application oExcel = new Excel.Application();
                            oExcel.Visible = true;
                            try
                            {
                                oExcel.SheetsInNewWorkbook = 1;
                                oExcel.Workbooks.Add();
                                Excel.Workbooks excelWorkBooks = oExcel.Workbooks;
                                Excel.Workbook excelWorkBook = excelWorkBooks[1];
                                excelWorkBook.Saved = false;
                                Excel.Sheets excelSheets = oExcel.Worksheets;
                                Excel.Worksheet excelWorkSheets = excelSheets.get_Item(1);
                                string[] nameHeaderTable = { "Предприятие", "Испытуемый эл-т", "Количество испытуемых", "Технологические", "Итого", "", "Стоимость", "Дефицит", "Общая сумма" };
                                string[] columns = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", 
                                                   "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AT", "AU", "AV", "AW", "AX", "AY", "AZ", 
                                                   "BA", "BB", "BC", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BK", "BL", "BM", "BN", "BO", "BP", "BQ", "BR", "BS", "BT", "BU", "BV", "BW", "BX", "BY", "BZ", 
                                                   "CA", "CB", "CC", "CD", "CE", "CF", "CG", "CH", "CI", "CJ", "CK", "CL", "CM", "CN", "CO", "CP", "CQ", "CR", "CS", "CT", "CU", "CV", "CW", "CX", "CY", "CZ",
                                                   "DA", "DB", "DC", "DD", "DE", "DF", "DG", "DH", "DI", "DJ", "DK", "DL", "DM", "DN", "DO", "DP", "DQ", "DR", "DS", "DT", "DU", "DV", "DW", "DX", "DY", "DZ",
                                                   "EA", "EB", "EC", "ED", "EE", "EF", "EG", "EH", "EI", "EJ", "EK", "EL", "EM", "EN", "EO", "EP", "EQ", "ER", "ES", "ET", "EU", "EV", "EW", "EX", "EY", "EZ",
                                                   "FA", "FB", "FC", "FD", "FE", "FF", "FG", "FH", "FI", "FJ", "FK", "FL", "FM", "FN", "FO", "FP", "FQ", "FR", "FS", "FT", "FU", "FV", "FW", "FX", "FY", "FZ",
                                                   "GA", "GB", "GC", "GD", "GE", "GF", "GG", "GH", "GI", "GJ", "GK", "GL", "GM", "GN", "GO", "GP", "GQ", "GR", "GS", "GT", "GU", "GV", "GW", "GX", "GY", "GZ",
                                                   "HA", "HB", "HC", "HD", "HE", "HF", "HG", "HH", "HI", "HJ", "HK", "HL", "HM", "HN", "HO", "HP", "HQ", "HR", "HS", "HT", "HU", "HV", "HW", "HX", "HY", "HZ",
                                                   "IA", "IB", "IC", "ID", "IE", "IF", "IG", "IH", "II", "IJ", "IK", "IL", "IM", "IN", "IO", "IP", "IQ", "IR", "IS", "IT", "IU", "IV", "IW", "IX", "IY", "IZ",
                                                   "JA", "JB", "JC", "JD", "JE", "JF", "JG", "JH", "JI", "JJ", "JK", "JL", "JM", "JN", "JO", "JP", "JQ", "JR", "JS", "JT", "JU", "JV", "JW", "JX", "JY", "JZ",
                                                   "KA", "KB", "KC", "KD", "KE", "KF", "KG", "KH", "KI", "KJ", "KK", "KL", "KM", "KN", "KO", "KP", "KQ", "KR", "KS", "KT", "KU", "KV", "KW", "KX", "KY", "KZ",
                                                   "LA", "LB", "LC", "LD", "LE", "LF", "LG", "LH", "LI", "LJ", "LK", "LL", "LM", "LN", "LO", "LP", "LQ", "LR", "LS", "LT", "LU", "LV", "LW", "LX", "LY", "LZ",
                                                   "MA", "MB", "MC", "MD", "ME", "MF", "MG", "MH", "MI", "MJ", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ",
                                                   "NA", "NB", "NC", "ND", "NE", "NF", "NG", "NH", "NI", "NJ", "NK", "NL", "NM", "NN", "NO", "NP", "NQ", "NR", "NS", "NT", "NU", "NV", "NW", "NX", "NY", "NZ",
                                                   "OA", "OB", "OC", "OD", "OE", "OF", "OG", "OH", "OI", "OJ", "OK", "OL", "OM", "ON", "OO", "OP", "OQ", "OR", "OS", "OT", "OU", "OV", "OW", "OX", "OY", "OZ",
                                                   "PA", "PB", "PC", "PD", "PE", "PF", "PG", "PH", "PI", "PJ", "PK", "PL", "PM", "PN", "PO", "PP", "PQ", "PR", "PS", "PT", "PU", "PV", "PW", "PX", "PY", "PZ",
                                                   "QA", "QB", "QC", "QD", "QE", "QF", "QG", "QH", "QI", "QJ", "QK", "QL", "QM", "QN", "QO", "QP", "QQ", "QR", "QS", "QT", "QU", "QV", "QW", "QX", "QY", "QZ",
                                                   "RA", "RB", "RC", "RD", "RE", "RF", "RG", "RH", "RI", "RJ", "RK", "RL", "RM", "RN", "RO", "RP", "RQ", "RR", "RS", "RT", "RU", "RV", "RW", "RX", "RY", "RZ",
                                                   "SA", "SB", "SC", "SD", "SE", "SF", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SP", "SQ", "SR", "SS", "ST", "SU", "SV", "SW", "SX", "SY", "SZ",
                                                   "TA", "TB", "TC", "TD", "TE", "TF", "TG", "TH", "TI", "TJ", "TK", "TL", "TM", "TN", "TO", "TP", "TQ", "TR", "TS", "TT", "TU", "TV", "TW", "TX", "TY", "TZ",
                                                   "UA", "UB", "UC", "UD", "UE", "UF", "UG", "UH", "UI", "UJ", "UK", "UL", "UM", "UN", "UO", "UP", "UQ", "UR", "US", "UT", "UU", "UV", "UW", "UX", "UY", "UZ",
                                                   "VA", "VB", "VC", "VD", "VE", "VF", "VG", "VH", "VI", "VJ", "VK", "VL", "VM", "VN", "VO", "VP", "VQ", "VR", "VS", "VT", "VU", "VV", "VW", "VX", "VY", "VZ",
                                                   "WA", "WB", "WC", "WD", "WE", "WF", "WG", "WH", "WI", "WJ", "WK", "WL", "WM", "WN", "WO", "WP", "WQ", "WR", "WS", "WT", "WU", "WV", "WW", "WX", "WY", "WZ",
                                                   "XA", "XB", "XC", "XD", "XE", "XF", "XG", "XH", "XI", "XJ", "XK", "XL", "XM", "XN", "XO", "XP", "XQ", "XR", "XS", "XT", "XU", "XV", "XW", "XX", "XY", "XZ",
                                                   "YA", "YB", "YC", "YD", "YE", "YF", "YG", "YH", "YI", "YJ", "YK", "YL", "YM", "YN", "YO", "YP", "YQ", "YR", "YS", "YT", "YU", "YV", "YW", "YX", "YY", "YZ",
                                                   "ZA", "ZB", "ZC", "ZD", "ZE", "ZF", "ZG", "ZH", "ZI", "ZJ", "ZK", "ZL", "ZM", "ZN", "ZO", "ZP", "ZQ", "ZR", "ZS", "ZT", "ZU", "ZV", "ZW", "ZX", "ZY", "ZZ",
                                                   "AAA", "AAB", "AAC", "AAD", "AAE", "AAF", "AAG", "AAH", "AAI", "AAJ", "AAK", "AAL", "AAM", "AAN", "AAO", "AAP", "AAQ", "AAR", "AAS", "AAT", "AAU", "AAV", "AAW", "AAX", "AAY", "AAZ",
                                                   "ABA", "ABB", "ABC", "ABD", "ABE", "ABF", "ABG", "ABH", "ABI", "ABJ", "ABK", "ABL", "ABM", "ABN", "ABO", "ABP", "ABQ", "ABR", "ABS", "ABT", "ABU", "ABV", "ABW", "ABX", "ABY", "ABZ"};
                                if (sortCalibr)
                                {
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание шапки документа"));
                                    Excel.Range excelCells;
                                    excelWorkSheets.Name = "Остальные";
                                    for (int i = 0; i < 4; i++)
                                    {
                                        excelCells = excelWorkSheets.get_Range(columns[0] + (i + 2));
                                        excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                        excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                        excelCells.Font.Bold = true;
                                        excelCells.Value2 = nameHeaderTable[i];
                                    }
                                    excelWorkSheets.Columns[1].EntireColumn.AutoFit();
                                    List<ClassCalibrList> calibrList = new List<ClassCalibrList>();
                                    ClassCalibrList firstCalibr = new ClassCalibrList();
                                    firstCalibr.posInRows = 5;
                                    firstCalibr.posInCollumns = 1;
                                    firstCalibr.codeCalibr = "Остальные";
                                    calibrList.Add(firstCalibr);
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: печать потребности"));
                                    foreach (ClassPKENSMespl pk in sortedPKENSMesplList)
                                    {
                                        string[] arrCalibrMC = { };
                                        if (pk.fi.nameSysFIMespl != null)
                                            arrCalibrMC = pk.fi.nameSysFIMespl.Split('-');
                                        string strCalibrMC = "";
                                        if (arrCalibrMC.Length > 0)
                                            strCalibrMC = arrCalibrMC[0];
                                        int prIntRes = 0;
                                        if (Int32.TryParse(strCalibrMC, out prIntRes))
                                        {
                                            if (ClassCalibrList.calibrList.Contains(Convert.ToString(prIntRes)))
                                            {
                                                int positionInCalList = 1;
                                                foreach (string cal in ClassCalibrList.calibrList)
                                                    if (cal == prIntRes.ToString())
                                                        break;
                                                    else
                                                        positionInCalList++;
                                                excelWorkSheets = excelSheets.get_Item(positionInCalList + 1);
                                                //Выводим элемент
                                                excelCells = excelWorkSheets.get_Range(columns[calibrList[positionInCalList].posInCollumns] + 2);
                                                excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                                excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                                excelCells.WrapText = true;
                                                excelCells.Orientation = 90;
                                                excelCells.Value2 = pk.pl.nameFactoryPlIspMespl;
                                                excelCells = excelWorkSheets.get_Range(columns[calibrList[positionInCalList].posInCollumns] + 3);
                                                excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                                excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                                excelCells.WrapText = true;
                                                excelCells.Orientation = 90;
                                                if (pk.pl.indexElementPlIspMespl.Length > 0)
                                                    excelCells.Value2 = pk.pl.indexElementPlIspMespl.Replace('-', '‐');
                                                else
                                                    excelCells.Value2 = pk.pl.nameElementPlIspMespl;
                                                excelCells = excelWorkSheets.get_Range(columns[calibrList[positionInCalList].posInCollumns] + 4);
                                                excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                                excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                                excelCells.Value2 = pk.pl.countShotPlIspMespl;
                                                foreach (ClassVKMesplElements el in pk.vk.listElements)
                                                {
                                                    int posKElementInExcel = 5;
                                                    if (calibrList[positionInCalList].keList.Count > 0)
                                                    {
                                                        int prPosKElementInExcel = 5;
                                                        bool proverkaElInElList = false;
                                                        foreach (ClassElements vkEl in calibrList[positionInCalList].keList.ToArray())
                                                        {
                                                            if (vkEl.getCode() == el.el.getCode())
                                                            {
                                                                posKElementInExcel = prPosKElementInExcel;
                                                                proverkaElInElList = true;
                                                                break;
                                                            }
                                                            prPosKElementInExcel++;
                                                        }
                                                        if (!proverkaElInElList)
                                                        {
                                                            calibrList[positionInCalList].keList.Add(el.el);
                                                            posKElementInExcel = calibrList[positionInCalList].posInRows;
                                                            calibrList[positionInCalList].posInRows++;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        calibrList[positionInCalList].keList.Add(el.el);
                                                        posKElementInExcel = calibrList[positionInCalList].posInRows;
                                                        calibrList[positionInCalList].posInRows++;
                                                    }
                                                    excelCells = excelWorkSheets.get_Range("A" + (posKElementInExcel + 1));
                                                    excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                                    excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                                    excelCells.WrapText = true;
                                                    if (el.el.getIndex().Length > 0)
                                                        excelCells.Value2 = el.el.getIndex().Replace('-', '‐');
                                                    else
                                                        excelCells.Value2 = el.el.getName();
                                                    excelCells = excelWorkSheets.get_Range(columns[calibrList[positionInCalList].posInCollumns] + (posKElementInExcel + 1));
                                                    if (pk.pl.countShotPlIspMespl.Length > 0)
                                                    {
                                                        excelCells.FormulaLocal = "=(" + columns[calibrList[positionInCalList].posInCollumns] + 4 + "+" + columns[calibrList[positionInCalList].posInCollumns] + 5 + ")*" + Convert.ToString(el.countVKMespl);
                                                    }
                                                }
                                                calibrList[positionInCalList].posInCollumns++;
                                            }
                                            else
                                            {
                                                ClassCalibrList.calibrList.Add(Convert.ToString(prIntRes));
                                                ClassCalibrList newCalibr = new ClassCalibrList();
                                                newCalibr.posInRows = 5;
                                                newCalibr.posInCollumns = 1;
                                                newCalibr.codeCalibr = Convert.ToString(prIntRes);
                                                calibrList.Add(newCalibr);
                                                excelWorkSheets = excelSheets.get_Item(calibrList.Count - 1);
                                                oExcel.Worksheets.Add(After: excelWorkSheets);
                                                excelWorkSheets = excelSheets.get_Item(calibrList.Count);
                                                excelWorkSheets.Name = newCalibr.codeCalibr;
                                                for (int i = 0; i < 4; i++)
                                                {
                                                    excelCells = excelWorkSheets.get_Range(columns[0] + (i + 2));
                                                    excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                                    excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                                    excelCells.Font.Bold = true;
                                                    excelCells.Value2 = nameHeaderTable[i];
                                                }
                                                excelWorkSheets.Columns[1].EntireColumn.AutoFit();
                                                //Выводим элемент
                                                excelCells = excelWorkSheets.get_Range(columns[newCalibr.posInCollumns] + 2);
                                                excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                                excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                                excelCells.WrapText = true;
                                                excelCells.Orientation = 90;
                                                excelCells.Value2 = pk.pl.nameFactoryPlIspMespl;
                                                excelCells = excelWorkSheets.get_Range(columns[newCalibr.posInCollumns] + 3);
                                                excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                                excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                                excelCells.WrapText = true;
                                                excelCells.Orientation = 90;
                                                if (pk.pl.indexElementPlIspMespl.Length > 0)
                                                    excelCells.Value2 = pk.pl.indexElementPlIspMespl.Replace('-', '‐');
                                                else
                                                    excelCells.Value2 = pk.pl.nameElementPlIspMespl;
                                                excelCells = excelWorkSheets.get_Range(columns[newCalibr.posInCollumns] + 4);
                                                excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                                excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                                excelCells.Value2 = pk.pl.countShotPlIspMespl;
                                                foreach (ClassVKMesplElements el in pk.vk.listElements)
                                                {
                                                    int posKElementInExcel = 5;
                                                    if (newCalibr.keList.Count > 0)
                                                    {
                                                        int prPosKElementInExcel = 5;
                                                        bool proverkaElInElList = false;
                                                        foreach (ClassElements vkEl in newCalibr.keList.ToArray())
                                                        {
                                                            if (vkEl.getCode() == el.el.getCode())
                                                            {
                                                                posKElementInExcel = prPosKElementInExcel;
                                                                proverkaElInElList = true;
                                                                break;
                                                            }
                                                            prPosKElementInExcel++;
                                                        }
                                                        if (!proverkaElInElList)
                                                        {
                                                            newCalibr.keList.Add(el.el);
                                                            posKElementInExcel = newCalibr.posInRows;
                                                            newCalibr.posInRows++;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        newCalibr.keList.Add(el.el);
                                                        posKElementInExcel = newCalibr.posInRows;
                                                        newCalibr.posInRows++;
                                                    }
                                                    excelCells = excelWorkSheets.get_Range("A" + (posKElementInExcel + 1));
                                                    excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                                    excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                                    excelCells.WrapText = true;
                                                    if (el.el.getIndex().Length > 0)
                                                        excelCells.Value2 = el.el.getIndex().Replace('-', '‐');
                                                    else
                                                        excelCells.Value2 = el.el.getName();
                                                    excelCells = excelWorkSheets.get_Range(columns[newCalibr.posInCollumns] + (posKElementInExcel + 1));
                                                    if (pk.pl.countShotPlIspMespl.Length > 0)
                                                    {
                                                        excelCells.FormulaLocal = "=(" + columns[newCalibr.posInCollumns] + 4 + "+" + columns[newCalibr.posInCollumns] + 5 + ")*" + Convert.ToString(el.countVKMespl);
                                                    }
                                                }
                                                newCalibr.posInCollumns++;
                                            }
                                        }
                                        else
                                        {
                                            excelWorkSheets = excelSheets.get_Item(1);
                                            excelCells = excelWorkSheets.get_Range(columns[firstCalibr.posInCollumns] + 2);
                                            excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                            excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                            excelCells.WrapText = true;
                                            excelCells.Orientation = 90;
                                            excelCells.Value2 = pk.pl.nameFactoryPlIspMespl;
                                            excelCells = excelWorkSheets.get_Range(columns[firstCalibr.posInCollumns] + 3);
                                            excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                            excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                            excelCells.WrapText = true;
                                            excelCells.Orientation = 90;
                                            if (pk.pl.indexElementPlIspMespl.Length > 0)
                                                excelCells.Value2 = pk.pl.indexElementPlIspMespl.Replace('-', '‐');
                                            else
                                                excelCells.Value2 = pk.pl.nameElementPlIspMespl;
                                            excelCells = excelWorkSheets.get_Range(columns[firstCalibr.posInCollumns] + 4);
                                            excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                            excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                            excelCells.Value2 = pk.pl.countShotPlIspMespl;
                                            foreach (ClassVKMesplElements el in pk.vk.listElements)
                                            {
                                                int posKElementInExcel = 5;
                                                if (firstCalibr.keList.Count > 0)
                                                {
                                                    int prPosKElementInExcel = 5;
                                                    bool proverkaElInElList = false;
                                                    foreach (ClassElements vkEl in firstCalibr.keList.ToArray())
                                                    {
                                                        if (vkEl.getCode() == el.el.getCode())
                                                        {
                                                            posKElementInExcel = prPosKElementInExcel;
                                                            proverkaElInElList = true;
                                                            break;
                                                        }
                                                        prPosKElementInExcel++;
                                                    }
                                                    if (!proverkaElInElList)
                                                    {
                                                        firstCalibr.keList.Add(el.el);
                                                        posKElementInExcel = firstCalibr.posInRows;
                                                        firstCalibr.posInRows++;
                                                    }
                                                }
                                                else
                                                {
                                                    firstCalibr.keList.Add(el.el);
                                                    posKElementInExcel = firstCalibr.posInRows;
                                                    firstCalibr.posInRows++;
                                                }
                                                excelCells = excelWorkSheets.get_Range("A" + (posKElementInExcel + 1));
                                                excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                                excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                                excelCells.WrapText = true;
                                                if (el.el.getIndex().Length > 0)
                                                    excelCells.Value2 = el.el.getIndex().Replace('-', '‐');
                                                else
                                                    excelCells.Value2 = el.el.getName();
                                                excelCells = excelWorkSheets.get_Range(columns[firstCalibr.posInCollumns] + (posKElementInExcel + 1));
                                                if (pk.pl.countShotPlIspMespl.Length > 0)
                                                {
                                                    excelCells.FormulaLocal = "=(" + columns[firstCalibr.posInCollumns] + 4 + "+" + columns[firstCalibr.posInCollumns] + 5 + ")*" + Convert.ToString(el.countVKMespl);
                                                }
                                            }
                                            firstCalibr.posInCollumns++;
                                        }
                                    }
                                    //Итоги
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: печать итогов"));
                                    int getExcelSheets = 1;
                                    foreach (ClassCalibrList cal in calibrList)
                                    {
                                        int positionInRowsExcel = 6;
                                        excelWorkSheets = excelSheets.get_Item(getExcelSheets);
                                        getExcelSheets++;
                                        foreach (ClassElements el in cal.keList)
                                        {
                                            //Повторный вывод элементов
                                            excelCells = excelWorkSheets.get_Range(columns[cal.posInCollumns + 1] + positionInRowsExcel);
                                            excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                            excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                            excelCells.WrapText = true;
                                            if (el.getIndex().Length > 0)
                                                excelCells.Value2 = el.getIndex().Replace('-', '‐');
                                            else
                                                excelCells.Value2 = el.getName();
                                            //Подсчет итогов
                                            excelCells = excelWorkSheets.get_Range(columns[cal.posInCollumns] + positionInRowsExcel);
                                            excelCells.FormulaLocal = "=СУММ(B" + positionInRowsExcel + ":" + columns[cal.posInCollumns - 1] + positionInRowsExcel + ")";
                                            //Стоимость
                                            excelCells = excelWorkSheets.get_Range(columns[cal.posInCollumns + 2] + positionInRowsExcel);
                                            foreach (ClassCenaKE cena in cenaKEList)
                                            {
                                                if (cena.codeElementKE == el.getCode())
                                                    excelCells.Value2 = cena.cenaKE;
                                            }
                                            //Дефицит
                                            excelCells = excelWorkSheets.get_Range(columns[cal.posInCollumns + 3] + positionInRowsExcel);
                                            excelCells.Value2 = "";
                                            //Общая сумма
                                            excelCells = excelWorkSheets.get_Range(columns[cal.posInCollumns + 4] + positionInRowsExcel);
                                            excelCells.FormulaLocal = "=" + columns[cal.posInCollumns] + positionInRowsExcel + "*" + columns[cal.posInCollumns + 2] + positionInRowsExcel + "*1,18";
                                            positionInRowsExcel++;
                                        }
                                        for (int i = 0; i < 5; i++)
                                        {
                                            excelCells = excelWorkSheets.get_Range(columns[cal.posInCollumns] + 2, columns[cal.posInCollumns] + 5);
                                            excelCells.Merge();
                                            excelCells.Orientation = 90;
                                            excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                            excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                            excelCells.Value2 = nameHeaderTable[i + 4];
                                            cal.posInCollumns++;
                                        }
                                        excelCells = excelWorkSheets.get_Range("A1", columns[cal.posInCollumns - 1] + "1");
                                        excelCells.Merge();
                                        excelCells.RowHeight = 21;
                                        excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                        excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                        if (month.Length > 0)
                                            excelCells.Value2 = "Результ потребности в комплектующих на " + month + " " + year + " года (" + Convert.ToString(DateTime.Now.Date).Split(' ')[0] + ")";
                                        else
                                            excelCells.Value2 = "Результ потребности в комплектующих на " + year + " год (" + Convert.ToString(DateTime.Now.Date).Split(' ')[0] + ")";
                                        excelCells = excelWorkSheets.get_Range("A2", columns[cal.posInCollumns - 1] + (positionInRowsExcel - 1));
                                        excelCells.Borders.LineStyle = Excel.XlLineStyle.xlContinuous;
                                        excelCells.Borders.Weight = Excel.XlBorderWeight.xlThin;
                                        excelCells.Font.Name = "Times New Roman";
                                        excelCells.Font.Size = 10;
                                        excelCells = excelWorkSheets.get_Range("A2", columns[cal.posInCollumns - 1] + 5);
                                        excelCells.Borders.LineStyle = Excel.XlLineStyle.xlContinuous;
                                        excelCells.Borders.Weight = Excel.XlBorderWeight.xlMedium;
                                        //Объединение предприятий
                                        Excel.Range excelCells2;
                                        string strka;
                                        string strka2;
                                        for (int i = cal.posInCollumns - 5; i > 1; i--)
                                        {
                                            excelCells = excelWorkSheets.get_Range(columns[i] + "2");
                                            strka = Convert.ToString(excelCells.Value2);
                                            excelCells2 = excelWorkSheets.get_Range(columns[i - 1] + "2");
                                            strka2 = Convert.ToString(excelCells2.Value2);
                                            if (strka == strka2)
                                            {
                                                excelWorkSheets.get_Range(columns[i] + "2", columns[i - 1] + "2").Value2 = "";
                                                excelWorkSheets.get_Range(columns[i] + "2", columns[i - 1] + "2").Merge();
                                                excelCells2.Value2 = strka;
                                            }
                                        }
                                        //Сумирование сумм
                                        excelCells = excelWorkSheets.get_Range(columns[cal.posInCollumns - 1] + positionInRowsExcel);
                                        excelCells.FormulaLocal = "=СУММ(" + columns[cal.posInCollumns - 1] + "6:" + columns[cal.posInCollumns - 1] + (positionInRowsExcel - 1) + ")";
                                    }
                                }
                                else
                                {
                                    excelWorkSheets.Name = "Все калибры";
                                    //Шапка документа
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: создание шапки документа"));
                                    Excel.Range excelCells;
                                    for (int i = 0; i < 4; i++)
                                    {
                                        excelCells = excelWorkSheets.get_Range(columns[0] + (i + 2));
                                        excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                        excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                        excelCells.Font.Bold = true;
                                        excelCells.Value2 = nameHeaderTable[i];
                                    }
                                    excelWorkSheets.Columns[1].EntireColumn.AutoFit();
                                    int positionInExcelCollumns = 1;
                                    int positionInExcelRows = 5;
                                    //Заполнение таблицы
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: печать потребности"));
                                    ClassPKENSMespl.elList.Clear();
                                    foreach (ClassPKENSMespl pk in sortedPKENSMesplList)
                                    {
                                        excelCells = excelWorkSheets.get_Range(columns[positionInExcelCollumns] + 2);
                                        excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                        excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                        excelCells.WrapText = true;
                                        excelCells.Orientation = 90;
                                        excelCells.Value2 = pk.pl.nameFactoryPlIspMespl;
                                        excelCells = excelWorkSheets.get_Range(columns[positionInExcelCollumns] + 3);
                                        excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                        excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                        excelCells.WrapText = true;
                                        excelCells.Orientation = 90;
                                        if (pk.pl.indexElementPlIspMespl.Length > 0)
                                            excelCells.Value2 = pk.pl.indexElementPlIspMespl.Replace('-', '‐');
                                        else
                                            excelCells.Value2 = pk.pl.nameElementPlIspMespl;
                                        excelCells = excelWorkSheets.get_Range(columns[positionInExcelCollumns] + 4);
                                        excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                        excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                        excelCells.Value2 = pk.pl.countShotPlIspMespl;
                                        foreach (ClassVKMesplElements el in pk.vk.listElements)
                                        {
                                            int posKElementInExcel = 5;
                                            if (ClassPKENSMespl.elList.Count > 0)
                                            {
                                                int prPosKElementInExcel = 5;
                                                bool proverkaElInElList = false;
                                                foreach (ClassElements vkEl in ClassPKENSMespl.elList.ToArray())
                                                {
                                                    if (vkEl.getCode() == el.el.getCode())
                                                    {
                                                        posKElementInExcel = prPosKElementInExcel;
                                                        proverkaElInElList = true;
                                                        break;
                                                    }
                                                    prPosKElementInExcel++;
                                                }
                                                if (!proverkaElInElList)
                                                {
                                                    ClassPKENSMespl.elList.Add(el.el);
                                                    posKElementInExcel = positionInExcelRows;
                                                    positionInExcelRows++;
                                                }
                                            }
                                            else
                                            {
                                                ClassPKENSMespl.elList.Add(el.el);
                                                posKElementInExcel = positionInExcelRows;
                                                positionInExcelRows++;
                                            }
                                            excelCells = excelWorkSheets.get_Range("A" + (posKElementInExcel + 1));
                                            excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                            excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                            excelCells.WrapText = true;
                                            if (el.el.getIndex().Length > 0)
                                                excelCells.Value2 = el.el.getIndex().Replace('-', '‐');
                                            else
                                                excelCells.Value2 = el.el.getName();
                                            excelCells = excelWorkSheets.get_Range(columns[positionInExcelCollumns] + (posKElementInExcel + 1));
                                            if (pk.pl.countShotPlIspMespl.Length > 0)
                                            {
                                                excelCells.FormulaLocal = "=(" + columns[positionInExcelCollumns] + 4 + "+" + columns[positionInExcelCollumns] + 5 + ")*" + Convert.ToString(el.countVKMespl);
                                            }
                                        }
                                        positionInExcelCollumns++;
                                    }
                                    //Итоги
                                    label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: печать итогов"));
                                    int positionInRowsExcel = 6;
                                    foreach (ClassElements el in ClassPKENSMespl.elList)
                                    {
                                        //Повторный вывод элементов
                                        excelCells = excelWorkSheets.get_Range(columns[positionInExcelCollumns + 1] + positionInRowsExcel);
                                        excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                        excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                        excelCells.WrapText = true;
                                        if (el.getIndex().Length > 0)
                                            excelCells.Value2 = el.getIndex().Replace('-', '‐');
                                        else
                                            excelCells.Value2 = el.getName();
                                        //Подсчет итогов
                                        excelCells = excelWorkSheets.get_Range(columns[positionInExcelCollumns] + positionInRowsExcel);
                                        excelCells.FormulaLocal = "=СУММ(B" + positionInRowsExcel + ":" + columns[positionInExcelCollumns - 1] + positionInRowsExcel + ")";
                                        //Стоимость
                                        excelCells = excelWorkSheets.get_Range(columns[positionInExcelCollumns + 2] + positionInRowsExcel);
                                        foreach (ClassCenaKE cena in cenaKEList)
                                        {
                                            if (cena.codeElementKE == el.getCode())
                                                excelCells.Value2 = cena.cenaKE;
                                        }
                                        //Дефицит
                                        excelCells = excelWorkSheets.get_Range(columns[positionInExcelCollumns + 3] + positionInRowsExcel);
                                        excelCells.Value2 = "";
                                        //Общая сумма
                                        excelCells = excelWorkSheets.get_Range(columns[positionInExcelCollumns + 4] + positionInRowsExcel);
                                        //excelCells.Value2 = "=" + columns[positionInExcelCollumns] + positionInRowsExcel + "*" + columns[positionInExcelCollumns + 2] + positionInRowsExcel + "*1.18";
                                        excelCells.FormulaLocal = "=" + columns[positionInExcelCollumns] + positionInRowsExcel + "*" + columns[positionInExcelCollumns + 2] + positionInRowsExcel + "*1,18";
                                        positionInRowsExcel++;
                                    }
                                    for (int i = 0; i < 5; i++)
                                    {
                                        excelCells = excelWorkSheets.get_Range(columns[positionInExcelCollumns] + 2, columns[positionInExcelCollumns] + 5);
                                        excelCells.Merge();
                                        excelCells.Orientation = 90;
                                        excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                        excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                        excelCells.Value2 = nameHeaderTable[i + 4];
                                        positionInExcelCollumns++;
                                    }
                                    excelCells = excelWorkSheets.get_Range("A1", columns[positionInExcelCollumns - 1] + "1");
                                    excelCells.Merge();
                                    excelCells.RowHeight = 21;
                                    excelCells.HorizontalAlignment = Excel.Constants.xlCenter;
                                    excelCells.VerticalAlignment = Excel.Constants.xlCenter;
                                    if (month.Length > 0)
                                        excelCells.Value2 = "Результ потребности в комплектующих на " + month + " " + year + " года (" + Convert.ToString(DateTime.Now.Date).Split(' ')[0] + ")";
                                    else
                                        excelCells.Value2 = "Результ потребности в комплектующих на " + year + " год (" + Convert.ToString(DateTime.Now.Date).Split(' ')[0] + ")";
                                    excelCells = excelWorkSheets.get_Range("A2", columns[positionInExcelCollumns - 1] + (positionInRowsExcel - 1));
                                    excelCells.Borders.LineStyle = Excel.XlLineStyle.xlContinuous;
                                    excelCells.Borders.Weight = Excel.XlBorderWeight.xlThin;
                                    excelCells.Font.Name = "Times New Roman";
                                    excelCells.Font.Size = 10;
                                    excelCells = excelWorkSheets.get_Range("A2", columns[positionInExcelCollumns - 1] + 5);
                                    excelCells.Borders.LineStyle = Excel.XlLineStyle.xlContinuous;
                                    excelCells.Borders.Weight = Excel.XlBorderWeight.xlMedium;
                                    //Объединение предприятий
                                    Excel.Range excelCells2;
                                    string strka;
                                    string strka2;
                                    for(int i=positionInExcelCollumns - 5; i > 1; i--)
                                    {
                                        strka = "";
                                        strka2 = "";
                                        excelCells = excelWorkSheets.get_Range(columns[i] + "2");
                                        strka = Convert.ToString(excelCells.Value2);
                                        excelCells2 = excelWorkSheets.get_Range(columns[i - 1] + "2");
                                        strka2 = Convert.ToString(excelCells2.Value2);
                                        if (strka == strka2)
                                        {
                                            excelWorkSheets.get_Range(columns[i] + "2", columns[i - 1] + "2").Value2 = "";
                                            excelWorkSheets.get_Range(columns[i] + "2", columns[i - 1] + "2").Merge();
                                            excelCells2.Value2 = strka;
                                        }
                                    }
                                    //Сумирование сумм
                                    excelCells = excelWorkSheets.get_Range(columns[positionInExcelCollumns - 1] + positionInRowsExcel);
                                    excelCells.FormulaLocal = "=СУММ(" + columns[positionInExcelCollumns - 1] + "6:" + columns[positionInExcelCollumns - 1] + (positionInRowsExcel - 1) + ")";
                                }
                                //Сохранение
                                label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = "Печать: сохранение документа"));
                                string strSaveName = Convert.ToString(DateTime.Now);
                                strSaveName = strSaveName.Replace(':', '-');
                                excelWorkBook.SaveAs(mainDirectoryForSave + @"МЕСЯЧНЫЙ ПЛАН\МЕСЯЧНАЯ ПОТРЕБНОСТЬ В КЭ (НС) " + strSaveName + ".xlsx");
                                excelWorkBook.Close();
                                //oExcel.Windows[1].Close();
                            }
                            catch
                            {
                                MessageBox.Show("Ошибка!");
                                printProverka = false;
                            }
                            finally
                            {
                                oExcel.Quit();
                                if (printProverka)
                                    functionMessageShow(2, "Потребность в КЭ (НС) для обеспечения плана испытаний напечатана!");
                                label126.BeginInvoke((MethodInvoker)(() => this.label126.Text = ""));
                                button116.BeginInvoke((MethodInvoker)(() => this.button116.Enabled = true));
                                button117.BeginInvoke((MethodInvoker)(() => this.button117.Enabled = true));
                                button118.BeginInvoke((MethodInvoker)(() => this.button118.Enabled = true));
                                button119.BeginInvoke((MethodInvoker)(() => this.button119.Enabled = true));
                                button120.BeginInvoke((MethodInvoker)(() => this.button120.Enabled = true));
                                button290.BeginInvoke((MethodInvoker)(() => this.button290.Enabled = true));
                            }
                        }).Start();
                    }
                    else
                        functionMessageShow(1, "Не найдена потребность в комплектующих!");
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //---------------------------------------------------------------------------------
        //------------------------------ГОДОВОЙ ПЛАН------------------------------
        //Функция отмены меню годового плана
        private void functionCancelKontrol()
        {
            panel19.Visible = true;
            panel20.Visible = false;
            panel22.Visible = false;
            panel23.Visible = false;
            panel24.Visible = false;
            panel25.Visible = false;
            panel26.Visible = false;
        }
        //------------------------------ФОРМАТКИ ИСПЫТАНИЙ------------------------------
        private void button151_Click(object sender, EventArgs e)
        {
            panel19.Visible = false;
            panel20.Visible = true;
            functionQueryFI();
            //functionQueryVK();
            positionFIKontrolList = 0;
            functionShowFIKontrol(positionFIKontrolList);
        }

        //Назад
        private void button167_Click(object sender, EventArgs e)
        {
            functionCancelKontrol();
        }

        //Функция отображение форматки испытания годового плана
        private void functionShowFIKontrol(int pos)
        {
            if (!spFIKontrolEdit)
            {
                if (pos >= 0 && fiList.Count > 0)
                {
                    textBox183.Text = Convert.ToString(fiList[pos].codeElementFIMespl);
                    textBox181.Text = Convert.ToString(fiList[pos].pictureElementFIMespl);
                    textBox182.Text = Convert.ToString(fiList[pos].codeVidIspFIMespl);
                    label176.Text = Convert.ToString(fiList[pos].nameVidIspFIMespl);
                    textBox180.Text = Convert.ToString(fiList[pos].indexElementFIMespl);
                    textBox179.Text = Convert.ToString(fiList[pos].nameElementFIMespl);
                    textBox178.Text = Convert.ToString(fiList[pos].codeSysFIMespl);
                    label180.Text = Convert.ToString(fiList[pos].nameSysFIMespl);
                    textBox177.Text = Convert.ToString(fiList[pos].codeUsIspMespl);
                    textBox176.Text = Convert.ToString(fiList[pos].distanceFIMespl);
                    textBox175.Text = Convert.ToString(fiList[pos].sizePartFIMespl);
                    textBox174.Text = Convert.ToString(fiList[pos].lgotFIMespl);
                    textBox173.Text = Convert.ToString(fiList[pos].countShotPartFIMespl);
                    textBox172.Text = Convert.ToString(fiList[pos].countReShotFIMespl);
                    textBox171.Text = Convert.ToString(fiList[pos].countPodShotFIMespl);
                    textBox170.Text = Convert.ToString(fiList[pos].uslCountPartYearFIMespl);
                    textBox169.Text = Convert.ToString(fiList[pos].codePregradiOneFIMespl);
                    textBox168.Text = Convert.ToString(fiList[pos].livePregradiOneFIMespl);
                    textBox167.Text = Convert.ToString(fiList[pos].codePregradiTwoFIMespl);
                    textBox166.Text = Convert.ToString(fiList[pos].livePregradiTwoFIMespl);
                    textBox165.Text = Convert.ToString(fiList[pos].liveSystemFIMespl);
                    textBox164.Text = Convert.ToString(fiList[pos].prevLiveSystemFIMespl);
                    textBox163.Text = Convert.ToString(fiList[pos].codeNameStFIMespl);
                    label179.Text = Convert.ToString(fiList[pos].nameNameStFIMespl);
                    textBox162.Text = Convert.ToString(fiList[pos].liveStFIMespl);
                    textBox161.Text = Convert.ToString(fiList[pos].prevLiveStFIMespl);
                    textBox160.Text = Convert.ToString(fiList[pos].codeNameStandFIMespl);
                    label178.Text = Convert.ToString(fiList[pos].nameNameStandFIMespl);
                    textBox159.Text = Convert.ToString(fiList[pos].liveStandFIMespl);
                    textBox158.Text = Convert.ToString(fiList[pos].prevLiveStandFIMespl);
                    textBox157.Text = Convert.ToString(fiList[pos].koefAmorGilzFIMespl);
                    textBox156.Text = Convert.ToString(fiList[pos].koefPrivedZarFIMespl);
                    textBox155.Text = Convert.ToString(fiList[pos].koefPrivShotFIMespl);
                    textBox154.Text = Convert.ToString(fiList[pos].uslCountZvFIMespl);
                    textBox153.Text = Convert.ToString(fiList[pos].codeEdIzmFIMespl);
                    label177.Text = Convert.ToString(fiList[pos].nameEdIzmFIMespl);
                    textBox152.Text = Convert.ToString(fiList[pos].id);
                }
                else
                {
                    textBox183.Text = "";
                    textBox181.Text = "";
                    textBox182.Text = "";
                    label176.Text = "";
                    textBox180.Text = "";
                    textBox179.Text = "";
                    textBox178.Text = "";
                    label180.Text = "";
                    textBox177.Text = "";
                    textBox176.Text = "";
                    textBox175.Text = "";
                    textBox174.Text = "";
                    textBox173.Text = "";
                    textBox172.Text = "";
                    textBox171.Text = "";
                    textBox170.Text = "";
                    textBox169.Text = "";
                    textBox168.Text = "";
                    textBox167.Text = "";
                    textBox166.Text = "";
                    textBox165.Text = "";
                    textBox164.Text = "";
                    textBox163.Text = "";
                    label179.Text = "";
                    textBox162.Text = "";
                    textBox161.Text = "";
                    textBox160.Text = "";
                    label178.Text = "";
                    textBox159.Text = "";
                    textBox158.Text = "";
                    textBox157.Text = "";
                    textBox156.Text = "";
                    textBox155.Text = "";
                    textBox154.Text = "";
                    textBox153.Text = "";
                    label177.Text = "";
                    textBox152.Text = "";
                }
            }
        }

        //Позиция форматки испытания
        private void createPositionFIKontrol(int s)
        {
            if (s == 0)
            {
                if (positionFIKontrolList - 1 >= 0)
                    positionFIKontrolList--;
            }
            else
            {
                if (positionFIKontrolList + 1 < fiList.Count)
                    positionFIKontrolList++;
            }
            functionShowFIKontrol(positionFIKontrolList);
        }

        //Поиск
        private void button159_Click(object sender, EventArgs e)
        {
            Form9 form9 = new Form9(fiList);
            form9.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionFIKontrolList = ClassSearchStatic.position;
                    functionShowFIKontrol(positionFIKontrolList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "УФИ с данным " + ClassSearchStatic.searchtype + " не найдена!");
                }
            }
        }

        //Ведомость комплектации
        private void button157_Click(object sender, EventArgs e)
        {
            bool proverkaVKKontrol = false;
            string vkInUFIstr = "";
            foreach (ClassVKMespl el in vkMesplList)
                if (el.idFIMespl == Convert.ToInt32(textBox152.Text))
                {
                    foreach (ClassVKMesplElements element in el.listElements)
                        vkInUFIstr += "            " + element.el.getCode() + "\t\t           " + element.codeEdIzmVKMespl + "\t\t           " + element.countVKMespl + "\n";
                    proverkaVKKontrol = true;
                }
            foreach (ClassVKMespl el in vkMesplSbList)
                if (el.idFIMespl == Convert.ToInt32(textBox152.Text))
                {
                    foreach (ClassVKMesplElements element in el.listElements)
                        vkInUFIstr += "            " + element.el.getCode() + "\t\t           " + element.codeEdIzmVKMespl + "\t\t           " + element.countVKMespl + "\n";
                    proverkaVKKontrol = true;
                }
            if (proverkaVKKontrol)
                MessageBox.Show("Комплектующий элемент\tЕд.Измерения\tКоличество КЭ\n" + vkInUFIstr, "Ведомость комплектаций", MessageBoxButtons.OK, MessageBoxIcon.Information);
            else
                functionMessageShow(1, "Не найдета ведомость комплектаций!");
        }

        //Назад
        private void button166_Click(object sender, EventArgs e)
        {
            createPositionFIKontrol(0);
        }

        //Вперед
        private void button162_Click(object sender, EventArgs e)
        {
            createPositionFIKontrol(1);
        }

        //Добавить
        private void button165_Click(object sender, EventArgs e)
        {
            functionShowFIKontrol(-1);
            spFIKontrolEdit = true;
            button157.Visible = false;
            button159.Visible = false;
            button162.Visible = false;
            button163.Visible = false;
            button164.Visible = false;
            button165.Visible = false;
            button166.Visible = false;
            button167.Visible = false;
            button160.Visible = true;
            button161.Visible = true;
            textBox153.ReadOnly = false;
            textBox154.ReadOnly = false;
            textBox155.ReadOnly = false;
            textBox156.ReadOnly = false;
            textBox157.ReadOnly = false;
            textBox158.ReadOnly = false;
            textBox159.ReadOnly = false;
            textBox160.ReadOnly = false;
            textBox161.ReadOnly = false;
            textBox162.ReadOnly = false;
            textBox163.ReadOnly = false;
            textBox164.ReadOnly = false;
            textBox165.ReadOnly = false;
            textBox166.ReadOnly = false;
            textBox167.ReadOnly = false;
            textBox168.ReadOnly = false;
            textBox169.ReadOnly = false;
            textBox170.ReadOnly = false;
            textBox171.ReadOnly = false;
            textBox172.ReadOnly = false;
            textBox173.ReadOnly = false;
            textBox174.ReadOnly = false;
            textBox175.ReadOnly = false;
            textBox176.ReadOnly = false;
            textBox177.ReadOnly = false;
            textBox178.ReadOnly = false;
            textBox182.ReadOnly = false;
            textBox183.ReadOnly = false;
            textBox183.Focus();
        }

        //Редактировать
        private void button164_Click(object sender, EventArgs e)
        {
            spFIKontrolEdit = true;
            button157.Visible = false;
            button159.Visible = false;
            button162.Visible = false;
            button163.Visible = false;
            button164.Visible = false;
            button165.Visible = false;
            button166.Visible = false;
            button167.Visible = false;
            button158.Visible = true;
            button161.Visible = true;
            textBox153.ReadOnly = false;
            textBox154.ReadOnly = false;
            textBox155.ReadOnly = false;
            textBox156.ReadOnly = false;
            textBox157.ReadOnly = false;
            textBox158.ReadOnly = false;
            textBox159.ReadOnly = false;
            textBox160.ReadOnly = false;
            textBox161.ReadOnly = false;
            textBox162.ReadOnly = false;
            textBox163.ReadOnly = false;
            textBox164.ReadOnly = false;
            textBox165.ReadOnly = false;
            textBox166.ReadOnly = false;
            textBox167.ReadOnly = false;
            textBox168.ReadOnly = false;
            textBox169.ReadOnly = false;
            textBox170.ReadOnly = false;
            textBox171.ReadOnly = false;
            textBox172.ReadOnly = false;
            textBox173.ReadOnly = false;
            textBox174.ReadOnly = false;
            textBox175.ReadOnly = false;
            textBox176.ReadOnly = false;
            textBox177.ReadOnly = false;
            textBox178.ReadOnly = false;
            textBox182.ReadOnly = false;
            textBox183.ReadOnly = false;
            textBox183.Focus();
        }

        //Удалить
        private void button163_Click(object sender, EventArgs e)
        {
            if (positionFIKontrolList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить форматку испытания?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [FIMespl] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox152.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Форматка испытания успешна удалена");
                    functionQueryFI();
                    createPositionFIKontrol(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите форматку испытания для удаления");
            }
        }

        //Кнопка отмены
        private void button161_Click(object sender, EventArgs e)
        {
            functionDisableShoeNewFIKontrol();
        }

        //Фнукция отмены добавления и редактирования
        private void functionDisableShoeNewFIKontrol()
        {
            spFIKontrolEdit = false;
            button157.Visible = true;
            button159.Visible = true;
            button162.Visible = true;
            button163.Visible = true;
            button164.Visible = true;
            button165.Visible = true;
            button166.Visible = true;
            button167.Visible = true;
            button158.Visible = false;
            button160.Visible = false;
            button161.Visible = false;
            textBox153.ReadOnly = true;
            textBox154.ReadOnly = true;
            textBox155.ReadOnly = true;
            textBox156.ReadOnly = true;
            textBox157.ReadOnly = true;
            textBox158.ReadOnly = true;
            textBox159.ReadOnly = true;
            textBox160.ReadOnly = true;
            textBox161.ReadOnly = true;
            textBox162.ReadOnly = true;
            textBox163.ReadOnly = true;
            textBox164.ReadOnly = true;
            textBox165.ReadOnly = true;
            textBox166.ReadOnly = true;
            textBox167.ReadOnly = true;
            textBox168.ReadOnly = true;
            textBox169.ReadOnly = true;
            textBox170.ReadOnly = true;
            textBox171.ReadOnly = true;
            textBox172.ReadOnly = true;
            textBox173.ReadOnly = true;
            textBox174.ReadOnly = true;
            textBox175.ReadOnly = true;
            textBox176.ReadOnly = true;
            textBox177.ReadOnly = true;
            textBox178.ReadOnly = true;
            textBox179.ReadOnly = true;
            textBox180.ReadOnly = true;
            textBox181.ReadOnly = true;
            textBox182.ReadOnly = true;
            textBox183.ReadOnly = true;
            functionShowFIKontrol(positionFIKontrolList);
        }

        //Подтверждение добавления
        private void button160_Click(object sender, EventArgs e)
        {
            //Проверка на наличия кода испытуемого элемента и вида испытания
            if (!string.IsNullOrEmpty(textBox183.Text) && !string.IsNullOrWhiteSpace(textBox183.Text) && !string.IsNullOrEmpty(textBox182.Text) && !string.IsNullOrWhiteSpace(textBox182.Text))
            {
                //Проверка на наличие форматки испытания
                if (!functionProverkaFIInList(textBox183.Text, textBox182.Text))
                {
                    //Проверка на заполненные поля
                    string proverkaAllFIKontrol = functionProverkaAllFIKontrol();
                    if (proverkaAllFIKontrol.Length > 0)
                    {
                        functionMessageShow(2, proverkaAllFIKontrol);
                    }
                    else
                    {
                        bool proverkaShifrov = true;
                        if (!functionProverkaElementsInListFI(textBox183.Text))
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaVidIspInList(textBox182.Text))
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Вид испытания с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaMCInList(textBox178.Text) && textBox178.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkapregradiInList(textBox169.Text) && textBox169.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkapregradiInList(textBox167.Text) && textBox167.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaMCInList(textBox163.Text) && textBox163.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaMCInList(textBox160.Text) && textBox160.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaEdIzmInList(textBox153.Text))
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Ед. измерения с данным кодом отсутствует в справочнике!");
                        }
                        if (proverkaShifrov)
                        {
                            string polInBD = "";
                            string valInBD = "";
                            if (textBox178.Text != "000")
                            {
                                polInBD += ",codeSysFIMespl";
                                valInBD += ",@codeSysFIMespl";
                            }
                            if (textBox177.Text.Length > 0)
                            {
                                polInBD += ",codeUsIspMespl";
                                valInBD += ",@codeUsIspMespl";
                            }
                            if (textBox176.Text.Length > 0)
                            {
                                polInBD += ",distanceFIMespl";
                                valInBD += ",@distanceFIMespl";
                            }
                            if (textBox175.Text.Length > 0)
                            {
                                polInBD += ",sizePartFIMespl";
                                valInBD += ",@sizePartFIMespl";
                            }
                            if (textBox174.Text.Length > 0)
                            {
                                polInBD += ",lgotFIMespl";
                                valInBD += ",@lgotFIMespl";
                            }
                            if (textBox173.Text.Length > 0)
                            {
                                polInBD += ",countShotPartFIMespl";
                                valInBD += ",@countShotPartFIMespl";
                            }
                            if (textBox172.Text.Length > 0)
                            {
                                polInBD += ",countReShotFIMespl";
                                valInBD += ",@countReShotFIMespl";
                            }
                            if (textBox171.Text.Length > 0)
                            {
                                polInBD += ",countPodShotFIMespl";
                                valInBD += ",@countPodShotFIMespl";
                            }
                            if (textBox170.Text.Length > 0)
                            {
                                polInBD += ",uslCountPartYearFIMespl";
                                valInBD += ",@uslCountPartYearFIMespl";
                            }
                            if (textBox169.Text != "000")
                            {
                                polInBD += ",codePregradiOneFIMespl";
                                valInBD += ",@codePregradiOneFIMespl";
                            }
                            if (textBox168.Text.Length > 0)
                            {
                                polInBD += ",livePregradiOneFIMespl";
                                valInBD += ",@livePregradiOneFIMespl";
                            }
                            if (textBox167.Text != "000")
                            {
                                polInBD += ",codePregradiTwoFIMespl";
                                valInBD += ",@codePregradiTwoFIMespl";
                            }
                            if (textBox166.Text.Length > 0)
                            {
                                polInBD += ",livePregradiTwoFIMespl";
                                valInBD += ",@livePregradiTwoFIMespl";
                            }
                            if (textBox165.Text.Length > 0)
                            {
                                polInBD += ",liveSystemFIMespl";
                                valInBD += ",@liveSystemFIMespl";
                            }
                            if (textBox164.Text.Length > 0)
                            {
                                polInBD += ",prevLiveSystemFIMespl";
                                valInBD += ",@prevLiveSystemFIMespl";
                            }
                            if (textBox163.Text != "000")
                            {
                                polInBD += ",codeNameStFIMespl";
                                valInBD += ",@codeNameStFIMespl";
                            }
                            if (textBox162.Text.Length > 0)
                            {
                                polInBD += ",liveStFIMespl";
                                valInBD += ",@liveStFIMespl";
                            }
                            if (textBox161.Text.Length > 0)
                            {
                                polInBD += ",prevLiveStFIMespl";
                                valInBD += ",@prevLiveStFIMespl";
                            }
                            if (textBox160.Text != "000")
                            {
                                polInBD += ",codeNameStandFIMespl";
                                valInBD += ",@codeNameStandFIMespl";
                            }
                            if (textBox159.Text.Length > 0)
                            {
                                polInBD += ",liveStandFIMespl";
                                valInBD += ",@liveStandFIMespl";
                            }
                            if (textBox158.Text.Length > 0)
                            {
                                polInBD += ",prevLiveStandFIMespl";
                                valInBD += ",@prevLiveStandFIMespl";
                            }
                            if (textBox157.Text.Length > 0)
                            {
                                polInBD += ",koefAmorGilzFIMespl";
                                valInBD += ",@koefAmorGilzFIMespl";
                            }
                            if (textBox156.Text.Length > 0)
                            {
                                polInBD += ",koefPrivedZarFIMespl";
                                valInBD += ",@koefPrivedZarFIMespl";
                            }
                            if (textBox155.Text.Length > 0)
                            {
                                polInBD += ",koefPrivShotFIMespl";
                                valInBD += ",@koefPrivShotFIMespl";
                            }
                            if (textBox154.Text.Length > 0)
                            {
                                polInBD += ",uslCountZvFIMespl";
                                valInBD += ",@uslCountZvFIMespl";
                            }
                            if (textBox153.Text.Length > 0)
                            {
                                polInBD += ",codeEdIzmFIMespl";
                                valInBD += ",@codeEdIzmFIMespl";
                            }
                            string commandInBD = "INSERT INTO [FIMespl] (codeElementFIMespl,vidIspFIMespl" + polInBD + ") VALUES (@codeElementFIMespl,@vidIspFIMespl" + valInBD + ")";
                            SQLiteCommand command = new SQLiteCommand(commandInBD, sqliteConnection);
                            //Код испытуемого элемента
                            int idElementsFIMespl = 0;
                            foreach (ClassElements el in elementsList)
                                if (el.getCode() == textBox183.Text)
                                    idElementsFIMespl = el.getId();
                            command.Parameters.AddWithValue("codeElementFIMespl", idElementsFIMespl);
                            //Вид испытания
                            int idVidIspFIMespl = 0;
                            foreach (ClassVidIsp el in vidIspList)
                                if (el.code == textBox182.Text)
                                    idVidIspFIMespl = el.id;
                            command.Parameters.AddWithValue("vidIspFIMespl", idVidIspFIMespl);
                            //Шифр системы
                            int idCodeSysFIMespl = 0;
                            foreach (ClassMC el in mcList)
                                if (el.codeMC3 == textBox178.Text)
                                    idCodeSysFIMespl = el.id;
                            command.Parameters.AddWithValue("codeSysFIMespl", idCodeSysFIMespl);
                            //Шифр условий испытания
                            command.Parameters.AddWithValue("codeUsIspMespl", textBox177.Text);
                            //Дистанция
                            command.Parameters.AddWithValue("distanceFIMespl", textBox176.Text);
                            //Размер партии
                            command.Parameters.AddWithValue("sizePartFIMespl", textBox175.Text);
                            //Льготность
                            command.Parameters.AddWithValue("lgotFIMespl", textBox174.Text);
                            //Количество выстрелов от партии
                            command.Parameters.AddWithValue("countShotPartFIMespl", textBox173.Text);
                            //Количество повторных выстрелов
                            command.Parameters.AddWithValue("countReShotFIMespl", textBox172.Text);
                            //Количество подготовительных выстрелов
                            command.Parameters.AddWithValue("countPodShotFIMespl", textBox171.Text);
                            //Усл. кол. парт/год
                            command.Parameters.AddWithValue("uslCountPartYearFIMespl", textBox170.Text);
                            //Шифр преграды 1
                            int idCodePregradiOneFIMespl = 0;
                            foreach (ClassPregrads el in pregradsList)
                                if (el.getCode() == textBox169.Text)
                                    idCodePregradiOneFIMespl = el.getId();
                            command.Parameters.AddWithValue("codePregradiOneFIMespl", idCodePregradiOneFIMespl);
                            //Живучесть преграды 1
                            command.Parameters.AddWithValue("livePregradiOneFIMespl", textBox168.Text);
                            //Шифр преграды 2
                            int idCodePregradiTwoFIMespl = 0;
                            foreach (ClassPregrads el in pregradsList)
                                if (el.getCode() == textBox167.Text)
                                    idCodePregradiTwoFIMespl = el.getId();
                            command.Parameters.AddWithValue("codePregradiTwoFIMespl", idCodePregradiTwoFIMespl);
                            //Живучесть преграды 2
                            command.Parameters.AddWithValue("livePregradiTwoFIMespl", textBox166.Text);
                            //Живучесть системы
                            command.Parameters.AddWithValue("liveSystemFIMespl", textBox165.Text);
                            //Пред. живучесть системы
                            command.Parameters.AddWithValue("prevLiveSystemFIMespl", textBox164.Text);
                            //Шифр ствола
                            int idCodeStFIMespl = 0;
                            foreach (ClassMC el in mcList)
                                if (el.codeMC3 == textBox163.Text)
                                    idCodeStFIMespl = el.id;
                            command.Parameters.AddWithValue("codeNameStFIMespl", idCodeStFIMespl);
                            //Живучесть ствола
                            command.Parameters.AddWithValue("liveStFIMespl", textBox162.Text);
                            //Пред. жив. ствола
                            command.Parameters.AddWithValue("prevLiveStFIMespl", textBox161.Text);
                            //Шифр стенда
                            int idCodeStandFIMespl = 0;
                            foreach (ClassMC el in mcList)
                                if (el.codeMC3 == textBox160.Text)
                                    idCodeStandFIMespl = el.id;
                            command.Parameters.AddWithValue("codeNameStandFIMespl", idCodeStandFIMespl);
                            //Живу. стенда
                            command.Parameters.AddWithValue("liveStandFIMespl", textBox159.Text);
                            //Пред. жив. стенда
                            command.Parameters.AddWithValue("prevLiveStandFIMespl", textBox158.Text);
                            //Коэф. аморт. гильзы
                            command.Parameters.AddWithValue("koefAmorGilzFIMespl", textBox157.Text);
                            //Коэф. привед. заряда
                            command.Parameters.AddWithValue("koefPrivedZarFIMespl", textBox156.Text);
                            //Коэф. прив. выстрела
                            command.Parameters.AddWithValue("koefPrivShotFIMespl", textBox155.Text);
                            //Услов. кол. звеньев
                            command.Parameters.AddWithValue("uslCountZvFIMespl", textBox154.Text);
                            //Шифр ед. измерения
                            int idCodeEdIzmFIMespl = 0;
                            foreach (ClassEdIzm el in edIzmList)
                                if (el.code2 == textBox153.Text)
                                    idCodeEdIzmFIMespl = el.id;
                            command.Parameters.AddWithValue("codeEdIzmFIMespl", idCodeEdIzmFIMespl);
                            sqliteConnection.Open();
                            command.ExecuteNonQuery();
                            sqliteConnection.Close();
                            functionMessageShow(2, "Данные успешно добавлены");
                            functionQueryFI();
                            functionDisableShoeNewFIKontrol();
                            positionFIKontrolList = fiList.Count - 1;
                            functionShowFIKontrol(positionFIKontrolList);
                        }
                    }
                }
                else
                {
                    functionMessageShow(1, "Данная УФИ имеется в справочнике!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код испытуемого элемента','Вид испытания' должны быть заполнены!");
            }
        }

        //Функция проверки заполненных полей
        private string functionProverkaAllFIKontrol()
        {
            string proverkaEl = "";
            if (textBox178.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Шифр системы'!\nВыставлено значение 000\n";
                textBox178.Text = "000";
                label180.Text = "*******";
            }
            if (textBox175.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Размер партии'!\nВыставлено значение 1000\n";
                textBox175.Text = "1000";
            }
            if (textBox174.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Льготность'!\nВыставлено значение 1\n";
                textBox174.Text = "1";
            }
            if (textBox169.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Преграда 1'!\nВыставлено значение 000\n";
                textBox169.Text = "000";
            }
            if (textBox167.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Преграда 2'!\nВыставлено значение 000\n";
                textBox167.Text = "000";
            }
            if (textBox163.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Шифр ствола'!\nВыставлено значение 000\n";
                textBox163.Text = "000";
                label79.Text = "*******";
            }
            if (textBox160.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Шифр стенда'!\nВыставлено значение 000\n";
                textBox160.Text = "000";
                label178.Text = "*******";
            }
            if (textBox153.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Шифр ед. измерения'!\nВыставлено значение 70\n";
                textBox153.Text = "70";
                label177.Text = "Штук";
            }
            return proverkaEl;
        }

        //Подтверждение редактирования
        private void button158_Click(object sender, EventArgs e)
        {
            //Проверка на наличия кода испытуемого элемента и вида испытания
            if (!string.IsNullOrEmpty(textBox183.Text) && !string.IsNullOrWhiteSpace(textBox183.Text) && !string.IsNullOrEmpty(textBox182.Text) && !string.IsNullOrWhiteSpace(textBox182.Text))
            {
                //Проверка на заполненные поля
                string proverkaAllFIKontrol = functionProverkaAllFIKontrol();
                if (proverkaAllFIKontrol.Length > 0)
                {
                    functionMessageShow(2, proverkaAllFIKontrol);
                }
                else
                {
                    bool proverkaShifrov = true;
                    if (!functionProverkaElementsInListFI(textBox183.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaVidIspInList(textBox182.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Вид испытания с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaMCInList(textBox178.Text) && textBox178.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkapregradiInList(textBox169.Text) && textBox169.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkapregradiInList(textBox167.Text) && textBox167.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaMCInList(textBox163.Text) && textBox163.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaMCInList(textBox160.Text) && textBox160.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaEdIzmInList(textBox153.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Ед. измерения с данным кодом отсутствует в справочнике!");
                    }
                    if (proverkaShifrov)
                    {
                        string valInBD = "";
                        if (textBox178.Text != "000")
                            valInBD += ",[codeSysFIMespl]=@codeSysFIMespl";
                        if (textBox177.Text.Length > 0)
                            valInBD += ",[codeUsIspMespl]=@codeUsIspMespl";
                        if (textBox176.Text.Length > 0)
                            valInBD += ",[distanceFIMespl]=@distanceFIMespl";
                        if (textBox175.Text.Length > 0)
                            valInBD += ",[sizePartFIMespl]=@sizePartFIMespl";
                        if (textBox174.Text.Length > 0)
                            valInBD += ",[lgotFIMespl]=@lgotFIMespl";
                        if (textBox173.Text.Length > 0)
                            valInBD += ",[countShotPartFIMespl]=@countShotPartFIMespl";
                        if (textBox172.Text.Length > 0)
                            valInBD += ",[countReShotFIMespl]=@countReShotFIMespl";
                        if (textBox171.Text.Length > 0)
                            valInBD += ",[countPodShotFIMespl]=@countPodShotFIMespl";
                        if (textBox170.Text.Length > 0)
                            valInBD += ",[uslCountPartYearFIMespl]=@uslCountPartYearFIMespl";
                        if (textBox169.Text != "000")
                            valInBD += ",[codePregradiOneFIMespl]=@codePregradiOneFIMespl";
                        if (textBox168.Text.Length > 0)
                            valInBD += ",[livePregradiOneFIMespl]=@livePregradiOneFIMespl";
                        if (textBox167.Text != "000")
                            valInBD += ",[codePregradiTwoFIMespl]=@codePregradiTwoFIMespl";
                        if (textBox166.Text.Length > 0)
                            valInBD += ",[livePregradiTwoFIMespl]=@livePregradiTwoFIMespl";
                        if (textBox165.Text.Length > 0)
                            valInBD += ",[liveSystemFIMespl]=@liveSystemFIMespl";
                        if (textBox164.Text.Length > 0)
                            valInBD += ",[prevLiveSystemFIMespl]=@prevLiveSystemFIMespl";
                        if (textBox163.Text != "000")
                            valInBD += ",[codeNameStFIMespl]=@codeNameStFIMespl";
                        if (textBox162.Text.Length > 0)
                            valInBD += ",[liveStFIMespl]=@liveStFIMespl";
                        if (textBox161.Text.Length > 0)
                            valInBD += ",[prevLiveStFIMespl]=@prevLiveStFIMespl";
                        if (textBox160.Text != "000")
                            valInBD += ",[codeNameStandFIMespl]=@codeNameStandFIMespl";
                        if (textBox159.Text.Length > 0)
                            valInBD += ",[liveStandFIMespl]=@liveStandFIMespl";
                        if (textBox158.Text.Length > 0)
                            valInBD += ",[prevLiveStandFIMespl]=@prevLiveStandFIMespl";
                        if (textBox157.Text.Length > 0)
                            valInBD += ",[koefAmorGilzFIMespl]=@koefAmorGilzFIMespl";
                        if (textBox156.Text.Length > 0)
                            valInBD += ",[koefPrivedZarFIMespl]=@koefPrivedZarFIMespl";
                        if (textBox155.Text.Length > 0)
                            valInBD += ",[koefPrivShotFIMespl]=@koefPrivShotFIMespl";
                        if (textBox154.Text.Length > 0)
                            valInBD += ",[uslCountZvFIMespl]=@uslCountZvFIMespl";
                        if (textBox153.Text.Length > 0)
                            valInBD += ",[codeEdIzmFIMespl]=@codeEdIzmFIMespl";
                        string commandInBD = "UPDATE [FIMespl] SET [codeElementFIMespl]=@codeElementFIMespl,[vidIspFIMespl]=@vidIspFIMespl" + valInBD + " WHERE [id]=@id";
                        SQLiteCommand command = new SQLiteCommand(commandInBD, sqliteConnection);
                        //id
                        command.Parameters.AddWithValue("id", textBox152.Text);
                        //Код испытуемого элемента
                        int idElementsFIMespl = 0;
                        foreach (ClassElements el in elementsList)
                            if (el.getCode() == textBox183.Text)
                                idElementsFIMespl = el.getId();
                        command.Parameters.AddWithValue("codeElementFIMespl", idElementsFIMespl);
                        //Вид испытания
                        int idVidIspFIMespl = 0;
                        foreach (ClassVidIsp el in vidIspList)
                            if (el.code == textBox182.Text)
                                idVidIspFIMespl = el.id;
                        command.Parameters.AddWithValue("vidIspFIMespl", idVidIspFIMespl);
                        //Шифр системы
                        int idCodeSysFIMespl = 0;
                        foreach (ClassMC el in mcList)
                            if (el.codeMC3 == textBox178.Text)
                                idCodeSysFIMespl = el.id;
                        command.Parameters.AddWithValue("codeSysFIMespl", idCodeSysFIMespl);
                        //Шифр условий испытания
                        command.Parameters.AddWithValue("codeUsIspMespl", textBox177.Text);
                        //Дистанция
                        command.Parameters.AddWithValue("distanceFIMespl", textBox176.Text);
                        //Размер партии
                        command.Parameters.AddWithValue("sizePartFIMespl", textBox175.Text);
                        //Льготность
                        command.Parameters.AddWithValue("lgotFIMespl", textBox174.Text);
                        //Количество выстрелов от партии
                        command.Parameters.AddWithValue("countShotPartFIMespl", textBox173.Text);
                        //Количество повторных выстрелов
                        command.Parameters.AddWithValue("countReShotFIMespl", textBox172.Text);
                        //Количество подготовительных выстрелов
                        command.Parameters.AddWithValue("countPodShotFIMespl", textBox171.Text);
                        //Усл. кол. парт/год
                        command.Parameters.AddWithValue("uslCountPartYearFIMespl", textBox170.Text);
                        //Шифр преграды 1
                        int idCodePregradiOneFIMespl = 0;
                        foreach (ClassPregrads el in pregradsList)
                            if (el.getCode() == textBox169.Text)
                                idCodePregradiOneFIMespl = el.getId();
                        command.Parameters.AddWithValue("codePregradiOneFIMespl", idCodePregradiOneFIMespl);
                        //Живучесть преграды 1
                        command.Parameters.AddWithValue("livePregradiOneFIMespl", textBox168.Text);
                        //Шифр преграды 2
                        int idCodePregradiTwoFIMespl = 0;
                        foreach (ClassPregrads el in pregradsList)
                            if (el.getCode() == textBox167.Text)
                                idCodePregradiTwoFIMespl = el.getId();
                        command.Parameters.AddWithValue("codePregradiTwoFIMespl", idCodePregradiTwoFIMespl);
                        //Живучесть преграды 2
                        command.Parameters.AddWithValue("livePregradiTwoFIMespl", textBox166.Text);
                        //Живучесть системы
                        command.Parameters.AddWithValue("liveSystemFIMespl", textBox165.Text);
                        //Пред. живучесть системы
                        command.Parameters.AddWithValue("prevLiveSystemFIMespl", textBox164.Text);
                        //Шифр ствола
                        int idCodeStFIMespl = 0;
                        foreach (ClassMC el in mcList)
                            if (el.codeMC3 == textBox163.Text)
                                idCodeStFIMespl = el.id;
                        command.Parameters.AddWithValue("codeNameStFIMespl", idCodeStFIMespl);
                        //Живучесть ствола
                        command.Parameters.AddWithValue("liveStFIMespl", textBox162.Text);
                        //Пред. жив. ствола
                        command.Parameters.AddWithValue("prevLiveStFIMespl", textBox161.Text);
                        //Шифр стенда
                        int idCodeStandFIMespl = 0;
                        foreach (ClassMC el in mcList)
                            if (el.codeMC3 == textBox160.Text)
                                idCodeStandFIMespl = el.id;
                        command.Parameters.AddWithValue("codeNameStandFIMespl", idCodeStandFIMespl);
                        //Живу. стенда
                        command.Parameters.AddWithValue("liveStandFIMespl", textBox159.Text);
                        //Пред. жив. стенда
                        command.Parameters.AddWithValue("prevLiveStandFIMespl", textBox158.Text);
                        //Коэф. аморт. гильзы
                        command.Parameters.AddWithValue("koefAmorGilzFIMespl", textBox157.Text);
                        //Коэф. привед. заряда
                        command.Parameters.AddWithValue("koefPrivedZarFIMespl", textBox156.Text);
                        //Коэф. прив. выстрела
                        command.Parameters.AddWithValue("koefPrivShotFIMespl", textBox155.Text);
                        //Услов. кол. звеньев
                        command.Parameters.AddWithValue("uslCountZvFIMespl", textBox154.Text);
                        //Шифр ед. измерения
                        int idCodeEdIzmFIMespl = 0;
                        foreach (ClassEdIzm el in edIzmList)
                            if (el.code2 == textBox153.Text)
                                idCodeEdIzmFIMespl = el.id;
                        command.Parameters.AddWithValue("codeEdIzmFIMespl", idCodeEdIzmFIMespl);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно обновлены");
                        functionQueryFI();
                        functionDisableShoeNewFIKontrol();
                        functionShowFIKontrol(positionFIKontrolList);
                    }
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код испытуемого элемента','Вид испытания' должны быть заполнены!");
            }
        }
        //------------------------------ВЕДОМОСТЬ КОМПЛЕКТАЦИЙ------------------------------
        private void button150_Click(object sender, EventArgs e)
        {
            panel19.Visible = false;
            panel22.Visible = true;
            functionQueryFI();
            //functionQueryVK();
            functionShowVKKontrol(-1);
        }

        //Кнопка назад
        private void button173_Click(object sender, EventArgs e)
        {
            functionCancelKontrol();
        }

        //Функция отображение форматки испытания годового плана
        private void functionShowVKKontrol(int pos)
        {
            if (!spVKKontrolEdit)
            {
                if (pos >= 0)
                {
                    if (typeVKKontrol)
                    {
                        if (typeVKKontrolElement)
                        {
                            if (vkMesplList.Count > 0)
                            {
                                textBox188.Text = Convert.ToString(vkMesplList[pos].id);
                                textBox187.Text = Convert.ToString(vkMesplList[pos].idFIMespl);
                                textBox193.Text = Convert.ToString(vkMesplList[pos].codeElementVKMespl);
                                textBox192.Text = Convert.ToString(vkMesplList[pos].pictureElementVKMespl);
                                textBox191.Text = Convert.ToString(vkMesplList[pos].indexElementVKMespl);
                                textBox190.Text = Convert.ToString(vkMesplList[pos].nameElementVKMespl);
                                textBox189.Text = Convert.ToString(vkMesplList[pos].codeVidIspVKMespl);
                                label215.Text = Convert.ToString(vkMesplList[pos].nameVidIspVKMespl);
                                listBox4.Items.Clear();
                                listBox4.Items.Add("Комплектующий элемент\tЕд.Измерения\tКоличество КЭ");
                                foreach (ClassVKMesplElements el in vkMesplList[pos].listElements)
                                {
                                    listBox4.Items.Add("            " + el.el.getCode() + "\t\t           " + el.codeEdIzmVKMespl + "\t\t         " + el.countVKMespl);
                                }
                            }
                        }
                        else
                        {
                            if (vkMesplElementList.Count > 0)
                            {
                                textBox188.Text = Convert.ToString(vkMesplElementList[pos].id);
                                textBox193.Text = Convert.ToString(vkMesplElementList[pos].el.getCode());
                                textBox192.Text = Convert.ToString(vkMesplElementList[pos].el.getPicture());
                                textBox191.Text = Convert.ToString(vkMesplElementList[pos].el.getIndex());
                                textBox190.Text = Convert.ToString(vkMesplElementList[pos].el.getName());
                                textBox189.Text = Convert.ToString(vkMesplElementList[pos].codeEdIzmVKMespl);
                                label215.Text = Convert.ToString(vkMesplElementList[pos].nameEdIzmVKMespl);
                                listBox4.Items.Clear();
                                listBox4.Items.Add("Испытуемый элемент\tВид испытания\tКоличество КЭ");
                                int posElementCountPr = 0;
                                foreach (ClassVKMespl el in vkMesplElementList[pos].listElements)
                                {
                                    listBox4.Items.Add("            " + el.codeElementVKMespl + "\t\t           " + el.codeVidIspVKMespl + "\t\t         " + vkMesplElementList[pos].listElementsCount[posElementCountPr]);
                                    posElementCountPr++;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (typeVKKontrolElement)
                        {
                            if (vkMesplSbList.Count > 0)
                            {
                                textBox188.Text = Convert.ToString(vkMesplSbList[pos].id);
                                textBox187.Text = Convert.ToString(vkMesplSbList[pos].idFIMespl);
                                textBox193.Text = Convert.ToString(vkMesplSbList[pos].codeElementVKMespl);
                                textBox192.Text = Convert.ToString(vkMesplSbList[pos].pictureElementVKMespl);
                                textBox191.Text = Convert.ToString(vkMesplSbList[pos].indexElementVKMespl);
                                textBox190.Text = Convert.ToString(vkMesplSbList[pos].nameElementVKMespl);
                                textBox189.Text = Convert.ToString(vkMesplSbList[pos].codeVidIspVKMespl);
                                label215.Text = Convert.ToString(vkMesplSbList[pos].nameVidIspVKMespl);
                                listBox4.Items.Clear();
                                listBox4.Items.Add("Комплектующий элемент\tЕд.Измерения\tКоличество");
                                foreach (ClassVKMesplElements el in vkMesplSbList[pos].listElements)
                                {
                                    listBox4.Items.Add("            " + el.el.getCode() + "\t\t           " + el.codeEdIzmVKMespl + "\t\t       " + el.countVKMespl);
                                }
                            }
                        }
                        else
                        {
                            if (vkMesplSbElementList.Count > 0)
                            {
                                textBox188.Text = Convert.ToString(vkMesplSbElementList[pos].id);
                                textBox193.Text = Convert.ToString(vkMesplSbElementList[pos].el.getCode());
                                textBox192.Text = Convert.ToString(vkMesplSbElementList[pos].el.getPicture());
                                textBox191.Text = Convert.ToString(vkMesplSbElementList[pos].el.getIndex());
                                textBox190.Text = Convert.ToString(vkMesplSbElementList[pos].el.getName());
                                textBox189.Text = Convert.ToString(vkMesplSbElementList[pos].codeEdIzmVKMespl);
                                label215.Text = Convert.ToString(vkMesplSbElementList[pos].nameEdIzmVKMespl);
                                listBox4.Items.Clear();
                                listBox4.Items.Add("Испытуемый элемент\tВид испытания\tКоличество КЭ");
                                int posElementCountPr = 0;
                                foreach (ClassVKMespl el in vkMesplSbElementList[pos].listElements)
                                {
                                    listBox4.Items.Add("            " + el.codeElementVKMespl + "\t\t           " + el.codeVidIspVKMespl + "\t\t       " + vkMesplElementList[pos].listElementsCount[posElementCountPr]);
                                    posElementCountPr++;
                                }
                            }
                        }
                    }
                }
                else
                {
                    textBox188.Text = "";
                    textBox187.Text = "";
                    textBox193.Text = "";
                    textBox192.Text = "";
                    textBox191.Text = "";
                    textBox190.Text = "";
                    textBox189.Text = "";
                    label215.Text = "";
                    listBox4.Items.Clear();
                    listBox4.Items.Add("Комплектующий элемент\tЕд.Измерения\tКоличество");
                }
            }
        }

        //Позиция ведомости испытаний
        private void createPositionVKKontrol(int s)
        {
            if (s == 0)
            {
                if (positionVKKontrolList - 1 >= 0)
                    positionVKKontrolList--;
            }
            else
            {
                if (typeVKKontrolElement)
                {
                    if (typeVKKontrol)
                        if (positionVKKontrolList + 1 < vkMesplList.Count)
                            positionVKKontrolList++;
                    if (!typeVKKontrol)
                        if (positionVKKontrolList + 1 < vkMesplSbList.Count)
                            positionVKKontrolList++;
                }
                else
                {
                    if (typeVKKontrol)
                        if (positionVKKontrolList + 1 < vkMesplElementList.Count)
                            positionVKKontrolList++;
                    if (!typeVKKontrol)
                        if (positionVKKontrolList + 1 < vkMesplSbElementList.Count)
                            positionVKKontrolList++;
                }
            }
            functionShowVKKontrol(positionVKKontrolList);
        }

        private void button181_Click(object sender, EventArgs e)
        {
            createPositionVKKontrol(0);
        }

        private void button177_Click(object sender, EventArgs e)
        {
            createPositionVKKontrol(1);
        }

        private void comboBox9_SelectedIndexChanged(object sender, EventArgs e)
        {
            functionShowVKKontrolElement();
        }

        private void comboBox8_SelectedIndexChanged(object sender, EventArgs e)
        {
            functionShowVKKontrolElement();
        }

        //Функция отображения
        private void functionShowVKKontrolElement()
        {
            if (comboBox9.Text == "Прямая ВК" && comboBox8.Text == "ВК общая")
            {
                functionShowVKKontrol(-1);
                positionVKKontrolList = 0;
                typeVKKontrol = true;
                label220.Text = "Испытуемый элемент";
                label219.Text = "Вид испытания";
                typeVKKontrolElement = true;
                button180.Visible = true;
                button179.Visible = true;
                button178.Visible = true;
                button171.Visible = true;
                functionShowVKKontrol(positionVKKontrolList);
            }
            if (comboBox9.Text == "Прямая ВК" && comboBox8.Text == "ВК на сборку")
            {
                functionShowVKKontrol(-1);
                positionVKKontrolList = 0;
                typeVKKontrol = false;
                label220.Text = "Испытуемый элемент";
                label219.Text = "Вид испытания";
                typeVKKontrolElement = true;
                button180.Visible = true;
                button179.Visible = true;
                button178.Visible = true;
                button171.Visible = true;
                functionShowVKKontrol(positionVKKontrolList);
            }
            if (comboBox9.Text == "Обратная ВК" && comboBox8.Text == "ВК общая")
            {
                functionShowVKKontrol(-1);
                positionVKKontrolList = 0;
                typeVKKontrol = true;
                label220.Text = "Комплект. элемент";
                label219.Text = "Ед. измерения";
                typeVKKontrolElement = false;
                button180.Visible = false;
                button179.Visible = false;
                button178.Visible = false;
                button171.Visible = false;
                functionShowVKKontrol(positionVKKontrolList);
            }
            if (comboBox9.Text == "Обратная ВК" && comboBox8.Text == "ВК на сборку")
            {
                functionShowVKKontrol(-1);
                positionVKKontrolList = 0;
                typeVKKontrol = false;
                label220.Text = "Комплект. элемент";
                label219.Text = "Ед. измерения";
                typeVKKontrolElement = false;
                button180.Visible = false;
                button179.Visible = false;
                button178.Visible = false;
                button171.Visible = false;
                functionShowVKKontrol(positionVKKontrolList);
            }
        }

        //Просмотр элемента
        private void button170_Click(object sender, EventArgs e)
        {
            if (listBox4.SelectedIndex > 0)
            {
                if (typeVKKontrol)
                {
                    if (typeVKKontrolElement)
                    {
                        ClassElements el = vkMesplList[positionVKKontrolList].listElements[listBox4.SelectedIndex - 1].el;
                        functionMessageShow(2, "Код комплектующего элемента: " + el.getCode() + "\nЧертеж: " + el.getPicture() + "\nИндекс: " + el.getIndex() + "\nНаименование элемента: " + el.getName());
                    }
                    else
                    {
                        ClassVKMespl el = vkMesplElementList[positionVKKontrolList].listElements[listBox4.SelectedIndex - 1];
                        functionMessageShow(2, "Код комплектующего элемента: " + el.codeElementVKMespl + "\nЧертеж: " + el.pictureElementVKMespl + "\nИндекс: " + el.indexElementVKMespl + "\nНаименование элемента: " + el.nameElementVKMespl);
                    }
                }
                else
                {
                    if (typeVKKontrolElement)
                    {
                        ClassElements el = vkMesplSbList[positionVKKontrolList].listElements[listBox4.SelectedIndex - 1].el;
                        functionMessageShow(2, "Код комплектующего элемента: " + el.getCode() + "\nЧертеж: " + el.getPicture() + "\nИндекс: " + el.getIndex() + "\nНаименование элемента: " + el.getName());
                    }
                    else
                    {
                        ClassVKMespl el = vkMesplSbElementList[positionVKKontrolList].listElements[listBox4.SelectedIndex - 1];
                        functionMessageShow(2, "Код комплектующего элемента: " + el.codeElementVKMespl + "\nЧертеж: " + el.pictureElementVKMespl + "\nИндекс: " + el.indexElementVKMespl + "\nНаименование элемента: " + el.nameElementVKMespl);
                    }
                }
            }
        }
        
        //Поиск
        private void button172_Click(object sender, EventArgs e)
        {
            if (typeVKKontrol)
            {
                if (typeVKKontrolElement)
                {
                    Form10 form10 = new Form10(vkMesplList, true);
                    form10.ShowDialog();
                }
                else
                {
                    Form10 form10 = new Form10(vkMesplElementList, false);
                    form10.ShowDialog();
                }
            }
            else
            {
                if (typeVKKontrolElement)
                {
                    Form10 form10 = new Form10(vkMesplSbList, true);
                    form10.ShowDialog();
                }
                else
                {
                    Form10 form10 = new Form10(vkMesplSbElementList, false);
                    form10.ShowDialog();
                }
            }
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionVKKontrolList = ClassSearchStatic.position;
                    functionShowVKKontrol(positionVKKontrolList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "ВК с данным " + ClassSearchStatic.searchtype + " не найдена!");
                }
            }
        }

        //УФИ
        private void button171_Click(object sender, EventArgs e)
        {
            if (positionVKKontrolList != -1)
            {
                string ufiInVKstr = "";
                foreach (ClassFI el in fiList)
                    if (el.id == Convert.ToInt32(textBox187.Text))
                    {
                        ufiInVKstr += "\nШифр, наименование системы  " + el.codeSysFIMespl + "   " + el.nameSysFIMespl +
                                        "\nШифр условия испытаний    " + el.codeUsIspMespl + "   " + "\t\t\tДистанция " + el.distanceFIMespl +
                                        "\nРазмер партии             " + el.sizePartFIMespl + "   " + "\t\t\tЛьготность " + el.lgotFIMespl +
                                        "\nКол. выстр. от партии     " + el.countShotPartFIMespl + "   " + "\t\t\tКол. повт. выстрелов " + el.countReShotFIMespl +
                                        "\nКол. подгот. выстрелов    " + el.countPodShotFIMespl + "   " + "\t\t\tУсл. кол. парт/год " + el.uslCountPartYearFIMespl +
                                        "\nШифр преграды 1           " + el.codePregradiOneFIMespl + "   " + "\t\t\tЖив. преграды 1 " + el.livePregradiOneFIMespl +
                                        "\nШифр преграды 2           " + el.codePregradiTwoFIMespl + "   " + "\t\t\tЖив. преграды 2 " + el.livePregradiTwoFIMespl +
                                        "\nЖивуч. системы            " + el.liveSystemFIMespl + "   " + "\t\t\tПред. живуч. системы " + el.prevLiveSystemFIMespl +
                                        "\nШифр, наименование ствола " + el.codeNameStFIMespl + "   " + el.nameNameStFIMespl +
                                        "\nЖивуч. ствола             " + el.liveStFIMespl + "   " + "\t\t\tПред. живуч. ствола " + el.prevLiveStFIMespl +
                                        "\nШифр, наименование стенда " + el.codeNameStandFIMespl + "   " + el.nameNameStandFIMespl +
                                        "\nЖивуч. стенда             " + el.liveStandFIMespl + "   " + "\t\t\tПред. живуч. стенда " + el.prevLiveStandFIMespl +
                                        "\nКоэф. амор. гильзы        " + el.koefAmorGilzFIMespl + "   " + "\t\t\tКоэф. привед. заряда " + el.koefPrivedZarFIMespl +
                                        "\nКоэф. прив. выстрела      " + el.koefPrivShotFIMespl + "   " + "\t\t\tУслов. кол. звеньев " + el.uslCountZvFIMespl +
                                        "\nШифр ед. измерения        " + el.codeEdIzmFIMespl + "   " + el.nameEdIzmFIMespl;
                    }
                MessageBox.Show("Унифицированная форматка испытаний\n" + ufiInVKstr, "УФИ", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                functionMessageShow(2, "Выберите ведомость комплектации для отображения УФИ");
            }
        }

        //Добавить
        private void button180_Click(object sender, EventArgs e)
        {
            functionShowVKKontrol(-1);
            spVKKontrolEdit = true;
            button168.Visible = false;
            button169.Visible = false;
            button181.Visible = false;
            button180.Visible = false;
            button179.Visible = false;
            button178.Visible = false;
            button170.Visible = false;
            button176.Visible = true;
            button175.Visible = true;
            button171.Visible = false;
            button172.Visible = false;
            button173.Visible = false;
            button177.Visible = false;
            comboBox9.Visible = false;
            comboBox8.Visible = false;
            textBox193.ReadOnly = false;
            textBox189.ReadOnly = false;
            listBox4.Height = 150;
            textBox186.Visible = true;
            textBox185.Visible = true;
            textBox184.Visible = true;
            button168.Visible = true;
            button169.Visible = true;
            textBox186.Text = "";
            textBox185.Text = "";
            textBox184.Text = "";
            textBox193.Focus();
        }

        //Редактировать
        private void button179_Click(object sender, EventArgs e)
        {
            spVKKontrolEdit = true;
            button168.Visible = false;
            button169.Visible = false;
            button181.Visible = false;
            button180.Visible = false;
            button179.Visible = false;
            button178.Visible = false;
            button170.Visible = false;
            button176.Visible = true;
            button174.Visible = true;
            button171.Visible = false;
            button172.Visible = false;
            button173.Visible = false;
            button177.Visible = false;
            comboBox9.Visible = false;
            comboBox8.Visible = false;
            textBox193.ReadOnly = false;
            textBox189.ReadOnly = false;
            listBox4.Height = 150;
            textBox186.Visible = true;
            textBox185.Visible = true;
            textBox184.Visible = true;
            button168.Visible = true;
            button169.Visible = true;
            textBox186.Text = "";
            textBox185.Text = "";
            textBox184.Text = "";
            textBox193.Focus();
        }

        //Удалить
        private void button178_Click(object sender, EventArgs e)
        {
            if (positionVKKontrolList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить ведомость комплектации?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [VKMespl] WHERE [idFIMespl]=@idFIMespl", sqliteConnection);
                    command.Parameters.AddWithValue("idFIMespl", textBox187.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    if (typeVKKontrol)
                    {
                        foreach (ClassVKMesplElements el in vkMesplElementList.ToArray())
                        {
                            int indexEl = 0;
                            bool isElementInList = false;
                            foreach (ClassVKMespl vk in el.listElements)
                            {
                                if (vk == vkMesplList[positionVKMesplList])
                                {
                                    isElementInList = true;
                                    break;
                                }
                                else
                                    indexEl++;
                            }
                            if (isElementInList)
                            {
                                el.listElements.RemoveAt(indexEl);
                                el.listElementsCount.RemoveAt(indexEl);
                                if (el.listElements.Count == 0)
                                    vkMesplElementList.Remove(el);
                            }
                        }
                        vkMesplList.Remove(vkMesplList[positionVKMesplList]);
                    }
                    else
                    {
                        foreach (ClassVKMesplElements el in vkMesplSbElementList.ToArray())
                        {
                            int indexEl = 0;
                            bool isElementInList = false;
                            foreach (ClassVKMespl vk in el.listElements)
                            {
                                if (vk == vkMesplSbList[positionVKMesplList])
                                {
                                    isElementInList = true;
                                    break;
                                }
                                else
                                    indexEl++;
                            }
                            if (isElementInList)
                            {
                                el.listElements.RemoveAt(indexEl);
                                el.listElementsCount.RemoveAt(indexEl);
                                if (el.listElements.Count == 0)
                                    vkMesplSbElementList.Remove(el);
                            }
                        }
                        vkMesplSbList.Remove(vkMesplSbList[positionVKMesplList]);
                    }
                    functionMessageShow(2, "Ведомость комплектации успешна удалена");
                    //functionQueryVK();
                    createPositionVKKontrol(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите ведомость комплектации для удаления");
            }
        }

        //Отмена
        private void button176_Click(object sender, EventArgs e)
        {
            functionDisableShoeNewVKKontrol();
        }

        //Фнукция отмены добавления и редактирования
        private void functionDisableShoeNewVKKontrol()
        {
            spVKKontrolEdit = false;
            button168.Visible = true;
            button169.Visible = true;
            button181.Visible = true;
            button180.Visible = true;
            button179.Visible = true;
            button178.Visible = true;
            button170.Visible = true;
            button176.Visible = false;
            button175.Visible = false;
            button174.Visible = false;
            button171.Visible = true;
            button172.Visible = true;
            button173.Visible = true;
            button177.Visible = true;
            comboBox9.Visible = true;
            comboBox8.Visible = true;
            textBox193.ReadOnly = true;
            textBox189.ReadOnly = true;
            listBox4.Height = 220;
            textBox186.Visible = false;
            textBox185.Visible = false;
            textBox184.Visible = false;
            button168.Visible = false;
            button169.Visible = false;
            textBox186.Text = "";
            textBox185.Text = "";
            textBox184.Text = "";
            functionShowVKKontrol(positionVKKontrolList);
        }

        //Добавить комплектующий элемент
        private void button168_Click(object sender, EventArgs e)
        {
            bool proverkaShifrov = true;
            if (!functionProverkaElementsInList(textBox186.Text))
            {
                proverkaShifrov = false;
                functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
            }
            if (!functionProverkaEdIzmInList(textBox185.Text))
            {
                proverkaShifrov = false;
                functionMessageShow(1, "Ед. измерения с данным кодом отсутствует в справочнике!");
            }
            if (textBox184.Text.Length == 0)
            {
                proverkaShifrov = false;
                functionMessageShow(1, "Необходимо написать количество комплектующих!");
            }
            if (textBox184.Text.Length > 0 && Convert.ToDouble(textBox184.Text) <= 0)
            {
                proverkaShifrov = false;
                functionMessageShow(1, "Необходимо написать количество комплектующих больше 0!");
            }
            if (proverkaShifrov)
            {
                listBox4.Items.Add("            " + textBox186.Text + "\t\t           " + textBox185.Text + "\t\t       " + textBox184.Text);
                textBox186.Text = "";
                textBox185.Text = "";
                textBox184.Text = "";
            }
        }

        //Удалить комплектующий элемент
        private void button169_Click(object sender, EventArgs e)
        {
            if (listBox4.SelectedIndex > 0)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить комплектующий элемент?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    listBox4.Items.Remove(listBox4.Items[listBox4.SelectedIndex]);
                }
            }
        }

        //Подтверждение добавления
        private void button175_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox193.Text) && !string.IsNullOrWhiteSpace(textBox189.Text))
            {
                if (functionSearchIDFIMespl(textBox193.Text, textBox189.Text) != -1)
                {
                    string strCodeElPr = textBox193.Text;
                    string strCodeVidPr = textBox189.Text;
                    int idFIMespl = functionSearchIDFIMespl(strCodeElPr, strCodeVidPr);
                    bool proverkaVKMespl = true;
                    foreach (ClassVKMespl el in vkMesplList)
                        if (el.idFIMespl == idFIMespl)
                            proverkaVKMespl = false;
                    foreach (ClassVKMespl el in vkMesplSbList)
                        if (el.idFIMespl == idFIMespl)
                            proverkaVKMespl = false;
                    if (proverkaVKMespl)
                    {
                        List<List<string>> newVK = new List<List<string>>();
                        for (int i = 1; i < listBox4.Items.Count; i++)
                        {
                            string[] strNewVKPr = Convert.ToString(listBox4.Items[i]).Split(' ');
                            List<string> strNewVKPrBP = new List<string>();
                            foreach (string k in strNewVKPr)
                                if (k.Length > 0)
                                    strNewVKPrBP.Add(k.Trim());
                            newVK.Add(strNewVKPrBP);
                        }
                        if (newVK.Count > 0)
                        {
                            bool proverkaAddNewData = false;
                            foreach (List<string> k in newVK)
                            {
                                int idVKElement = functionSearchIDElInSp(k[0]);
                                int idVKEdIzm = functionSearcgIDEdIzmInSp(k[1]);
                                if (idVKElement > 0 && idVKEdIzm > 0)
                                {
                                    SQLiteCommand command = new SQLiteCommand("INSERT INTO [VKMespl] (idFIMespl,idElementVKMespl,edIzmVKMespl,countVKMespl) VALUES (@idFIMespl,@idElementVKMespl,@edIzmVKMespl,@countVKMespl)", sqliteConnection);
                                    command.Parameters.AddWithValue("idFIMespl", idFIMespl);
                                    command.Parameters.AddWithValue("idElementVKMespl", idVKElement);
                                    command.Parameters.AddWithValue("edIzmVKMespl", idVKEdIzm);
                                    command.Parameters.AddWithValue("countVKMespl", Convert.ToDouble(k[2]));
                                    sqliteConnection.Open();
                                    command.ExecuteNonQuery();
                                    sqliteConnection.Close();
                                    proverkaAddNewData = true;
                                }
                                else
                                {
                                    functionMessageShow(1, "Ошибка при добавлении элемента " + k[0] + "!");
                                }
                            }
                            if (proverkaAddNewData)
                            {
                                functionMessageShow(2, "Данные успешно добавлены");
                                functionQueryVK(false);
                                functionDisableShoeNewVKKontrol();
                                positionVKKontrolList = vkMesplList.Count - 1;
                                functionShowVKKontrol(positionVKKontrolList);
                            }
                        }
                        else
                        {
                            functionMessageShow(1, "Необходимо добавить комплектующий элемент!");
                        }
                    }
                    else
                    {
                        functionMessageShow(1, "Ведомость комплектации для данной форматки уже существует!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Не найденна форматка испытания с данным кодом испытуемого элемента и вида испытания!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Испытуемый элемент' и 'Вид испытания' должны быть заполнены!");
            }
        }

        //Подтверждение редактирвоания
        private void button174_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox193.Text) && !string.IsNullOrWhiteSpace(textBox189.Text))
            {
                if (functionSearchIDFIMespl(textBox193.Text, textBox189.Text) != -1)
                {
                    string strCodeElPr = textBox193.Text;
                    string strCodeVidPr = textBox189.Text;
                    int idFIMespl = functionSearchIDFIMespl(strCodeElPr, strCodeVidPr);
                    List<List<string>> newVK = new List<List<string>>();
                    for (int i = 1; i < listBox4.Items.Count; i++)
                    {
                        string[] strNewVKPr = Convert.ToString(listBox4.Items[i]).Split(' ');
                        List<string> strNewVKPrBP = new List<string>();
                        foreach (string k in strNewVKPr)
                            if (k.Length > 0)
                                strNewVKPrBP.Add(k.Trim());
                        newVK.Add(strNewVKPrBP);
                    }
                    if (newVK.Count > 0)
                    {
                        bool proverkaAddNewData = false;
                        SQLiteCommand command = new SQLiteCommand("DELETE FROM [VKMespl] WHERE [idFIMespl]=@idFIMespl", sqliteConnection);
                        command.Parameters.AddWithValue("idFIMespl", textBox187.Text);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        foreach (List<string> k in newVK)
                        {
                            int idVKElement = functionSearchIDElInSp(k[0]);
                            int idVKEdIzm = functionSearcgIDEdIzmInSp(k[1]);
                            if (idVKElement > 0 && idVKEdIzm > 0)
                            {
                                command = new SQLiteCommand("INSERT INTO [VKMespl] (idFIMespl,idElementVKMespl,edIzmVKMespl,countVKMespl) VALUES (@idFIMespl,@idElementVKMespl,@edIzmVKMespl,@countVKMespl)", sqliteConnection);
                                command.Parameters.AddWithValue("idFIMespl", idFIMespl);
                                command.Parameters.AddWithValue("idElementVKMespl", idVKElement);
                                command.Parameters.AddWithValue("edIzmVKMespl", idVKEdIzm);
                                command.Parameters.AddWithValue("countVKMespl", Convert.ToDouble(k[2]));
                                sqliteConnection.Open();
                                command.ExecuteNonQuery();
                                sqliteConnection.Close();
                                proverkaAddNewData = true;
                            }
                            else
                            {
                                functionMessageShow(1, "Ошибка при добавлении элемента " + k[0] + "!");
                            }
                        }
                        if (proverkaAddNewData)
                        {
                            functionMessageShow(2, "Данные успешно изменены");
                            functionQueryVK(false);
                            functionDisableShoeNewVKKontrol();
                            functionShowVKKontrol(positionVKKontrolList);
                        }
                    }
                    else
                    {
                        functionMessageShow(1, "Необходимо добавить комплектующий элемент!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Не найденна форматка испытания с данным кодом испытуемого элемента и вида испытания!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Испытуемый элемент' и 'Вид испытания' должны быть заполнены!");
            }
        }

        //------------------------------ПЛАН ИСПЫТАНИЙ------------------------------
        private void button154_Click(object sender, EventArgs e)
        {
            Form19 form19 = new Form19("План испытаний", true);
            form19.ShowDialog();
            if (form19.exitAgree)
            {
                functionShowPlIspKontrol(-1);
                functionQueryMC();
                functionQueryFI();
                label222.Text = "ПЛАН ИСПЫТАНИЙ НА " + form19.numericUpDown1.Text + " ГОД";
                yearPlIspKontrol = form19.numericUpDown1.Text;
                numberPlIspKontrol = form19.numericUpDown2.Text;
                functionQueryPlIspKontrol(yearPlIspKontrol, numberPlIspKontrol);
                positionPlIspKontrolList = 0;
                functionShowPlIspKontrol(positionPlIspKontrolList);
                panel19.Visible = false;
                panel23.Visible = true;
            }
        }

        private void button190_Click(object sender, EventArgs e)
        {
            functionCancelKontrol();
        }

        //Функция отображение плана испытаний
        private void functionShowPlIspKontrol(int pos)
        {
            if (!spPlIspKontrolEdit)
            {
                if (pos >= 0 && plIspKontrolList.Count > 0)
                {
                    textBox218.Text = Convert.ToString(plIspKontrolList[pos].id);
                    //Полигон
                    textBox194.Text = Convert.ToString(plIspKontrolList[pos].numberPoligonPlIspKontrol);
                    label225.Text = Convert.ToString(plIspKontrolList[pos].namePoligonPlIspKontrol);
                    //Позиции по планам
                    textBox197.Text = Convert.ToString(plIspKontrolList[pos].nPosPlPlIspKontrol);
                    textBox196.Text = Convert.ToString(plIspKontrolList[pos].nPosSvPlIspKontrol);
                    //Элемент
                    textBox198.Text = Convert.ToString(plIspKontrolList[pos].codeElementPlIspKontrol);
                    textBox199.Text = Convert.ToString(plIspKontrolList[pos].pictureElementPlIspKontrol);
                    textBox200.Text = Convert.ToString(plIspKontrolList[pos].indexElementPlIspKontrol);
                    textBox201.Text = Convert.ToString(plIspKontrolList[pos].nameElementPlIspKontrol);
                    //Завод
                    textBox219.Text = Convert.ToString(plIspKontrolList[pos].codeFactoryPlIspKontrol);
                    textBox195.Text = Convert.ToString(plIspKontrolList[pos].nameFactoryPlIspKontrol);
                    //Вид испытания
                    textBox202.Text = Convert.ToString(plIspKontrolList[pos].codeVidIspPlIspKontrol);
                    textBox203.Text = Convert.ToString(plIspKontrolList[pos].nameVidIspPlIspKontrol);
                    //Система
                    textBox204.Text = Convert.ToString(plIspKontrolList[pos].codeSystemPlIspKontrol);
                    textBox205.Text = Convert.ToString(plIspKontrolList[pos].nameSystemPlIspKontrol);
                    //Ствол
                    textBox206.Text = Convert.ToString(plIspKontrolList[pos].codeStvolPlIspKontrol);
                    textBox207.Text = Convert.ToString(plIspKontrolList[pos].nameStvolPlIspKontrol);
                    //Стенд
                    textBox208.Text = Convert.ToString(plIspKontrolList[pos].codeStandPlIspKontrol);
                    textBox209.Text = Convert.ToString(plIspKontrolList[pos].nameStandPlIspKontrol);
                    //Трудоемкость
                    textBox211.Text = Convert.ToString(plIspKontrolList[pos].trudoemkostPlIspKontrol);
                    //Стоимость
                    textBox210.Text = Convert.ToString(plIspKontrolList[pos].cenaPlIspKontrol);
                    //Объем испытаний
                    textBox217.Text = Convert.ToString(plIspKontrolList[pos].vYearPlIspKontrol);
                    textBox216.Text = Convert.ToString(plIspKontrolList[pos].vOnePlIspKontrol);
                    textBox215.Text = Convert.ToString(plIspKontrolList[pos].vTwoPlIspKontrol);
                    textBox214.Text = Convert.ToString(plIspKontrolList[pos].vThrePlIspKontrol);
                    textBox213.Text = Convert.ToString(plIspKontrolList[pos].vThourPlIspKontrol);
                    //Примечание
                    textBox212.Text = Convert.ToString(plIspKontrolList[pos].commentPlIspKontrol);
                }
                else
                {
                    textBox218.Text = "";
                    textBox194.Text = "";
                    label225.Text = "";
                    textBox197.Text = "";
                    textBox196.Text = "";
                    textBox198.Text = "";
                    textBox199.Text = "";
                    textBox200.Text = "";
                    textBox201.Text = "";
                    textBox219.Text = "";
                    textBox195.Text = "";
                    textBox202.Text = "";
                    textBox203.Text = "";
                    textBox204.Text = "";
                    textBox205.Text = "";
                    textBox206.Text = "";
                    textBox207.Text = "";
                    textBox208.Text = "";
                    textBox209.Text = "";
                    textBox211.Text = "";
                    textBox210.Text = "";
                    textBox217.Text = "";
                    textBox216.Text = "";
                    textBox215.Text = "";
                    textBox214.Text = "";
                    textBox213.Text = "";
                    textBox212.Text = "";
                }
            }
        }

        //Позиция плана испытаний
        private void createPositionPlIspKontrol(int s)
        {
            if (s == 0)
            {
                if (positionPlIspKontrolList - 1 >= 0)
                    positionPlIspKontrolList--;
            }
            else
            {
                if (positionPlIspKontrolList + 1 < plIspKontrolList.Count)
                    positionPlIspKontrolList++;
            }
            functionShowPlIspKontrol(positionPlIspKontrolList);
        }

        //Назад
        private void button189_Click(object sender, EventArgs e)
        {
            createPositionPlIspKontrol(0);
        }

        //Вперед
        private void button185_Click(object sender, EventArgs e)
        {
            createPositionPlIspKontrol(1);
        }

        //Добавить
        private void button188_Click(object sender, EventArgs e)
        {
            functionShowPlIspKontrol(-1);
            textBox219.ReadOnly = false;
            textBox194.ReadOnly = false;
            textBox196.ReadOnly = false;
            textBox197.ReadOnly = false;
            textBox198.ReadOnly = false;
            textBox202.ReadOnly = false;
            textBox204.ReadOnly = false;
            textBox206.ReadOnly = false;
            textBox208.ReadOnly = false;
            textBox212.ReadOnly = false;
            textBox213.ReadOnly = false;
            textBox214.ReadOnly = false;
            textBox215.ReadOnly = false;
            textBox216.ReadOnly = false;
            button190.Visible = false;
            button191.Visible = false;
            button189.Visible = false;
            button188.Visible = false;
            button187.Visible = false;
            button186.Visible = false;
            button185.Visible = false;
            button184.Visible = true;
            button183.Visible = true;
            textBox219.Focus();
            spPlIspKontrolEdit = true;
        }

        //Редактировать
        private void button187_Click(object sender, EventArgs e)
        {
            spPlIspKontrolEdit = true;
            textBox219.ReadOnly = false;
            textBox194.ReadOnly = false;
            textBox196.ReadOnly = false;
            textBox197.ReadOnly = false;
            textBox198.ReadOnly = false;
            textBox202.ReadOnly = false;
            textBox204.ReadOnly = false;
            textBox206.ReadOnly = false;
            textBox208.ReadOnly = false;
            textBox212.ReadOnly = false;
            textBox213.ReadOnly = false;
            textBox214.ReadOnly = false;
            textBox215.ReadOnly = false;
            textBox216.ReadOnly = false;
            button190.Visible = false;
            button191.Visible = false;
            button189.Visible = false;
            button188.Visible = false;
            button187.Visible = false;
            button186.Visible = false;
            button185.Visible = false;
            button184.Visible = true;
            button182.Visible = true;
            textBox219.Focus();
        }

        //Удалить
        private void button186_Click(object sender, EventArgs e)
        {
            if (positionPlIspKontrolList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить план испытания?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [PlIspKontrol] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox218.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "План испытаний успешно удален");
                    functionQueryPlIspKontrol(yearPlIspKontrol, numberPlIspKontrol);
                    createPositionPlIspKontrol(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите план испытания для удаления");
            }
        }

        //Отмена добавления и редактирования
        private void button184_Click(object sender, EventArgs e)
        {
            functionDisableShoeNewPlIspKontrol();
        }

        //Фнукция отмены добавления и редактирования
        private void functionDisableShoeNewPlIspKontrol()
        {
            spPlIspKontrolEdit = false;
            textBox219.ReadOnly = true;
            textBox194.ReadOnly = true;
            textBox196.ReadOnly = true;
            textBox197.ReadOnly = true;
            textBox198.ReadOnly = true;
            textBox202.ReadOnly = true;
            textBox204.ReadOnly = true;
            textBox206.ReadOnly = true;
            textBox208.ReadOnly = true;
            textBox212.ReadOnly = true;
            textBox213.ReadOnly = true;
            textBox214.ReadOnly = true;
            textBox215.ReadOnly = true;
            textBox216.ReadOnly = true;
            textBox217.ReadOnly = true;
            button190.Visible = true;
            button191.Visible = true;
            button189.Visible = true;
            button188.Visible = true;
            button187.Visible = true;
            button186.Visible = true;
            button185.Visible = true;
            button184.Visible = false;
            button183.Visible = false;
            button182.Visible = false;
            functionShowPlIspKontrol(positionPlIspKontrolList);
        }

        //Подтверждение добавления
        private void button183_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox219.Text) && !string.IsNullOrWhiteSpace(textBox219.Text) && !string.IsNullOrEmpty(textBox194.Text) && !string.IsNullOrWhiteSpace(textBox194.Text) && !string.IsNullOrEmpty(textBox198.Text) && !string.IsNullOrWhiteSpace(textBox198.Text) && !string.IsNullOrEmpty(textBox202.Text) && !string.IsNullOrWhiteSpace(textBox202.Text))
            {
                if (functionSearchIDFIMespl(textBox198.Text, textBox202.Text) != -1)
                {
                    bool proverkaPlIspKontrol = true;
                    bool proverkaShifrov = true;
                    foreach (ClassPlIspKontrol el in plIspKontrolList)
                        if (el.codeElementPlIspKontrol == textBox198.Text && el.codeFactoryPlIspKontrol == textBox219.Text && el.codeVidIspPlIspKontrol == textBox202.Text)
                            proverkaPlIspKontrol = false;
                    if (!functionProverkaFactorysInList(textBox219.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Завод с данным кодом отсутствует в справочнике!");
                    }
                    if (proverkaPlIspKontrol && proverkaShifrov)
                    {
                        string polInBD = "";
                        string valInBD = "";
                        if (textBox204.Text.Length > 0)
                        {
                            polInBD += ",idSystemPlIspKontrol";
                            valInBD += ",@idSystemPlIspKontrol";
                        }
                        if (textBox206.Text.Length > 0)
                        {
                            polInBD += ",idStvolPlIspKontrol";
                            valInBD += ",@idStvolPlIspKontrol";
                        }
                        if (textBox208.Text.Length > 0)
                        {
                            polInBD += ",idStandPlIspKontrol";
                            valInBD += ",@idStandPlIspKontrol";
                        }
                        SQLiteCommand command = new SQLiteCommand("INSERT INTO [PlIspKontrol] (idElementPlIspKontrol,idFactoryPlIspKontrol,idPoligonPlIspKontrol,idVidIspPlIspKontrol" + polInBD + ",vOnePlIspKontrol,vTwoPlIspKontrol,vThrePlIspKontrol,vThourPlIspKontrol,nPosPlPlIspKontrol,nPosSvPlIspKontrol,commentPlIspKontrol,numberPlIspKontrol,yearPlIspKontrol) VALUES (@idElementPlIspKontrol,@idFactoryPlIspKontrol,@idPoligonPlIspKontrol,@idVidIspPlIspKontrol" + valInBD + ",@vOnePlIspKontrol,@vTwoPlIspKontrol,@vThrePlIspKontrol,@vThourPlIspKontrol,@nPosPlPlIspKontrol,@nPosSvPlIspKontrol,@commentPlIspKontrol,@numberPlIspKontrol,@yearPlIspKontrol)", sqliteConnection);
                        //Полигон
                        int idPoligonPlIspKontrol = 0;
                        foreach (ClassPoligons pl in poligonsList)
                            if (pl.numberPl == textBox194.Text)
                                idPoligonPlIspKontrol = pl.id;
                        command.Parameters.AddWithValue("idPoligonPlIspKontrol", idPoligonPlIspKontrol);
                        //Код испытуемого элемента
                        int idElementsPlIspKontrol = functionSearchIDElInSp(textBox198.Text);
                        command.Parameters.AddWithValue("idElementPlIspKontrol", idElementsPlIspKontrol);
                        //Код завода
                        int idFactorysPlIspKontrol = 0;
                        foreach (ClassFactorys el in factorysList)
                            if (el.getCode() == textBox219.Text)
                                idFactorysPlIspKontrol = el.getId();
                        command.Parameters.AddWithValue("idFactoryPlIspKontrol", idFactorysPlIspKontrol);
                        //Вид испытания
                        int idVidIspPlIspKontrol = functionSearchVidIspInSp(textBox202.Text);
                        command.Parameters.AddWithValue("idVidIspPlIspKontrol", idVidIspPlIspKontrol);
                        //Система
                        int idSystemPlIspKontrol = functionSearchMCInSp(textBox204.Text);
                        command.Parameters.AddWithValue("idSystemPlIspKontrol", idSystemPlIspKontrol);
                        //Ствол
                        int idStvolPlIspKontrol = functionSearchMCInSp(textBox206.Text);
                        command.Parameters.AddWithValue("idStvolPlIspKontrol", idStvolPlIspKontrol);
                        //Стенд
                        int idStandPlIspKontrol = functionSearchMCInSp(textBox208.Text);
                        command.Parameters.AddWithValue("idStandPlIspKontrol", idStandPlIspKontrol);
                        //Объем испытаний
                        command.Parameters.AddWithValue("vOnePlIspKontrol", textBox216.Text);
                        command.Parameters.AddWithValue("vTwoPlIspKontrol", textBox215.Text);
                        command.Parameters.AddWithValue("vThrePlIspKontrol", textBox214.Text);
                        command.Parameters.AddWithValue("vThourPlIspKontrol", textBox213.Text);
                        //Позиции
                        command.Parameters.AddWithValue("nPosPlPlIspKontrol", textBox197.Text);
                        command.Parameters.AddWithValue("nPosSvPlIspKontrol", textBox196.Text);
                        //Год
                        command.Parameters.AddWithValue("yearPlIspKontrol", yearPlIspKontrol);
                        //Комментарий
                        command.Parameters.AddWithValue("commentPlIspKontrol", textBox212.Text);
                        //Номер
                        command.Parameters.AddWithValue("numberPlIspKontrol", numberPlIspKontrol);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно добавлены");
                        functionQueryPlIspKontrol(yearPlIspKontrol, numberPlIspKontrol);
                        functionDisableShoeNewPlIspKontrol();
                        positionPlIspKontrolList = plIspKontrolList.Count - 1;
                        functionShowPlIspKontrol(positionPlIspKontrolList);
                    }
                    else
                    {
                        functionMessageShow(1, "План испытаний с данным кодом элемента, заводом изготовителя и видом испытания уже существует!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Не найденна форматка испытания с данным кодом элемента и видом испытания!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Завод изготовитель', 'Полигон', 'Испытуемый элемент' и 'Вид испытания' должны быть заполнены!");
            }
        }

        //Подтверждение редактирования
        private void button182_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox219.Text) && !string.IsNullOrWhiteSpace(textBox219.Text) && !string.IsNullOrEmpty(textBox194.Text) && !string.IsNullOrWhiteSpace(textBox194.Text) && !string.IsNullOrEmpty(textBox198.Text) && !string.IsNullOrWhiteSpace(textBox198.Text) && !string.IsNullOrEmpty(textBox202.Text) && !string.IsNullOrWhiteSpace(textBox202.Text))
            {
                if (functionSearchIDFIMespl(textBox198.Text, textBox202.Text) != -1)
                {
                    bool proverkaShifrov = true;
                    if (!functionProverkaFactorysInList(textBox219.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Завод с данным кодом отсутствует в справочнике!");
                    }
                    if (proverkaShifrov)
                    {
                        string valInBD = "";
                        if (textBox204.Text.Length > 0)
                            valInBD += ",[idSystemPlIspKontrol]=@idSystemPlIspKontrol";
                        if (textBox206.Text.Length > 0)
                            valInBD += ",[idStvolPlIspKontrol]=@idStvolPlIspKontrol";
                        if (textBox208.Text.Length > 0)
                            valInBD += ",[idStandPlIspKontrol]=@idStandPlIspKontrol";
                        SQLiteCommand command = new SQLiteCommand("UPDATE [PlIspKontrol] SET [idElementPlIspKontrol]=@idElementPlIspKontrol,[idFactoryPlIspKontrol]=@idFactoryPlIspKontrol,[idPoligonPlIspKontrol]=@idPoligonPlIspKontrol,[idVidIspPlIspKontrol]=@idVidIspPlIspKontrol" + valInBD + ",[vOnePlIspKontrol]=@vOnePlIspKontrol,[vTwoPlIspKontrol]=@vTwoPlIspKontrol,[vThrePlIspKontrol]=@vThrePlIspKontrol,[vThourPlIspKontrol]=@vThourPlIspKontrol,[nPosPlPlIspKontrol]=@nPosPlPlIspKontrol,[nPosSvPlIspKontrol]=@nPosSvPlIspKontrol,[commentPlIspKontrol]=@commentPlIspKontrol,[numberPlIspKontrol]=@numberPlIspKontrol,[yearPlIspKontrol]=@yearPlIspKontrol WHERE [id]=@id", sqliteConnection);
                        command.Parameters.AddWithValue("id", textBox218.Text);
                        //Полигон
                        int idPoligonPlIspKontrol = 0;
                        foreach (ClassPoligons pl in poligonsList)
                            if (pl.numberPl == textBox194.Text)
                                idPoligonPlIspKontrol = pl.id;
                        command.Parameters.AddWithValue("idPoligonPlIspKontrol", idPoligonPlIspKontrol);
                        //Код испытуемого элемента
                        int idElementsPlIspKontrol = functionSearchIDElInSp(textBox198.Text);
                        command.Parameters.AddWithValue("idElementPlIspKontrol", idElementsPlIspKontrol);
                        //Код завода
                        int idFactorysPlIspKontrol = 0;
                        foreach (ClassFactorys el in factorysList)
                            if (el.getCode() == textBox219.Text)
                                idFactorysPlIspKontrol = el.getId();
                        command.Parameters.AddWithValue("idFactoryPlIspKontrol", idFactorysPlIspKontrol);
                        //Вид испытания
                        int idVidIspPlIspKontrol = functionSearchVidIspInSp(textBox202.Text);
                        command.Parameters.AddWithValue("idVidIspPlIspKontrol", idVidIspPlIspKontrol);
                        //Система
                        int idSystemPlIspKontrol = functionSearchMCInSp(textBox204.Text);
                        command.Parameters.AddWithValue("idSystemPlIspKontrol", idSystemPlIspKontrol);
                        //Ствол
                        int idStvolPlIspKontrol = functionSearchMCInSp(textBox206.Text);
                        command.Parameters.AddWithValue("idStvolPlIspKontrol", idStvolPlIspKontrol);
                        //Стенд
                        int idStandPlIspKontrol = functionSearchMCInSp(textBox208.Text);
                        command.Parameters.AddWithValue("idStandPlIspKontrol", idStandPlIspKontrol);
                        //Объем испытаний
                        command.Parameters.AddWithValue("vOnePlIspKontrol", textBox216.Text);
                        command.Parameters.AddWithValue("vTwoPlIspKontrol", textBox215.Text);
                        command.Parameters.AddWithValue("vThrePlIspKontrol", textBox214.Text);
                        command.Parameters.AddWithValue("vThourPlIspKontrol", textBox213.Text);
                        //Позиции
                        command.Parameters.AddWithValue("nPosPlPlIspKontrol", textBox197.Text);
                        command.Parameters.AddWithValue("nPosSvPlIspKontrol", textBox196.Text);
                        //Год
                        command.Parameters.AddWithValue("yearPlIspKontrol", yearPlIspKontrol);
                        //Комментарий
                        command.Parameters.AddWithValue("commentPlIspKontrol", textBox212.Text);
                        //Номер
                        command.Parameters.AddWithValue("numberPlIspKontrol", numberPlIspKontrol);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно обновлены");
                        functionQueryPlIspKontrol(yearPlIspKontrol, numberPlIspKontrol);
                        functionDisableShoeNewPlIspKontrol();
                        functionShowPlIspKontrol(positionPlIspKontrolList);
                    }
                }
                else
                {
                    functionMessageShow(1, "Не найденна форматка испытания с данным кодом элемента и видом испытания!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Завод изготовитель', 'Полигон', 'Испытуемый элемент' и 'Вид испытания' должны быть заполнены!");
            }
        }

        //Поиск
        private void button191_Click(object sender, EventArgs e)
        {
            Form20 form20 = new Form20(plIspKontrolList);
            form20.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionPlIspKontrolList = ClassSearchStatic.position;
                    functionShowPlIspKontrol(positionPlIspKontrolList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "План испытаний с данным " + ClassSearchStatic.searchtype + " не найден!");
                }
            }
        }

        private void textBox216_Leave(object sender, EventArgs e)
        {
            functionReShetPlIspKontrol();
        }

        private void textBox215_Leave(object sender, EventArgs e)
        {
            functionReShetPlIspKontrol();
        }

        private void textBox214_Leave(object sender, EventArgs e)
        {
            functionReShetPlIspKontrol();
        }

        private void textBox213_Leave(object sender, EventArgs e)
        {
            functionReShetPlIspKontrol();
        }

        //Функция пересчета объема испытаний за год
        private void functionReShetPlIspKontrol()
        {
            if (spPlIspKontrolEdit)
            {
                int prResPlIspKontrol = 0;
                if (textBox216.Text.Length > 0)
                    prResPlIspKontrol += Convert.ToInt32(textBox216.Text);
                if (textBox215.Text.Length > 0)
                    prResPlIspKontrol += Convert.ToInt32(textBox215.Text);
                if (textBox214.Text.Length > 0)
                    prResPlIspKontrol += Convert.ToInt32(textBox214.Text);
                if (textBox213.Text.Length > 0)
                    prResPlIspKontrol += Convert.ToInt32(textBox213.Text);
                if (prResPlIspKontrol > 0)
                    textBox217.Text = Convert.ToString(prResPlIspKontrol);
                else
                    textBox217.Text = "";
            }
        }

        //------------------------------ПЛАН ПРОИЗВОДСТВА------------------------------
        private void button155_Click(object sender, EventArgs e)
        {
            Form19 form19 = new Form19("План производства", true);
            form19.ShowDialog();
            if (form19.exitAgree)
            {
                functionShowPlIndKontrol(-1);
                label246.Text = "ПЛАН ПРОИЗВОДСТВА НА " + form19.numericUpDown1.Text + " ГОД";
                yearPlIndKontrol = form19.numericUpDown1.Text;
                numberPlIndKontrol = form19.numericUpDown2.Text;
                functionQueryPlIndKontrol(yearPlIndKontrol, numberPlIndKontrol);
                positionPlIndKontrolList = 0;
                functionShowPlIndKontrol(positionPlIndKontrolList);
                panel19.Visible = false;
                panel24.Visible = true;
            }
        }

        private void button200_Click(object sender, EventArgs e)
        {
            functionCancelKontrol();
        }

        //Функция отображение плана производства
        private void functionShowPlIndKontrol(int pos)
        {
            if (!spPlIndKontrolEdit)
            {
                if (pos >= 0 && plIndKontrolList.Count > 0)
                {
                    textBox230.Text = Convert.ToString(plIndKontrolList[pos].id);
                    //Элемент
                    textBox223.Text = Convert.ToString(plIndKontrolList[pos].codeElementPlIndKontrol);
                    textBox222.Text = Convert.ToString(plIndKontrolList[pos].pictureElementPlIndKontrol);
                    textBox221.Text = Convert.ToString(plIndKontrolList[pos].indexElementPlIndKontrol);
                    textBox220.Text = Convert.ToString(plIndKontrolList[pos].nameElementPlIndKontrol);
                    //Завод-изготовитель
                    textBox224.Text = Convert.ToString(plIndKontrolList[pos].codeFactoryPlIndKontrol);
                    label252.Text = Convert.ToString(plIndKontrolList[pos].nameFactoryPlIndKontrol);
                    //Единица измерения
                    textBox231.Text = Convert.ToString(plIndKontrolList[pos].codeEdIzmPlIndKontrol);
                    label261.Text = Convert.ToString(plIndKontrolList[pos].nameEdIzmPlIndKontrol);
                    //Объем производства
                    textBox229.Text = Convert.ToString(plIndKontrolList[pos].vYearPlIndKontrol);
                    textBox228.Text = Convert.ToString(plIndKontrolList[pos].vOnePlIndKontrol);
                    textBox227.Text = Convert.ToString(plIndKontrolList[pos].vTwoPlIndKontrol);
                    textBox226.Text = Convert.ToString(plIndKontrolList[pos].vThrePlIndKontrol);
                    textBox225.Text = Convert.ToString(plIndKontrolList[pos].vThourPlIndKontrol);
                }
                else
                {
                    textBox230.Text = "";
                    textBox223.Text = "";
                    textBox222.Text = "";
                    textBox221.Text = "";
                    textBox220.Text = "";
                    textBox224.Text = "";
                    label252.Text = "";
                    textBox231.Text = "";
                    label261.Text = "";
                    textBox229.Text = "";
                    textBox228.Text = "";
                    textBox227.Text = "";
                    textBox226.Text = "";
                    textBox225.Text = "";
                }
            }
        }

        //Позиция плана производства
        private void createPositionPlIndKontrol(int s)
        {
            if (s == 0)
            {
                if (positionPlIndKontrolList - 1 >= 0)
                    positionPlIndKontrolList--;
            }
            else
            {
                if (positionPlIndKontrolList + 1 < plIndKontrolList.Count)
                    positionPlIndKontrolList++;
            }
            functionShowPlIndKontrol(positionPlIndKontrolList);
        }

        private void button199_Click(object sender, EventArgs e)
        {
            createPositionPlIndKontrol(0);
        }

        private void button195_Click(object sender, EventArgs e)
        {
            createPositionPlIndKontrol(1);
        }

        //Добавить
        private void button198_Click(object sender, EventArgs e)
        {
            functionShowPlIndKontrol(-1);
            spPlIndKontrolEdit = true;
            textBox223.ReadOnly = false;
            textBox224.ReadOnly = false;
            textBox231.ReadOnly = false;
            textBox228.ReadOnly = false;
            textBox227.ReadOnly = false;
            textBox226.ReadOnly = false;
            textBox225.ReadOnly = false;
            button201.Visible = false;
            button200.Visible = false;
            button199.Visible = false;
            button198.Visible = false;
            button197.Visible = false;
            button196.Visible = false;
            button195.Visible = false;
            button194.Visible = true;
            button193.Visible = true;
        }

        //Редактировать
        private void button197_Click(object sender, EventArgs e)
        {
            spPlIndKontrolEdit = true;
            textBox223.ReadOnly = false;
            textBox224.ReadOnly = false;
            textBox231.ReadOnly = false;
            textBox228.ReadOnly = false;
            textBox227.ReadOnly = false;
            textBox226.ReadOnly = false;
            textBox225.ReadOnly = false;
            button201.Visible = false;
            button200.Visible = false;
            button199.Visible = false;
            button198.Visible = false;
            button197.Visible = false;
            button196.Visible = false;
            button195.Visible = false;
            button194.Visible = true;
            button192.Visible = true;
        }

        //Удалить
        private void button196_Click(object sender, EventArgs e)
        {
            if (positionPlIndKontrolList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить план производства?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [PlIndKontrol] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox230.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "План производства успешно удален");
                    functionQueryPlIndKontrol(yearPlIndKontrol, numberPlIndKontrol);
                    createPositionPlIndKontrol(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите план испытания для удаления");
            }
        }

        //Отмена добавления и редактирования
        private void button194_Click(object sender, EventArgs e)
        {
            functionDisableShoeNewPlIndKontrol();
        }

        //Фнукция отмены добавления и редактирования
        private void functionDisableShoeNewPlIndKontrol()
        {
            spPlIndKontrolEdit = false;
            textBox223.ReadOnly = true;
            textBox224.ReadOnly = true;
            textBox231.ReadOnly = true;
            textBox228.ReadOnly = true;
            textBox227.ReadOnly = true;
            textBox226.ReadOnly = true;
            textBox225.ReadOnly = true;
            button201.Visible = true;
            button200.Visible = true;
            button199.Visible = true;
            button198.Visible = true;
            button197.Visible = true;
            button196.Visible = true;
            button195.Visible = true;
            button194.Visible = false;
            button193.Visible = false;
            button192.Visible = false;
            functionShowPlIndKontrol(positionPlIndKontrolList);
        }

        //Подтверждение добавления
        private void button193_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox223.Text) && !string.IsNullOrWhiteSpace(textBox223.Text) && !string.IsNullOrEmpty(textBox224.Text) && !string.IsNullOrWhiteSpace(textBox224.Text) && !string.IsNullOrEmpty(textBox231.Text) && !string.IsNullOrWhiteSpace(textBox231.Text))
            {
                    bool proverkaPlIndKontrol = true;
                    bool proverkaShifrov = true;
                    foreach (ClassPlIndKontrol el in plIndKontrolList)
                        if (el.codeElementPlIndKontrol == textBox223.Text && el.codeFactoryPlIndKontrol == textBox224.Text)
                            proverkaPlIndKontrol = false;
                    if (!functionProverkaElementsInList(textBox223.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaFactorysInList(textBox224.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Завод с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaEdIzmInList(textBox231.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Единица измерения с данным кодом отсутствует в справочнике!");
                    }
                    if (proverkaPlIndKontrol && proverkaShifrov)
                    {
                        SQLiteCommand command = new SQLiteCommand("INSERT INTO [PlIndKontrol] (idElementPlIndKontrol,idFactoryPlIndKontrol,idEdIzmPlIndKontrol,vOnePlIndKontrol,vTwoPlIndKontrol,vThrePlIndKontrol,vThourPlIndKontrol,yearPlIndKontrol) VALUES (@idElementPlIndKontrol,@idFactoryPlIndKontrol,@idEdIzmPlIndKontrol,@vOnePlIndKontrol,@vTwoPlIndKontrol,@vThrePlIndKontrol,@vThourPlIndKontrol,@yearPlIndKontrol)", sqliteConnection);
                        //Код испытуемого элемента
                        int idElementsPlIndKontrol = functionSearchIDElInSp(textBox223.Text);
                        command.Parameters.AddWithValue("idElementPlIndKontrol", idElementsPlIndKontrol);
                        //Код завода
                        int idFactorysPlIndKontrol = 0;
                        foreach (ClassFactorys el in factorysList)
                            if (el.getCode() == textBox224.Text)
                                idFactorysPlIndKontrol = el.getId();
                        command.Parameters.AddWithValue("idFactoryPlIndKontrol", idFactorysPlIndKontrol);
                        //Единица измерения
                        int idEdIzmPlIndKontrol = functionSearcgIDEdIzmInSp(textBox231.Text);
                        command.Parameters.AddWithValue("idEdIzmPlIndKontrol", idEdIzmPlIndKontrol);
                        //Объем испытаний
                        command.Parameters.AddWithValue("vOnePlIndKontrol", textBox228.Text);
                        command.Parameters.AddWithValue("vTwoPlIndKontrol", textBox227.Text);
                        command.Parameters.AddWithValue("vThrePlIndKontrol", textBox226.Text);
                        command.Parameters.AddWithValue("vThourPlIndKontrol", textBox225.Text);
                        //Год
                        command.Parameters.AddWithValue("yearPlIndKontrol", yearPlIndKontrol);
                        command.Parameters.AddWithValue("numberPlIndKontrol", numberPlIndKontrol);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно добавлены");
                        functionQueryPlIndKontrol(yearPlIndKontrol, numberPlIndKontrol);
                        functionDisableShoeNewPlIndKontrol();
                        positionPlIndKontrolList = plIndKontrolList.Count - 1;
                        functionShowPlIndKontrol(positionPlIndKontrolList);
                    }
                    else
                    {
                        functionMessageShow(1, "План производства с данным кодом элемента, заводом изготовителя и видом испытания уже существует!");
                    }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код элемента', 'Завод-изготовитель', и 'Единица измерения' должны быть заполнены!");
            }
        }

        //Подтверждение редактирования
        private void button192_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox223.Text) && !string.IsNullOrWhiteSpace(textBox223.Text) && !string.IsNullOrEmpty(textBox224.Text) && !string.IsNullOrWhiteSpace(textBox224.Text) && !string.IsNullOrEmpty(textBox231.Text) && !string.IsNullOrWhiteSpace(textBox231.Text))
            {
                bool proverkaShifrov = true;
                if (!functionProverkaElementsInList(textBox223.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
                }
                if (!functionProverkaFactorysInList(textBox224.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Завод с данным кодом отсутствует в справочнике!");
                }
                if (!functionProverkaEdIzmInList(textBox231.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Единица измерения с данным кодом отсутствует в справочнике!");
                }
                if (proverkaShifrov)
                {
                    SQLiteCommand command = new SQLiteCommand("UPDATE [PlIndKontrol] SET [idElementPlIndKontrol]=@idElementPlIndKontrol,[idFactoryPlIndKontrol]=@idFactoryPlIndKontrol,[idEdIzmPlIndKontrol]=@idEdIzmPlIndKontrol,[vOnePlIndKontrol]=@vOnePlIndKontrol,[vTwoPlIndKontrol]=@vTwoPlIndKontrol,[vThrePlIndKontrol]=@vThrePlIndKontrol,[vThourPlIndKontrol]=@vThourPlIndKontrol,[yearPlIndKontrol]=@yearPlIndKontrol WHERE [id]=@id", sqliteConnection);
                    //id
                    command.Parameters.AddWithValue("id", textBox230.Text);
                    //Код испытуемого элемента
                    int idElementsPlIndKontrol = functionSearchIDElInSp(textBox223.Text);
                    command.Parameters.AddWithValue("idElementPlIndKontrol", idElementsPlIndKontrol);
                    //Код завода
                    int idFactorysPlIndKontrol = 0;
                    foreach (ClassFactorys el in factorysList)
                        if (el.getCode() == textBox224.Text)
                            idFactorysPlIndKontrol = el.getId();
                    command.Parameters.AddWithValue("idFactoryPlIndKontrol", idFactorysPlIndKontrol);
                    //Единица измерения
                    int idEdIzmPlIndKontrol = functionSearcgIDEdIzmInSp(textBox231.Text);
                    command.Parameters.AddWithValue("idEdIzmPlIndKontrol", idEdIzmPlIndKontrol);
                    //Объем испытаний
                    command.Parameters.AddWithValue("vOnePlIndKontrol", textBox228.Text);
                    command.Parameters.AddWithValue("vTwoPlIndKontrol", textBox227.Text);
                    command.Parameters.AddWithValue("vThrePlIndKontrol", textBox226.Text);
                    command.Parameters.AddWithValue("vThourPlIndKontrol", textBox225.Text);
                    //Год
                    command.Parameters.AddWithValue("yearPlIndKontrol", yearPlIndKontrol);
                    command.Parameters.AddWithValue("numberPlIndKontrol", numberPlIndKontrol);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Данные успешно обновлены");
                    functionQueryPlIndKontrol(yearPlIndKontrol, numberPlIndKontrol);
                    functionDisableShoeNewPlIndKontrol();
                    functionShowPlIndKontrol(positionPlIndKontrolList);
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код элемента', 'Завод-изготовитель', и 'Единица измерения' должны быть заполнены!");
            }
        }

        private void textBox228_Leave(object sender, EventArgs e)
        {
            functionReShetPlIndKontrol();
        }

        private void textBox227_Leave(object sender, EventArgs e)
        {
            functionReShetPlIndKontrol();
        }

        private void textBox226_Leave(object sender, EventArgs e)
        {
            functionReShetPlIndKontrol();
        }

        private void textBox225_Leave(object sender, EventArgs e)
        {
            functionReShetPlIndKontrol();
        }

        //Функция пересчета плана производства за год
        private void functionReShetPlIndKontrol()
        {
            if (spPlIndKontrolEdit)
            {
                int prResPlIndKontrol = 0;
                if (textBox225.Text.Length > 0)
                    prResPlIndKontrol += Convert.ToInt32(textBox225.Text);
                if (textBox226.Text.Length > 0)
                    prResPlIndKontrol += Convert.ToInt32(textBox226.Text);
                if (textBox227.Text.Length > 0)
                    prResPlIndKontrol += Convert.ToInt32(textBox227.Text);
                if (textBox228.Text.Length > 0)
                    prResPlIndKontrol += Convert.ToInt32(textBox228.Text);
                if (prResPlIndKontrol > 0)
                    textBox229.Text = Convert.ToString(prResPlIndKontrol);
                else
                    textBox229.Text = "";
            }
        }

        //Поиск
        private void button201_Click(object sender, EventArgs e)
        {

        }

        //------------------------------ПОТРЕБНОСТЬ В КОМПЛЕКТУЮЩИХ ЭЛЕМЕНТАХ НА ГОД------------------------------
        private void button152_Click(object sender, EventArgs e)
        {
            Form19 form19 = new Form19("Потребность в КЭ", false);
            form19.ShowDialog();
            if (form19.exitAgree)
            {
                functionShowPotrVKEKontrol(-1);
                label262.Text = "ПОТРЕБНОСТЬ В КЭ НА " + form19.numericUpDown1.Text + " ГОД";
                yearPotrVKEKontrol = form19.numericUpDown1.Text;
                numberPotrVKEKontrol = form19.numericUpDown2.Text;
                functionQueryPlIspKontrol(yearPotrVKEKontrol, numberPotrVKEKontrol);
                //functionQueryVK();
                functionQueryNoneVk();
                potrVKEKontrolList.Clear();
                bool prIspOrSb = true;
                if (form19.comboBox1.Text == "Для сборки")
                    prIspOrSb = false;
                functionPotrVKEKontrolForming(yearPotrVKEKontrol, prIspOrSb);
                positionPotrVKEKontrolList = 0;
                functionShowPotrVKEKontrol(positionPotrVKEKontrolList);
                panel19.Visible = false;
                panel25.Visible = true;
                if (potrNoneVKKontrolList.Count > 0)
                {
                    //listBox2.Items.Add("\tНе найдена ведомость комплектации!");
                    string strErrorMesage = "Код элемента" + "\t\t" + "Код ВИ" + "\t\t" + "Код завода";
                    foreach (ClassPlIspKontrol el in potrNoneVKKontrolList)
                    {
                        strErrorMesage += "             " + el.codeElementPlIspKontrol + "\t\t" + el.codeVidIspPlIspKontrol + "\t\t" + el.codeFactoryPlIspKontrol;
                    }
                    MessageBox.Show(strErrorMesage, "Не найдена ведомость комплектации", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        //Вычисление потребности
        private void functionPotrVKEKontrolForming(string yearPotrVKEKontrol, bool ispOrSb)
        {
            potrNoneVKKontrolList.Clear();
            foreach (ClassPlIspKontrol pl in plIspKontrolList)
            {
                bool proverkaPlInVK = false;
                if (ispOrSb)
                {
                    foreach (ClassVKMespl vk in vkMesplList)
                    {
                        if (pl.codeElementPlIspKontrol == vk.codeElementVKMespl && pl.codeVidIspPlIspKontrol == vk.codeVidIspVKMespl)
                        {
                            proverkaPlInVK = true;
                            foreach (ClassVKMesplElements el in vk.listElements)
                            {
                                bool proverkaPKE = true;
                                if (potrVKEKontrolList.Count > 0)
                                {
                                    foreach (ClassPotrVKEKontrol pk in potrVKEKontrolList)
                                    {
                                        if (pk.codeElementPotrVKEKontrol == el.el.getCode())
                                        {
                                            double summVYear = 0;
                                            if (pl.vOnePlIspKontrol.Length > 0)
                                            {
                                                pk.vOnePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vOnePlIspKontrol);
                                                summVYear += Convert.ToDouble(pk.vOnePotrVKEKontrol);
                                            }
                                            if (pl.vTwoPlIspKontrol.Length > 0)
                                            {
                                                pk.vTwoPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vTwoPlIspKontrol);
                                                summVYear += Convert.ToDouble(pk.vTwoPotrVKEKontrol);
                                            }
                                            if (pl.vThrePlIspKontrol.Length > 0)
                                            {
                                                pk.vThrePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThrePlIspKontrol);
                                                summVYear += Convert.ToDouble(pk.vThrePotrVKEKontrol);
                                            }
                                            if (pl.vThourPlIspKontrol.Length > 0)
                                            {
                                                pk.vThourPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThourPlIspKontrol);
                                                summVYear += Convert.ToDouble(pk.vThourPotrVKEKontrol);
                                            }
                                            if (summVYear > 0)
                                                pk.vYearPotrVKEKontrol = summVYear;
                                            pk.ispEl.Add(pl);
                                            pk.countVK.Add(el.countVKMespl);
                                            proverkaPKE = false;
                                            break;
                                        }
                                    }
                                }
                                if (proverkaPKE)
                                {
                                    ClassPotrVKEKontrol pkNew = new ClassPotrVKEKontrol();
                                    pkNew.codeElementPotrVKEKontrol = el.el.getCode();
                                    pkNew.pictureElementPotrVKEKontrol = el.el.getPicture();
                                    pkNew.indexElementPotrVKEKontrol = el.el.getIndex();
                                    pkNew.nameElementPotrVKEKontrol = el.el.getName();
                                    pkNew.codeEdIzmPotrVKEKontrol = el.codeEdIzmVKMespl;
                                    pkNew.nameEdIzmPotrVKEKontrol = el.nameEdIzmVKMespl;
                                    pkNew.codePoligonPotrVKEKontrol = pl.numberPoligonPlIspKontrol;
                                    pkNew.namePoligonPotrVKEKontrol = pl.namePoligonPlIspKontrol;
                                    pkNew.codePoligonFactoryPotrVKEKontrol = "";
                                    pkNew.namePoligonFactoryPotrVKEKontrol = "";
                                    pkNew.codeFactoryPostPotrVKEKontrol = el.el.codeFactory;
                                    pkNew.nameFactoryPostPotrVKEKontrol = el.el.nameFactory;
                                    double summVYear = 0;
                                    if (pl.vOnePlIspKontrol.Length > 0)
                                    {
                                        pkNew.vOnePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vOnePlIspKontrol);
                                        summVYear += Convert.ToDouble(pkNew.vOnePotrVKEKontrol);
                                    }
                                    if (pl.vTwoPlIspKontrol.Length > 0)
                                    {
                                        pkNew.vTwoPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vTwoPlIspKontrol);
                                        summVYear += Convert.ToDouble(pkNew.vTwoPotrVKEKontrol);
                                    }
                                    if (pl.vThrePlIspKontrol.Length > 0)
                                    {
                                        pkNew.vThrePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThrePlIspKontrol);
                                        summVYear += Convert.ToDouble(pkNew.vThrePotrVKEKontrol);
                                    }
                                    if (pl.vThourPlIspKontrol.Length > 0)
                                    {
                                        pkNew.vThourPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThourPlIspKontrol);
                                        summVYear += Convert.ToDouble(pkNew.vThourPotrVKEKontrol);
                                    }
                                    if (summVYear > 0)
                                        pkNew.vYearPotrVKEKontrol = summVYear;
                                    pkNew.ispEl.Add(pl);
                                    pkNew.countVK.Add(el.countVKMespl);
                                    potrVKEKontrolList.Add(pkNew);
                                }
                            }
                        }
                    }
                }
                else
                {
                    foreach (ClassVKMespl vk in vkMesplSbList)
                    {
                        if (pl.codeElementPlIspKontrol == vk.codeElementVKMespl && pl.codeVidIspPlIspKontrol == vk.codeVidIspVKMespl)
                        {
                            proverkaPlInVK = true;
                            foreach (ClassVKMesplElements el in vk.listElements)
                            {
                                bool proverkaPKE = true;
                                if (potrVKEKontrolList.Count > 0)
                                {
                                    foreach (ClassPotrVKEKontrol pk in potrVKEKontrolList)
                                    {
                                        if (pk.codeElementPotrVKEKontrol == el.el.getCode())
                                        {
                                            double summVYear = 0;
                                            if (pl.vOnePlIspKontrol.Length > 0)
                                            {
                                                pk.vOnePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vOnePlIspKontrol);
                                                summVYear += Convert.ToDouble(pk.vOnePotrVKEKontrol);
                                            }
                                            if (pl.vTwoPlIspKontrol.Length > 0)
                                            {
                                                pk.vTwoPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vTwoPlIspKontrol);
                                                summVYear += Convert.ToDouble(pk.vTwoPotrVKEKontrol);
                                            }
                                            if (pl.vThrePlIspKontrol.Length > 0)
                                            {
                                                pk.vThrePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThrePlIspKontrol);
                                                summVYear += Convert.ToDouble(pk.vThrePotrVKEKontrol);
                                            }
                                            if (pl.vThourPlIspKontrol.Length > 0)
                                            {
                                                pk.vThourPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThourPlIspKontrol);
                                                summVYear += Convert.ToDouble(pk.vThourPotrVKEKontrol);
                                            }
                                            if (summVYear > 0)
                                                pk.vYearPotrVKEKontrol = summVYear;
                                            pk.ispEl.Add(pl);
                                            pk.countVK.Add(el.countVKMespl);
                                            proverkaPKE = false;
                                            break;
                                        }
                                    }
                                }
                                if (proverkaPKE)
                                {
                                    ClassPotrVKEKontrol pkNew = new ClassPotrVKEKontrol();
                                    pkNew.codeElementPotrVKEKontrol = el.el.getCode();
                                    pkNew.pictureElementPotrVKEKontrol = el.el.getPicture();
                                    pkNew.indexElementPotrVKEKontrol = el.el.getIndex();
                                    pkNew.nameElementPotrVKEKontrol = el.el.getName();
                                    pkNew.codeEdIzmPotrVKEKontrol = el.codeEdIzmVKMespl;
                                    pkNew.nameEdIzmPotrVKEKontrol = el.nameEdIzmVKMespl;
                                    pkNew.codePoligonPotrVKEKontrol = pl.numberPoligonPlIspKontrol;
                                    pkNew.namePoligonPotrVKEKontrol = pl.namePoligonPlIspKontrol;
                                    pkNew.codePoligonFactoryPotrVKEKontrol = "";
                                    pkNew.namePoligonFactoryPotrVKEKontrol = "";
                                    pkNew.codeFactoryPostPotrVKEKontrol = el.el.codeFactory;
                                    pkNew.nameFactoryPostPotrVKEKontrol = el.el.nameFactory;
                                    double summVYear = 0;
                                    if (pl.vOnePlIspKontrol.Length > 0)
                                    {
                                        pkNew.vOnePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vOnePlIspKontrol);
                                        summVYear += Convert.ToDouble(pkNew.vOnePotrVKEKontrol);
                                    }
                                    if (pl.vTwoPlIspKontrol.Length > 0)
                                    {
                                        pkNew.vTwoPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vTwoPlIspKontrol);
                                        summVYear += Convert.ToDouble(pkNew.vTwoPotrVKEKontrol);
                                    }
                                    if (pl.vThrePlIspKontrol.Length > 0)
                                    {
                                        pkNew.vThrePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThrePlIspKontrol);
                                        summVYear += Convert.ToDouble(pkNew.vThrePotrVKEKontrol);
                                    }
                                    if (pl.vThourPlIspKontrol.Length > 0)
                                    {
                                        pkNew.vThourPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThourPlIspKontrol);
                                        summVYear += Convert.ToDouble(pkNew.vThourPotrVKEKontrol);
                                    }
                                    if (summVYear > 0)
                                        pkNew.vYearPotrVKEKontrol = summVYear;
                                    pkNew.ispEl.Add(pl);
                                    pkNew.countVK.Add(el.countVKMespl);
                                    potrVKEKontrolList.Add(pkNew);
                                }
                            }
                        }
                    }
                }
                if (!proverkaPlInVK)
                {
                    bool proverkaPlInNoneVk = true;
                    foreach (ClassNoneVk el in noneVkList)
                    {
                        if (el.codeElement == pl.codeElementPlIspKontrol)
                            proverkaPlInNoneVk = false;
                    }
                    if (proverkaPlInNoneVk && ispOrSb && (pl.codeVidIspPlIspKontrol != "098" && pl.codeVidIspPlIspKontrol != "099" && pl.codeVidIspPlIspKontrol != "205" && pl.codeVidIspPlIspKontrol != "206" && pl.codeVidIspPlIspKontrol != "207" && pl.codeVidIspPlIspKontrol != "239"))
                        potrNoneVKKontrolList.Add(pl);
                    if (proverkaPlInNoneVk && !ispOrSb && (pl.codeVidIspPlIspKontrol == "098" || pl.codeVidIspPlIspKontrol == "099" || pl.codeVidIspPlIspKontrol == "205" || pl.codeVidIspPlIspKontrol == "206" || pl.codeVidIspPlIspKontrol == "207" || pl.codeVidIspPlIspKontrol == "239"))
                        potrNoneVKKontrolList.Add(pl);
                }
            }
            if(ispOrSb)
                foreach(ClassPotrVKEKontrol potr in potrVKEKontrolList)
                {
                    potr.vOnePotrVKEKontrol = Math.Ceiling(potr.vOnePotrVKEKontrol);
                    potr.vTwoPotrVKEKontrol = Math.Ceiling(potr.vTwoPotrVKEKontrol);
                    potr.vThrePotrVKEKontrol = Math.Ceiling(potr.vThrePotrVKEKontrol);
                    potr.vThourPotrVKEKontrol = Math.Ceiling(potr.vThourPotrVKEKontrol);
                    potr.vOnePotrVKEKontrol = functionRoundInt(potr.vOnePotrVKEKontrol);
                    potr.vTwoPotrVKEKontrol = functionRoundInt(potr.vTwoPotrVKEKontrol);
                    potr.vThrePotrVKEKontrol = functionRoundInt(potr.vThrePotrVKEKontrol);
                    potr.vThourPotrVKEKontrol = functionRoundInt(potr.vThourPotrVKEKontrol);
                    potr.vYearPotrVKEKontrol = potr.vOnePotrVKEKontrol + potr.vTwoPotrVKEKontrol + potr.vThrePotrVKEKontrol + potr.vThourPotrVKEKontrol;
                }
        }

        private double functionRoundInt(double inputDouble)
        {
            string prVNew = Convert.ToString(inputDouble);
            if (Convert.ToInt32(Convert.ToString(prVNew[prVNew.Length - 1])) < 5)
                prVNew = prVNew.Substring(0, prVNew.Length - 1) + "0";
            else
            {
                while (Convert.ToInt32(Convert.ToString(prVNew[prVNew.Length - 1])) >= 5)
                    prVNew = Convert.ToString(Convert.ToDouble(prVNew) + 1);
            }
            return Convert.ToDouble(prVNew);
        }

        private void button210_Click(object sender, EventArgs e)
        {
            functionCancelKontrol();
        }

        //Функция отображение потребности в кэ
        private void functionShowPotrVKEKontrol(int pos)
        {
            if (!spPotrVKEKontrolEdit)
            {
                if (pos >= 0 && potrVKEKontrolList.Count > 0)
                {
                    textBox245.Text = Convert.ToString(potrVKEKontrolList[pos].id);
                    textBox235.Text = Convert.ToString(potrVKEKontrolList[pos].codeElementPotrVKEKontrol);
                    textBox234.Text = Convert.ToString(potrVKEKontrolList[pos].pictureElementPotrVKEKontrol);
                    textBox233.Text = Convert.ToString(potrVKEKontrolList[pos].indexElementPotrVKEKontrol);
                    textBox232.Text = Convert.ToString(potrVKEKontrolList[pos].nameElementPotrVKEKontrol);
                    textBox236.Text = Convert.ToString(potrVKEKontrolList[pos].codePoligonPotrVKEKontrol);
                    textBox237.Text = Convert.ToString(potrVKEKontrolList[pos].codePoligonFactoryPotrVKEKontrol);
                    textBox238.Text = Convert.ToString(potrVKEKontrolList[pos].codeFactoryPostPotrVKEKontrol);
                    textBox244.Text = Convert.ToString(potrVKEKontrolList[pos].codeEdIzmPotrVKEKontrol);
                    textBox243.Text = Convert.ToString(potrVKEKontrolList[pos].vYearPotrVKEKontrol);
                    textBox242.Text = Convert.ToString(potrVKEKontrolList[pos].vOnePotrVKEKontrol);
                    textBox241.Text = Convert.ToString(potrVKEKontrolList[pos].vTwoPotrVKEKontrol);
                    textBox240.Text = Convert.ToString(potrVKEKontrolList[pos].vThrePotrVKEKontrol);
                    textBox239.Text = Convert.ToString(potrVKEKontrolList[pos].vThourPotrVKEKontrol);
                    label268.Text = Convert.ToString(potrVKEKontrolList[pos].namePoligonPotrVKEKontrol);
                    label271.Text = Convert.ToString(potrVKEKontrolList[pos].namePoligonFactoryPotrVKEKontrol);
                    label272.Text = Convert.ToString(potrVKEKontrolList[pos].nameFactoryPostPotrVKEKontrol);
                    label280.Text = Convert.ToString(potrVKEKontrolList[pos].nameEdIzmPotrVKEKontrol);
                }
                else
                {
                    textBox235.Text = "";
                    textBox234.Text = "";
                    textBox233.Text = "";
                    textBox232.Text = "";
                    textBox236.Text = "";
                    textBox237.Text = "";
                    textBox238.Text = "";
                    textBox244.Text = "";
                    textBox245.Text = "";
                    textBox243.Text = "";
                    textBox242.Text = "";
                    textBox241.Text = "";
                    textBox240.Text = "";
                    textBox239.Text = "";
                    label268.Text = "";
                    label271.Text = "";
                    label272.Text = "";
                    label280.Text = "";
                }
            }
        }

        //Позиция потребности в кэ
        private void createPositionPotrVKEKontrol(int s)
        {
            if (s == 0)
            {
                if (positionPotrVKEKontrolList - 1 >= 0)
                    positionPotrVKEKontrolList--;
            }
            else
            {
                if (positionPotrVKEKontrolList + 1 < potrVKEKontrolList.Count)
                    positionPotrVKEKontrolList++;
            }
            functionShowPotrVKEKontrol(positionPotrVKEKontrolList);
        }

        private void button209_Click(object sender, EventArgs e)
        {
            createPositionPotrVKEKontrol(0);
        }

        private void button205_Click(object sender, EventArgs e)
        {
            createPositionPotrVKEKontrol(1);
        }

        //Поиск
        private void button211_Click(object sender, EventArgs e)
        {

        }

        //Печать справки-обоснования
        private void button202_Click(object sender, EventArgs e)
        {

        }

        //Печать потребности в комплектующих
        private void button203_Click(object sender, EventArgs e)
        {

        }

        //------------------------------ПЕЧАТЬ------------------------------
        private void button153_Click(object sender, EventArgs e)
        {
            Form19 form19 = new Form19("Печать отчетов", true);
            form19.ShowDialog();
            if (form19.exitAgree)
            {
                label284.Text = "ПЕЧАТЬ ОТЧЕТОВ НА " + form19.numericUpDown1.Text + " ГОД";
                yearPrintKontrol = form19.numericUpDown1.Text;
                numberPrintKontrol = form19.numericUpDown2.Text;
                panel19.Visible = false;
                panel26.Visible = true;
                label285.Text = "";
            }
        }

        private void button156_Click(object sender, EventArgs e)
        {
            functionCancelKontrol();
        }

        //Годовой план
        private void button204_Click(object sender, EventArgs e)
        {
            Form21 form21 = new Form21(true, true);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                functionQueryCenaVidIsp();
                functionQueryPlIspKontrol(yearPrintKontrol, numberPrintKontrol);
                if (plIspKontrolList.Count > 0)
                {
                    bool printProverka = true;
                    button204.Enabled = false;
                    button206.Enabled = false;
                    button207.Enabled = false;
                    button208.Enabled = false;
                    //Количество экземпляров
                    string countEkz = form21.textBox2.Text;
                    //Учетный номер
                    string uchNumber = form21.textBox1.Text;
                    //WORD
                    label285.Text = "Печать: подготовка документа к печати";
                    new Thread(() =>
                    {
                        Word.Application oWord = new Word.Application();
                        oWord.Visible = false;
                        try
                        {
                            //Открытие документа
                            Word.Document wordDocument;
                            if (form21.typePrint == 1)
                                wordDocument = oWord.Documents.Open(templateFileNameWordPlanSbKontrol);
                            else
                                wordDocument = oWord.Documents.Open(templateFileNameWordPlanIspKontrol);
                            //Поиск и замена текста
                            functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                            functionReplaceInText(wordDocument, oWord, "{year}", yearPrintKontrol);
                            string newYearKontrol = Convert.ToString(Convert.ToInt32(yearPrintKontrol) + 1);
                            functionReplaceInText(wordDocument, oWord, "{newYear}", newYearKontrol);
                            //Добавление в файл таблицы
                            label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: создание титульного листа"));
                            Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                            //Добавление в файл таблицы
                            var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                            wordDocument.Tables.Add(range, 1, 7, autoFitBehavior);
                            Word.Table oTable = wordDocument.Tables[1];
                            string[] nameHeaderTable = { "№\nп/п", "Шифр,\nнаименование\nэлемента", "Шифр,\nнаименование\nзавода", "Шифр,\nнаименование\nвида испытания", "Шифр,\nнаименование\nсистемы", "Количество выстрелов, шт", "Цена", "Год", "1 кв", "2 кв", "3 кв", "4 кв" };
                            for (int i = 0; i < oTable.Columns.Count; i++)
                            {
                                Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                wordCellRange.Text = nameHeaderTable[i];
                                wordCellRange.Rows.HeadingFormat = -1;
                                wordCellRange.Font.Name = "Times New Roman";
                            }
                            oTable.Cell(1, 1).Width = 35;
                            oTable.Cell(1, 2).Width = 150;
                            oTable.Cell(1, 3).Width = 100;
                            oTable.Cell(1, 4).Width = 100;
                            oTable.Cell(1, 5).Width = 100;
                            oTable.Cell(1, 6).Width = 270;
                            oTable.Cell(1, 7).Width = 50;
                            oTable.Cell(1, 6).Split(2, 1);
                            oTable.Cell(2, 6).Split(1, 5);
                            for (int i = 6; i < 11; i++)
                            {
                                Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                wordCellRange.Text = nameHeaderTable[i + 1];
                                wordCellRange.Rows.HeadingFormat = -1;
                            }
                            int positionRows = 3;
                            int printPlIspCount = 1;
                            int allPlIspCount = 0;
                            foreach (ClassPlIspKontrol pl in plIspKontrolList)
                            {
                                if (form21.typePrint == 1)
                                {
                                    //Для сборки
                                    if (pl.codeVidIspPlIspKontrol == "098" || pl.codeVidIspPlIspKontrol == "099" || pl.codeVidIspPlIspKontrol == "205" || pl.codeVidIspPlIspKontrol == "206" || pl.codeVidIspPlIspKontrol == "207" || pl.codeVidIspPlIspKontrol == "239")
                                        allPlIspCount++;
                                }
                                else
                                {
                                    //Для испытаний
                                    if (pl.codeVidIspPlIspKontrol != "098" && pl.codeVidIspPlIspKontrol != "099" && pl.codeVidIspPlIspKontrol != "205" && pl.codeVidIspPlIspKontrol != "206" && pl.codeVidIspPlIspKontrol != "207" && pl.codeVidIspPlIspKontrol != "239")
                                        allPlIspCount++;
                                }
                            }
                            foreach (ClassPlIspKontrol pl in plIspKontrolList)
                            {
                                bool proverkaIspOrSb = false;
                                if (form21.typePrint == 1)
                                {
                                    //Для сборки
                                    if (pl.codeVidIspPlIspKontrol == "098" || pl.codeVidIspPlIspKontrol == "099" || pl.codeVidIspPlIspKontrol == "205" || pl.codeVidIspPlIspKontrol == "206" || pl.codeVidIspPlIspKontrol == "207" || pl.codeVidIspPlIspKontrol == "239")
                                        proverkaIspOrSb = true;
                                }
                                else
                                {
                                    //Для испытаний
                                    if (pl.codeVidIspPlIspKontrol != "098" && pl.codeVidIspPlIspKontrol != "099" && pl.codeVidIspPlIspKontrol != "205" && pl.codeVidIspPlIspKontrol != "206" && pl.codeVidIspPlIspKontrol != "207" && pl.codeVidIspPlIspKontrol != "239")
                                        proverkaIspOrSb = true;
                                }
                                if (proverkaIspOrSb)
                                {
                                    label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: печать плана испытанй " + printPlIspCount + " из " + allPlIspCount));
                                    printPlIspCount++;
                                    oTable.Rows.Add();
                                    for (int j = 0; j < 11; j++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                        wordCellRange.Rows.HeadingFormat = 0;
                                        if (j == 0)
                                            wordCellRange.Text = Convert.ToString(printPlIspCount - 1);
                                        if (j == 1)
                                            wordCellRange.Text = pl.codeElementPlIspKontrol + "\n" + pl.pictureElementPlIspKontrol + "\n" + pl.indexElementPlIspKontrol + "\n" + pl.nameElementPlIspKontrol;
                                        if (j == 2)
                                            wordCellRange.Text = pl.codeFactoryPlIspKontrol + "\n" + pl.nameFactoryPlIspKontrol;
                                        if (j == 3)
                                            wordCellRange.Text = pl.codeVidIspPlIspKontrol + "\n" + pl.nameVidIspPlIspKontrol;
                                        if (j == 4)
                                            wordCellRange.Text = pl.codeSystemPlIspKontrol + "\n" + pl.nameSystemPlIspKontrol;
                                        if (j == 5)
                                            wordCellRange.Text = pl.vYearPlIspKontrol;
                                        if (j == 6)
                                            wordCellRange.Text = pl.vOnePlIspKontrol;
                                        if (j == 7)
                                            wordCellRange.Text = pl.vTwoPlIspKontrol;
                                        if (j == 8)
                                            wordCellRange.Text = pl.vThrePlIspKontrol;
                                        if (j == 9)
                                            wordCellRange.Text = pl.vThourPlIspKontrol;
                                        if (j == 10)
                                            wordCellRange.Text = "";
                                    }
                                    positionRows++;
                                }
                            }
                            //TODO: 
                            label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: печать сводных итогов плана"));

                            label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: создание экземпляров"));
                            //Создание экземпляров
                            wordDocument.Range().Copy();
                            var rangeAllDocumentEkz = wordDocument.Content;
                            rangeAllDocumentEkz.Find.ClearFormatting();
                            for (int j = 0; j < plIspResultList.Count; j++)
                            {
                                functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                            }
                            for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                            {
                                //В конец документа
                                object what = Word.WdGoToItem.wdGoToLine;
                                object which = Word.WdGoToDirection.wdGoToLast;
                                Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                //Создаем разрыв РАЗДЕЛА (не страниц)
                                endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                //Вставляем
                                endRange.Paste();
                                rangeAllDocumentEkz = wordDocument.Content;
                                rangeAllDocumentEkz.Find.ClearFormatting();
                                rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                            }
                            label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: сохранение документа"));
                            //Сохранение
                            dateNowFileName = DateTime.Now;
                            string strSaveName = Convert.ToString(dateNowFileName);
                            strSaveName = strSaveName.Replace(':', '-');
                            if (form21.typePrint == 1)
                                wordDocument.SaveAs(mainDirectoryForSave + @"ГОДОВОЙ ПЛАН\ГОДОВОЙ ПЛАН НА СБОРКУ " + strSaveName + ".docx");
                            else
                                wordDocument.SaveAs(mainDirectoryForSave + @"ГОДОВОЙ ПЛАН\ГОДОВОЙ ПЛАН ИСПЫТАНИЙ " + strSaveName + ".docx");
                            wordDocument.Close();
                        }
                        catch
                        {
                            MessageBox.Show("Ошибка!");
                            printProverka = false;
                        }
                        finally
                        {
                            oWord.Quit();
                            if (printProverka)
                                if (form21.typePrint == 1)
                                    functionMessageShow(2, "Годовой план сборки напечатан!");
                                else
                                    functionMessageShow(2, "Годовой план испытаний напечатан!");
                            label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = ""));
                            button204.BeginInvoke((MethodInvoker)(() => this.button204.Enabled = true));
                            button206.BeginInvoke((MethodInvoker)(() => this.button206.Enabled = true));
                            button207.BeginInvoke((MethodInvoker)(() => this.button207.Enabled = true));
                            button208.BeginInvoke((MethodInvoker)(() => this.button208.Enabled = true));
                        }
                    }).Start();
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //Справка-обоснование
        private void button206_Click(object sender, EventArgs e)
        {
            Form21 form21 = new Form21(true, true);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                functionQueryPlIspKontrol(yearPrintKontrol, numberPrintKontrol);
                //functionQueryVK();
                functionQueryNoneVk();
                potrVKEKontrolList.Clear();
                if (form21.typePrint == 1)
                    functionPotrVKEKontrolForming(yearPrintKontrol, false);
                else
                    functionPotrVKEKontrolForming(yearPrintKontrol, true);
                if (plIspKontrolList.Count > 0)
                {
                    if (potrVKEKontrolList.Count > 0)
                    {
                        bool printProverka = true;
                        button204.Enabled = false;
                        button206.Enabled = false;
                        button207.Enabled = false;
                        button208.Enabled = false;
                        //Количество экземпляров
                        string countEkz = form21.textBox2.Text;
                        //Учетный номер
                        string uchNumber = form21.textBox1.Text;
                        //WORD
                        label285.Text = "Печать: подготовка документа к печати";
                        new Thread(() =>
                        {
                            Word.Application oWord = new Word.Application();
                            oWord.Visible = false;
                            try
                            {
                                //Открытие документа
                                Word.Document wordDocument;
                                if (form21.typePrint == 1)
                                    wordDocument = oWord.Documents.Open(templateFileNameWordVKESbKontrol);
                                else
                                    wordDocument = oWord.Documents.Open(templateFileNameWordVKEIspKontrol);
                                //Поиск и замена текста
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                                functionReplaceInText(wordDocument, oWord, "{year}", yearPrintKontrol);
                                //Добавление в файл таблицы
                                label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: создание титульного листа"));
                                Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                                //Добавление в файл таблицы
                                var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                wordDocument.Tables.Add(range, 1, 6, autoFitBehavior);
                                Word.Table oTable = wordDocument.Tables[1];
                                string[] nameHeaderTable = { "№\nп/п", "Код и наименование\nкомплектующего\nэлемента", "Код и наименование\nиспытуемого\nэлемента", "Заводы-\nизготовители\nКЭ и ИЭ", "Заявлено (шт) /Объем испытаний (выстр) /Результная потр.в КЭ (шт)", "Остаток\nна начало\nпериода", "год", "1 кв", "2 кв", "3 кв", "4 кв" };
                                for (int i = 0; i < oTable.Columns.Count; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Text = nameHeaderTable[i];
                                    wordCellRange.Rows.HeadingFormat = -1;
                                    wordCellRange.Font.Name = "Times New Roman";
                                }
                                oTable.Cell(1, 1).Width = 35;
                                oTable.Cell(1, 2).Width = 120;
                                oTable.Cell(1, 3).Width = 120;
                                oTable.Cell(1, 4).Width = 80;
                                oTable.Cell(1, 5).Width = 370;
                                oTable.Cell(1, 6).Width = 60;
                                oTable.Cell(1, 5).Split(2, 1);
                                oTable.Cell(2, 5).Split(1, 5);
                                oTable.Cell(2, 5).Width = 130;
                                oTable.Cell(2, 6).Width = 60;
                                oTable.Cell(2, 7).Width = 60;
                                oTable.Cell(2, 8).Width = 60;
                                oTable.Cell(2, 9).Width = 60;
                                oTable.Cell(1, 6).Merge(oTable.Cell(2, 10));
                                for (int i = 5; i < 10; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Text = nameHeaderTable[i + 1];
                                    wordCellRange.Rows.HeadingFormat = -1;
                                }
                                int positionRows = 3;
                                int positionRowsNew = 3;
                                int printVKECount = 1;
                                foreach (ClassPotrVKEKontrol vke in potrVKEKontrolList)
                                {
                                    label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: печать справки-обоснование " + printVKECount + " из " + potrVKEKontrolList.Count));
                                    printVKECount++;
                                    oTable.Rows.Add();
                                    positionRowsNew = positionRows;
                                    for (int j = 0; j < 10; j++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                        wordCellRange.Rows.HeadingFormat = 0;
                                        if (j == 0)
                                            wordCellRange.Text = Convert.ToString(printVKECount - 1);
                                        if (j == 1)
                                            wordCellRange.Text = vke.codeElementPotrVKEKontrol + "\n" + vke.pictureElementPotrVKEKontrol + "\n" + vke.indexElementPotrVKEKontrol + "\n" + vke.nameElementPotrVKEKontrol;
                                        if (j == 2)
                                        {
                                            int kPl = 0;
                                            foreach (ClassPlIspKontrol pl in vke.ispEl)
                                            {
                                                oTable.Rows.Add();
                                                positionRowsNew++;
                                                for (int k = 3; k < 10; k++)
                                                {
                                                    Word.Range wordCellRange2 = oTable.Cell(positionRowsNew, k).Range;
                                                    if (k == 3)
                                                        wordCellRange2.Text = pl.codeElementPlIspKontrol + "\n" + pl.pictureElementPlIspKontrol + "\n" + pl.indexElementPlIspKontrol + "\n" + pl.nameElementPlIspKontrol;
                                                    if (k == 4)
                                                        wordCellRange2.Text = pl.codeFactoryPlIspKontrol + "\n" + pl.nameFactoryPlIspKontrol;
                                                    if (k == 5)
                                                        wordCellRange2.Text = "Объем исп     " + pl.vYearPlIspKontrol + "\n" + "Потр.в КЭ     " + Convert.ToDouble(pl.vYearPlIspKontrol) * vke.countVK[kPl];
                                                    if (k == 6)
                                                        if (pl.vOnePlIspKontrol.Length > 0)
                                                            wordCellRange2.Text = pl.vOnePlIspKontrol;
                                                    if (k == 7)
                                                        if (pl.vTwoPlIspKontrol.Length > 0)
                                                            wordCellRange2.Text = pl.vTwoPlIspKontrol;
                                                    if (k == 8)
                                                        if (pl.vThrePlIspKontrol.Length > 0)
                                                            wordCellRange2.Text = pl.vThrePlIspKontrol;
                                                    if (k == 9)
                                                        if (pl.vThourPlIspKontrol.Length > 0)
                                                            wordCellRange2.Text = pl.vThourPlIspKontrol;
                                                }
                                                kPl++;
                                            }
                                        }
                                        if (j == 3)
                                            wordCellRange.Text = vke.codeFactoryPostPotrVKEKontrol + "\n" + vke.nameFactoryPostPotrVKEKontrol;
                                        if (j == 4)
                                            wordCellRange.Text = "Заявлено:     " + vke.vYearPotrVKEKontrol;
                                        if (j == 5)
                                            if (vke.vOnePotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vOnePotrVKEKontrol);
                                        if (j == 6)
                                            if (vke.vTwoPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vTwoPotrVKEKontrol);
                                        if (j == 7)
                                            if (vke.vThrePotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vThrePotrVKEKontrol);
                                        if (j == 8)
                                            if (vke.vThourPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vThourPotrVKEKontrol);
                                        if (j == 9)
                                            wordCellRange.Text = "";
                                    }
                                    positionRows = positionRowsNew;
                                    positionRows++;
                                }
                                label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: создание экземпляров"));
                                //Создание экземпляров
                                wordDocument.Range().Copy();
                                var rangeAllDocumentEkz = wordDocument.Content;
                                rangeAllDocumentEkz.Find.ClearFormatting();
                                for (int j = 0; j < plIspKontrolList.Count; j++)
                                {
                                    functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                                }
                                for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                                {
                                    //В конец документа
                                    object what = Word.WdGoToItem.wdGoToLine;
                                    object which = Word.WdGoToDirection.wdGoToLast;
                                    Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                    //Создаем разрыв РАЗДЕЛА (не страниц)
                                    endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                    //Вставляем
                                    endRange.Paste();
                                    rangeAllDocumentEkz = wordDocument.Content;
                                    rangeAllDocumentEkz.Find.ClearFormatting();
                                    rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                }
                                label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: сохранение документа"));
                                //Сохранение
                                dateNowFileName = DateTime.Now;
                                string strSaveName = Convert.ToString(dateNowFileName);
                                strSaveName = strSaveName.Replace(':', '-');
                                if (form21.typePrint == 1)
                                    wordDocument.SaveAs(mainDirectoryForSave + @"ГОДОВОЙ ПЛАН\СПРАВКА-ОБОСНОВАНИЕ ДЛЯ СБОРКИ " + strSaveName + ".docx");
                                else
                                    wordDocument.SaveAs(mainDirectoryForSave + @"ГОДОВОЙ ПЛАН\СПРАВКА-ОБОСНОВАНИЕ ДЛЯ ИСПЫТАНИЙ " + strSaveName + ".docx");
                                wordDocument.Close();
                            }
                            catch
                            {
                                MessageBox.Show("Ошибка!");
                                printProverka = false;
                            }
                            finally
                            {
                                oWord.Quit();
                                if (printProverka)
                                    if (form21.typePrint == 1)
                                        functionMessageShow(2, "Справка-обоснование для сборки напечатана!");
                                    else
                                        functionMessageShow(2, "Справка-обоснование для испытаний напечатана!");
                                label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = ""));
                                button204.BeginInvoke((MethodInvoker)(() => this.button204.Enabled = true));
                                button206.BeginInvoke((MethodInvoker)(() => this.button206.Enabled = true));
                                button207.BeginInvoke((MethodInvoker)(() => this.button207.Enabled = true));
                                button208.BeginInvoke((MethodInvoker)(() => this.button208.Enabled = true));
                            }
                        }).Start();
                    }
                    else
                        functionMessageShow(1, "Не найдена потребность в комплектующих элементах!");
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //Результ потребности в КЭ
        private void button207_Click(object sender, EventArgs e)
        {
            Form21 form21 = new Form21(true, true);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                functionQueryPlIspKontrol(yearPrintKontrol, numberPrintKontrol);
                //functionQueryVK();
                functionQueryNoneVk();
                potrVKEKontrolList.Clear();
                if (form21.typePrint == 1)
                    functionPotrVKEKontrolForming(yearPrintKontrol, false);
                else
                    functionPotrVKEKontrolForming(yearPrintKontrol, true);
                if (plIspKontrolList.Count > 0)
                {
                    if (potrVKEKontrolList.Count > 0)
                    {
                        bool printProverka = true;
                        button204.Enabled = false;
                        button206.Enabled = false;
                        button207.Enabled = false;
                        button208.Enabled = false;
                        //Количество экземпляров
                        string countEkz = form21.textBox2.Text;
                        //Учетный номер
                        string uchNumber = form21.textBox1.Text;
                        //WORD
                        label285.Text = "Печать: подготовка документа к печати";
                        new Thread(() =>
                        {
                            Word.Application oWord = new Word.Application();
                            oWord.Visible = false;
                            try
                            {
                                //Открытие документа
                                Word.Document wordDocument;
                                if (form21.typePrint == 1)
                                    wordDocument = oWord.Documents.Open(templateFileNameWordPotrVKESbKontrol);
                                else
                                    wordDocument = oWord.Documents.Open(templateFileNameWordPotrVKEIspKontrol);
                                //Поиск и замена текста
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                                functionReplaceInText(wordDocument, oWord, "{year}", yearPrintKontrol);
                                string newYearKontrol = Convert.ToString(Convert.ToInt32(yearPrintKontrol) + 1);
                                functionReplaceInText(wordDocument, oWord, "{newYear}", newYearKontrol);
                                //Добавление в файл таблицы
                                label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: создание титульного листа"));
                                Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                                //Добавление в файл таблицы
                                var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                wordDocument.Tables.Add(range, 1, 6, autoFitBehavior);
                                Word.Table oTable = wordDocument.Tables[1];
                                string[] nameHeaderTable = { "№\nп/п", "Код и наименование\nкомплектующего\nэлемента", "Ед. измерения", "Поставщик", "Потребность в комплектующих элементах", "Примечание", "год", "1 кв", "2 кв", "3 кв", "4 кв" };
                                for (int i = 0; i < oTable.Columns.Count; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Text = nameHeaderTable[i];
                                    wordCellRange.Rows.HeadingFormat = -1;
                                    wordCellRange.Font.Name = "Times New Roman";
                                }
                                oTable.Cell(1, 1).Width = 35;
                                oTable.Cell(1, 2).Width = 120;
                                oTable.Cell(1, 3).Width = 60;
                                oTable.Cell(1, 4).Width = 80;
                                oTable.Cell(1, 5).Width = 320;
                                oTable.Cell(1, 6).Width = 170;
                                oTable.Cell(1, 5).Split(2, 1);
                                oTable.Cell(2, 5).Split(1, 5);
                                oTable.Cell(2, 5).Width = 80;
                                oTable.Cell(2, 6).Width = 60;
                                oTable.Cell(2, 7).Width = 60;
                                oTable.Cell(2, 8).Width = 60;
                                oTable.Cell(2, 9).Width = 60;
                                oTable.Cell(1, 6).Merge(oTable.Cell(2, 10));
                                for (int i = 5; i < 10; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Text = nameHeaderTable[i + 1];
                                    wordCellRange.Rows.HeadingFormat = -1;
                                }
                                int positionRows = 3;
                                int printVKECount = 1;
                                foreach (ClassPotrVKEKontrol vke in potrVKEKontrolList)
                                {
                                    label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: печать справки-обоснование " + printVKECount + " из " + potrVKEKontrolList.Count));
                                    printVKECount++;
                                    oTable.Rows.Add();
                                    for (int j = 0; j < 10; j++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                        wordCellRange.Rows.HeadingFormat = 0;
                                        if (j == 0)
                                            wordCellRange.Text = Convert.ToString(printVKECount - 1);
                                        if (j == 1)
                                            wordCellRange.Text = vke.codeElementPotrVKEKontrol + "\n" + vke.pictureElementPotrVKEKontrol + "\n" + vke.indexElementPotrVKEKontrol + "\n" + vke.nameElementPotrVKEKontrol;
                                        if (j == 2)
                                            wordCellRange.Text = vke.codeEdIzmPotrVKEKontrol + "\n" + vke.nameEdIzmPotrVKEKontrol;
                                        if (j == 3)
                                            wordCellRange.Text = vke.codeFactoryPostPotrVKEKontrol + "\n" + vke.nameFactoryPostPotrVKEKontrol;
                                        if (j == 4)
                                            if (vke.vYearPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vYearPotrVKEKontrol);
                                        if (j == 5)
                                            if (vke.vOnePotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vOnePotrVKEKontrol);
                                        if (j == 6)
                                            if (vke.vTwoPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vTwoPotrVKEKontrol);
                                        if (j == 7)
                                            if (vke.vThrePotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vThrePotrVKEKontrol);
                                        if (j == 8)
                                            if (vke.vThourPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vThourPotrVKEKontrol);
                                        if (j == 9)
                                            wordCellRange.Text = "";
                                    }
                                    positionRows++;
                                }
                                label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: создание экземпляров"));
                                //Создание экземпляров
                                wordDocument.Range().Copy();
                                var rangeAllDocumentEkz = wordDocument.Content;
                                rangeAllDocumentEkz.Find.ClearFormatting();
                                for (int j = 0; j < plIspKontrolList.Count; j++)
                                {
                                    functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                                }
                                for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                                {
                                    //В конец документа
                                    object what = Word.WdGoToItem.wdGoToLine;
                                    object which = Word.WdGoToDirection.wdGoToLast;
                                    Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                    //Создаем разрыв РАЗДЕЛА (не страниц)
                                    endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                    //Вставляем
                                    endRange.Paste();
                                    rangeAllDocumentEkz = wordDocument.Content;
                                    rangeAllDocumentEkz.Find.ClearFormatting();
                                    rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                }
                                label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = "Печать: сохранение документа"));
                                //Сохранение
                                dateNowFileName = DateTime.Now;
                                string strSaveName = Convert.ToString(dateNowFileName);
                                strSaveName = strSaveName.Replace(':', '-');
                                if (form21.typePrint == 1)
                                    wordDocument.SaveAs(mainDirectoryForSave + @"ГОДОВОЙ ПЛАН\Результ ПОТРЕБНОСТИ ДЛЯ СБОРКИ " + strSaveName + ".docx");
                                else
                                    wordDocument.SaveAs(mainDirectoryForSave + @"ГОДОВОЙ ПЛАН\Результ ПОТРЕБНОСТИ ДЛЯ ИСПЫТАНИЙ " + strSaveName + ".docx");
                                wordDocument.Close();
                            }
                            catch
                            {
                                MessageBox.Show("Ошибка!");
                                printProverka = false;
                            }
                            finally
                            {
                                oWord.Quit();
                                if (printProverka)
                                    if (form21.typePrint == 1)
                                        functionMessageShow(2, "Результ потребности для сборки напечатан!");
                                    else
                                        functionMessageShow(2, "Результ потребности для испытаний напечатан!");
                                label285.BeginInvoke((MethodInvoker)(() => this.label285.Text = ""));
                                button204.BeginInvoke((MethodInvoker)(() => this.button204.Enabled = true));
                                button206.BeginInvoke((MethodInvoker)(() => this.button206.Enabled = true));
                                button207.BeginInvoke((MethodInvoker)(() => this.button207.Enabled = true));
                                button208.BeginInvoke((MethodInvoker)(() => this.button208.Enabled = true));
                            }
                        }).Start();
                    }
                    else
                        functionMessageShow(1, "Не найдена потребность в комплектующих элементах!");
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //Мат часть
        private void button208_Click(object sender, EventArgs e)
        {
            /*Form21 form21 = new Form21(false, true);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                if (form21.typePrint == 1)
                {
                    //Справка-обоснование потребности в МЧ
                }
                else
                {
                    if (form21.typePrint == 2)
                    {
                        //Мат часть Результ плана
                    }
                    else
                    {
                        //Заявки на спец. комп. изделия
                    }
                }
            }*/
        }

        //---------------------------------------------------------------------------------
        //------------------------------ПЛАН НА РезультНЫЙ ПЕРИОД------------------------------
        //Функция отмены меню Результного плана
        private void functionCancelResult()
        {
            panel34.Visible = true;
            panel32.Visible = false;
            panel31.Visible = false;
            panel30.Visible = false;
            panel29.Visible = false;
            panel28.Visible = false;
            panel27.Visible = false;
            panel35.Visible = false;
        }

        //------------------------------ФОРМАТКИ ИСПЫТАНИЙ------------------------------
        private void button270_Click(object sender, EventArgs e)
        {
            panel34.Visible = false;
            panel32.Visible = true;
            functionQueryFI();
            //functionQueryVK();
            positionFIResultList = 0;
            functionShowFIResult(positionFIResultList);
        }

        private void button267_Click(object sender, EventArgs e)
        {
            functionCancelResult();
        }

        //Функция отображение форматки испытания годового плана
        private void functionShowFIResult(int pos)
        {
            if (!spFIResultEdit)
            {
                if (pos >= 0 && fiList.Count > 0)
                {
                    textBox341.Text = Convert.ToString(fiList[pos].codeElementFIMespl);
                    textBox339.Text = Convert.ToString(fiList[pos].pictureElementFIMespl);
                    textBox340.Text = Convert.ToString(fiList[pos].codeVidIspFIMespl);
                    label359.Text = Convert.ToString(fiList[pos].nameVidIspFIMespl);
                    textBox338.Text = Convert.ToString(fiList[pos].indexElementFIMespl);
                    textBox337.Text = Convert.ToString(fiList[pos].nameElementFIMespl);
                    textBox336.Text = Convert.ToString(fiList[pos].codeSysFIMespl);
                    label363.Text = Convert.ToString(fiList[pos].nameSysFIMespl);
                    textBox335.Text = Convert.ToString(fiList[pos].codeUsIspMespl);
                    textBox334.Text = Convert.ToString(fiList[pos].distanceFIMespl);
                    textBox333.Text = Convert.ToString(fiList[pos].sizePartFIMespl);
                    textBox332.Text = Convert.ToString(fiList[pos].lgotFIMespl);
                    textBox331.Text = Convert.ToString(fiList[pos].countShotPartFIMespl);
                    textBox330.Text = Convert.ToString(fiList[pos].countReShotFIMespl);
                    textBox329.Text = Convert.ToString(fiList[pos].countPodShotFIMespl);
                    textBox328.Text = Convert.ToString(fiList[pos].uslCountPartYearFIMespl);
                    textBox327.Text = Convert.ToString(fiList[pos].codePregradiOneFIMespl);
                    textBox326.Text = Convert.ToString(fiList[pos].livePregradiOneFIMespl);
                    textBox325.Text = Convert.ToString(fiList[pos].codePregradiTwoFIMespl);
                    textBox324.Text = Convert.ToString(fiList[pos].livePregradiTwoFIMespl);
                    textBox323.Text = Convert.ToString(fiList[pos].liveSystemFIMespl);
                    textBox322.Text = Convert.ToString(fiList[pos].prevLiveSystemFIMespl);
                    textBox321.Text = Convert.ToString(fiList[pos].codeNameStFIMespl);
                    label362.Text = Convert.ToString(fiList[pos].nameNameStFIMespl);
                    textBox320.Text = Convert.ToString(fiList[pos].liveStFIMespl);
                    textBox319.Text = Convert.ToString(fiList[pos].prevLiveStFIMespl);
                    textBox318.Text = Convert.ToString(fiList[pos].codeNameStandFIMespl);
                    label361.Text = Convert.ToString(fiList[pos].nameNameStandFIMespl);
                    textBox317.Text = Convert.ToString(fiList[pos].liveStandFIMespl);
                    textBox316.Text = Convert.ToString(fiList[pos].prevLiveStandFIMespl);
                    textBox315.Text = Convert.ToString(fiList[pos].koefAmorGilzFIMespl);
                    textBox314.Text = Convert.ToString(fiList[pos].koefPrivedZarFIMespl);
                    textBox313.Text = Convert.ToString(fiList[pos].koefPrivShotFIMespl);
                    textBox312.Text = Convert.ToString(fiList[pos].uslCountZvFIMespl);
                    textBox311.Text = Convert.ToString(fiList[pos].codeEdIzmFIMespl);
                    label360.Text = Convert.ToString(fiList[pos].nameEdIzmFIMespl);
                    textBox310.Text = Convert.ToString(fiList[pos].id);
                }
                else
                {
                    textBox341.Text = "";
                    textBox339.Text = "";
                    textBox340.Text = "";
                    label359.Text = "";
                    textBox338.Text = "";
                    textBox337.Text = "";
                    textBox336.Text = "";
                    label363.Text = "";
                    textBox335.Text = "";
                    textBox334.Text = "";
                    textBox333.Text = "";
                    textBox332.Text = "";
                    textBox331.Text = "";
                    textBox330.Text = "";
                    textBox329.Text = "";
                    textBox328.Text = "";
                    textBox327.Text = "";
                    textBox326.Text = "";
                    textBox325.Text = "";
                    textBox324.Text = "";
                    textBox323.Text = "";
                    textBox322.Text = "";
                    textBox321.Text = "";
                    label362.Text = "";
                    textBox320.Text = "";
                    textBox319.Text = "";
                    textBox318.Text = "";
                    label361.Text = "";
                    textBox317.Text = "";
                    textBox316.Text = "";
                    textBox315.Text = "";
                    textBox314.Text = "";
                    textBox313.Text = "";
                    textBox312.Text = "";
                    textBox311.Text = "";
                    label360.Text = "";
                    textBox310.Text = "";
                }
            }
        }

        //Позиция форматки испытания
        private void createPositionFIResult(int s)
        {
            if (s == 0)
            {
                if (positionFIResultList - 1 >= 0)
                    positionFIResultList--;
            }
            else
            {
                if (positionFIResultList + 1 < fiList.Count)
                    positionFIResultList++;
            }
            functionShowFIResult(positionFIResultList);
        }

        private void button266_Click(object sender, EventArgs e)
        {
            createPositionFIResult(0);
        }

        private void button262_Click(object sender, EventArgs e)
        {
            createPositionFIResult(1);
        }

        //Добавить
        private void button265_Click(object sender, EventArgs e)
        {
            functionShowFIResult(-1);
            spFIResultEdit = true;
            button265.Visible = false;
            button264.Visible = false;
            button263.Visible = false;
            button259.Visible = false;
            button266.Visible = false;
            button267.Visible = false;
            button257.Visible = false;
            button262.Visible = false;
            button261.Visible = true;
            button260.Visible = true;
            textBox311.ReadOnly = false;
            textBox312.ReadOnly = false;
            textBox313.ReadOnly = false;
            textBox314.ReadOnly = false;
            textBox315.ReadOnly = false;
            textBox316.ReadOnly = false;
            textBox317.ReadOnly = false;
            textBox318.ReadOnly = false;
            textBox319.ReadOnly = false;
            textBox320.ReadOnly = false;
            textBox321.ReadOnly = false;
            textBox322.ReadOnly = false;
            textBox323.ReadOnly = false;
            textBox324.ReadOnly = false;
            textBox325.ReadOnly = false;
            textBox326.ReadOnly = false;
            textBox327.ReadOnly = false;
            textBox328.ReadOnly = false;
            textBox329.ReadOnly = false;
            textBox330.ReadOnly = false;
            textBox331.ReadOnly = false;
            textBox332.ReadOnly = false;
            textBox333.ReadOnly = false;
            textBox334.ReadOnly = false;
            textBox335.ReadOnly = false;
            textBox336.ReadOnly = false;
            textBox340.ReadOnly = false;
            textBox341.ReadOnly = false;
            textBox341.Focus();
        }

        //Редактировать
        private void button264_Click(object sender, EventArgs e)
        {
            spFIResultEdit = true;
            button265.Visible = false;
            button264.Visible = false;
            button263.Visible = false;
            button259.Visible = false;
            button266.Visible = false;
            button267.Visible = false;
            button257.Visible = false;
            button262.Visible = false;
            button261.Visible = true;
            button258.Visible = true;
            textBox311.ReadOnly = false;
            textBox312.ReadOnly = false;
            textBox313.ReadOnly = false;
            textBox314.ReadOnly = false;
            textBox315.ReadOnly = false;
            textBox316.ReadOnly = false;
            textBox317.ReadOnly = false;
            textBox318.ReadOnly = false;
            textBox319.ReadOnly = false;
            textBox320.ReadOnly = false;
            textBox321.ReadOnly = false;
            textBox322.ReadOnly = false;
            textBox323.ReadOnly = false;
            textBox324.ReadOnly = false;
            textBox325.ReadOnly = false;
            textBox326.ReadOnly = false;
            textBox327.ReadOnly = false;
            textBox328.ReadOnly = false;
            textBox329.ReadOnly = false;
            textBox330.ReadOnly = false;
            textBox331.ReadOnly = false;
            textBox332.ReadOnly = false;
            textBox333.ReadOnly = false;
            textBox334.ReadOnly = false;
            textBox335.ReadOnly = false;
            textBox336.ReadOnly = false;
            textBox340.ReadOnly = false;
            textBox341.ReadOnly = false;
            textBox341.Focus();
        }

        //Удалить
        private void button263_Click(object sender, EventArgs e)
        {
            if (positionFIKontrolList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить форматку испытания?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [FIMespl] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox310.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Форматка испытания успешна удалена");
                    functionQueryFI();
                    createPositionFIKontrol(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите форматку испытания для удаления");
            }
        }

        //Отмена добавления и редактирования
        private void button261_Click(object sender, EventArgs e)
        {
            functionDisableShoeNewFIResult();
        }

        //Функция отмены добавления и редактирования
        private void functionDisableShoeNewFIResult()
        {
            spFIResultEdit = false;
            button265.Visible = true;
            button264.Visible = true;
            button263.Visible = true;
            button259.Visible = true;
            button266.Visible = true;
            button267.Visible = true;
            button257.Visible = true;
            button262.Visible = true;
            button261.Visible = false;
            button260.Visible = false;
            button258.Visible = false;
            textBox311.ReadOnly = true;
            textBox312.ReadOnly = true;
            textBox313.ReadOnly = true;
            textBox314.ReadOnly = true;
            textBox315.ReadOnly = true;
            textBox316.ReadOnly = true;
            textBox317.ReadOnly = true;
            textBox318.ReadOnly = true;
            textBox319.ReadOnly = true;
            textBox320.ReadOnly = true;
            textBox321.ReadOnly = true;
            textBox322.ReadOnly = true;
            textBox323.ReadOnly = true;
            textBox324.ReadOnly = true;
            textBox325.ReadOnly = true;
            textBox326.ReadOnly = true;
            textBox327.ReadOnly = true;
            textBox328.ReadOnly = true;
            textBox329.ReadOnly = true;
            textBox330.ReadOnly = true;
            textBox331.ReadOnly = true;
            textBox332.ReadOnly = true;
            textBox333.ReadOnly = true;
            textBox334.ReadOnly = true;
            textBox335.ReadOnly = true;
            textBox336.ReadOnly = true;
            textBox340.ReadOnly = true;
            textBox341.ReadOnly = true;
            functionShowFIResult(positionFIResultList);
        }

        //Подтверждение добавления
        private void button260_Click(object sender, EventArgs e)
        {
            //Проверка на наличия кода испытуемого элемента и вида испытания
            if (!string.IsNullOrEmpty(textBox341.Text) && !string.IsNullOrWhiteSpace(textBox341.Text) && !string.IsNullOrEmpty(textBox340.Text) && !string.IsNullOrWhiteSpace(textBox340.Text))
            {
                //Проверка на наличие форматки испытания
                if (!functionProverkaFIInList(textBox341.Text, textBox340.Text))
                {
                    //Проверка на заполненные поля
                    string proverkaAllFIResult = functionProverkaAllFIResult();
                    if (proverkaAllFIResult.Length > 0)
                    {
                        functionMessageShow(2, proverkaAllFIResult);
                    }
                    else
                    {
                        bool proverkaShifrov = true;
                        if (!functionProverkaElementsInListFI(textBox341.Text))
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaVidIspInList(textBox340.Text))
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Вид испытания с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaMCInList(textBox336.Text) && textBox336.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkapregradiInList(textBox327.Text) && textBox327.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkapregradiInList(textBox325.Text) && textBox325.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaMCInList(textBox321.Text) && textBox321.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaMCInList(textBox318.Text) && textBox318.Text != "000")
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                        }
                        if (!functionProverkaEdIzmInList(textBox311.Text))
                        {
                            proverkaShifrov = false;
                            functionMessageShow(1, "Ед. измерения с данным кодом отсутствует в справочнике!");
                        }
                        if (proverkaShifrov)
                        {
                            string polInBD = "";
                            string valInBD = "";
                            if (textBox336.Text != "000")
                            {
                                polInBD += ",codeSysFIMespl";
                                valInBD += ",@codeSysFIMespl";
                            }
                            if (textBox335.Text.Length > 0)
                            {
                                polInBD += ",codeUsIspMespl";
                                valInBD += ",@codeUsIspMespl";
                            }
                            if (textBox334.Text.Length > 0)
                            {
                                polInBD += ",distanceFIMespl";
                                valInBD += ",@distanceFIMespl";
                            }
                            if (textBox333.Text.Length > 0)
                            {
                                polInBD += ",sizePartFIMespl";
                                valInBD += ",@sizePartFIMespl";
                            }
                            if (textBox332.Text.Length > 0)
                            {
                                polInBD += ",lgotFIMespl";
                                valInBD += ",@lgotFIMespl";
                            }
                            if (textBox331.Text.Length > 0)
                            {
                                polInBD += ",countShotPartFIMespl";
                                valInBD += ",@countShotPartFIMespl";
                            }
                            if (textBox330.Text.Length > 0)
                            {
                                polInBD += ",countReShotFIMespl";
                                valInBD += ",@countReShotFIMespl";
                            }
                            if (textBox329.Text.Length > 0)
                            {
                                polInBD += ",countPodShotFIMespl";
                                valInBD += ",@countPodShotFIMespl";
                            }
                            if (textBox328.Text.Length > 0)
                            {
                                polInBD += ",uslCountPartYearFIMespl";
                                valInBD += ",@uslCountPartYearFIMespl";
                            }
                            if (textBox327.Text != "000")
                            {
                                polInBD += ",codePregradiOneFIMespl";
                                valInBD += ",@codePregradiOneFIMespl";
                            }
                            if (textBox326.Text.Length > 0)
                            {
                                polInBD += ",livePregradiOneFIMespl";
                                valInBD += ",@livePregradiOneFIMespl";
                            }
                            if (textBox325.Text != "000")
                            {
                                polInBD += ",codePregradiTwoFIMespl";
                                valInBD += ",@codePregradiTwoFIMespl";
                            }
                            if (textBox324.Text.Length > 0)
                            {
                                polInBD += ",livePregradiTwoFIMespl";
                                valInBD += ",@livePregradiTwoFIMespl";
                            }
                            if (textBox323.Text.Length > 0)
                            {
                                polInBD += ",liveSystemFIMespl";
                                valInBD += ",@liveSystemFIMespl";
                            }
                            if (textBox322.Text.Length > 0)
                            {
                                polInBD += ",prevLiveSystemFIMespl";
                                valInBD += ",@prevLiveSystemFIMespl";
                            }
                            if (textBox321.Text != "000")
                            {
                                polInBD += ",codeNameStFIMespl";
                                valInBD += ",@codeNameStFIMespl";
                            }
                            if (textBox320.Text.Length > 0)
                            {
                                polInBD += ",liveStFIMespl";
                                valInBD += ",@liveStFIMespl";
                            }
                            if (textBox319.Text.Length > 0)
                            {
                                polInBD += ",prevLiveStFIMespl";
                                valInBD += ",@prevLiveStFIMespl";
                            }
                            if (textBox318.Text != "000")
                            {
                                polInBD += ",codeNameStandFIMespl";
                                valInBD += ",@codeNameStandFIMespl";
                            }
                            if (textBox317.Text.Length > 0)
                            {
                                polInBD += ",liveStandFIMespl";
                                valInBD += ",@liveStandFIMespl";
                            }
                            if (textBox316.Text.Length > 0)
                            {
                                polInBD += ",prevLiveStandFIMespl";
                                valInBD += ",@prevLiveStandFIMespl";
                            }
                            if (textBox315.Text.Length > 0)
                            {
                                polInBD += ",koefAmorGilzFIMespl";
                                valInBD += ",@koefAmorGilzFIMespl";
                            }
                            if (textBox314.Text.Length > 0)
                            {
                                polInBD += ",koefPrivedZarFIMespl";
                                valInBD += ",@koefPrivedZarFIMespl";
                            }
                            if (textBox313.Text.Length > 0)
                            {
                                polInBD += ",koefPrivShotFIMespl";
                                valInBD += ",@koefPrivShotFIMespl";
                            }
                            if (textBox312.Text.Length > 0)
                            {
                                polInBD += ",uslCountZvFIMespl";
                                valInBD += ",@uslCountZvFIMespl";
                            }
                            if (textBox311.Text.Length > 0)
                            {
                                polInBD += ",codeEdIzmFIMespl";
                                valInBD += ",@codeEdIzmFIMespl";
                            }
                            string commandInBD = "INSERT INTO [FIMespl] (codeElementFIMespl,vidIspFIMespl" + polInBD + ") VALUES (@codeElementFIMespl,@vidIspFIMespl" + valInBD + ")";
                            SQLiteCommand command = new SQLiteCommand(commandInBD, sqliteConnection);
                            //Код испытуемого элемента
                            int idElementsFIMespl = 0;
                            foreach (ClassElements el in elementsList)
                                if (el.getCode() == textBox341.Text)
                                    idElementsFIMespl = el.getId();
                            command.Parameters.AddWithValue("codeElementFIMespl", idElementsFIMespl);
                            //Вид испытания
                            int idVidIspFIMespl = 0;
                            foreach (ClassVidIsp el in vidIspList)
                                if (el.code == textBox340.Text)
                                    idVidIspFIMespl = el.id;
                            command.Parameters.AddWithValue("vidIspFIMespl", idVidIspFIMespl);
                            //Шифр системы
                            int idCodeSysFIMespl = 0;
                            foreach (ClassMC el in mcList)
                                if (el.codeMC3 == textBox336.Text)
                                    idCodeSysFIMespl = el.id;
                            command.Parameters.AddWithValue("codeSysFIMespl", idCodeSysFIMespl);
                            //Шифр условий испытания
                            command.Parameters.AddWithValue("codeUsIspMespl", textBox335.Text);
                            //Дистанция
                            command.Parameters.AddWithValue("distanceFIMespl", textBox334.Text);
                            //Размер партии
                            command.Parameters.AddWithValue("sizePartFIMespl", textBox333.Text);
                            //Льготность
                            command.Parameters.AddWithValue("lgotFIMespl", textBox332.Text);
                            //Количество выстрелов от партии
                            command.Parameters.AddWithValue("countShotPartFIMespl", textBox331.Text);
                            //Количество повторных выстрелов
                            command.Parameters.AddWithValue("countReShotFIMespl", textBox330.Text);
                            //Количество подготовительных выстрелов
                            command.Parameters.AddWithValue("countPodShotFIMespl", textBox329.Text);
                            //Усл. кол. парт/год
                            command.Parameters.AddWithValue("uslCountPartYearFIMespl", textBox328.Text);
                            //Шифр преграды 1
                            int idCodePregradiOneFIMespl = 0;
                            foreach (ClassPregrads el in pregradsList)
                                if (el.getCode() == textBox327.Text)
                                    idCodePregradiOneFIMespl = el.getId();
                            command.Parameters.AddWithValue("codePregradiOneFIMespl", idCodePregradiOneFIMespl);
                            //Живучесть преграды 1
                            command.Parameters.AddWithValue("livePregradiOneFIMespl", textBox326.Text);
                            //Шифр преграды 2
                            int idCodePregradiTwoFIMespl = 0;
                            foreach (ClassPregrads el in pregradsList)
                                if (el.getCode() == textBox325.Text)
                                    idCodePregradiTwoFIMespl = el.getId();
                            command.Parameters.AddWithValue("codePregradiTwoFIMespl", idCodePregradiTwoFIMespl);
                            //Живучесть преграды 2
                            command.Parameters.AddWithValue("livePregradiTwoFIMespl", textBox324.Text);
                            //Живучесть системы
                            command.Parameters.AddWithValue("liveSystemFIMespl", textBox323.Text);
                            //Пред. живучесть системы
                            command.Parameters.AddWithValue("prevLiveSystemFIMespl", textBox322.Text);
                            //Шифр ствола
                            int idCodeStFIMespl = 0;
                            foreach (ClassMC el in mcList)
                                if (el.codeMC3 == textBox321.Text)
                                    idCodeStFIMespl = el.id;
                            command.Parameters.AddWithValue("codeNameStFIMespl", idCodeStFIMespl);
                            //Живучесть ствола
                            command.Parameters.AddWithValue("liveStFIMespl", textBox320.Text);
                            //Пред. жив. ствола
                            command.Parameters.AddWithValue("prevLiveStFIMespl", textBox319.Text);
                            //Шифр стенда
                            int idCodeStandFIMespl = 0;
                            foreach (ClassMC el in mcList)
                                if (el.codeMC3 == textBox318.Text)
                                    idCodeStandFIMespl = el.id;
                            command.Parameters.AddWithValue("codeNameStandFIMespl", idCodeStandFIMespl);
                            //Живу. стенда
                            command.Parameters.AddWithValue("liveStandFIMespl", textBox317.Text);
                            //Пред. жив. стенда
                            command.Parameters.AddWithValue("prevLiveStandFIMespl", textBox316.Text);
                            //Коэф. аморт. гильзы
                            command.Parameters.AddWithValue("koefAmorGilzFIMespl", textBox315.Text);
                            //Коэф. привед. заряда
                            command.Parameters.AddWithValue("koefPrivedZarFIMespl", textBox314.Text);
                            //Коэф. прив. выстрела
                            command.Parameters.AddWithValue("koefPrivShotFIMespl", textBox313.Text);
                            //Услов. кол. звеньев
                            command.Parameters.AddWithValue("uslCountZvFIMespl", textBox312.Text);
                            //Шифр ед. измерения
                            int idCodeEdIzmFIMespl = 0;
                            foreach (ClassEdIzm el in edIzmList)
                                if (el.code2 == textBox311.Text)
                                    idCodeEdIzmFIMespl = el.id;
                            command.Parameters.AddWithValue("codeEdIzmFIMespl", idCodeEdIzmFIMespl);
                            sqliteConnection.Open();
                            command.ExecuteNonQuery();
                            sqliteConnection.Close();
                            functionMessageShow(2, "Данные успешно добавлены");
                            functionQueryFI();
                            functionDisableShoeNewFIResult();
                            positionFIResultList = fiList.Count - 1;
                            functionShowFIResult(positionFIResultList);
                        }
                    }
                }
                else
                {
                    functionMessageShow(1, "Данная УФИ имеется в справочнике!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код испытуемого элемента','Вид испытания' должны быть заполнены!");
            }
        }

        //Функция проверки заполненных полей
        private string functionProverkaAllFIResult()
        {
            string proverkaEl = "";
            if (textBox336.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Шифр системы'!\nВыставлено значение 000\n";
                textBox336.Text = "000";
                label363.Text = "*******";
            }
            if (textBox333.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Размер партии'!\nВыставлено значение 1000\n";
                textBox333.Text = "1000";
            }
            if (textBox332.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Льготность'!\nВыставлено значение 1\n";
                textBox332.Text = "1";
            }
            if (textBox327.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Преграда 1'!\nВыставлено значение 000\n";
                textBox327.Text = "000";
            }
            if (textBox325.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Преграда 2'!\nВыставлено значение 000\n";
                textBox325.Text = "000";
            }
            if (textBox321.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Шифр ствола'!\nВыставлено значение 000\n";
                textBox321.Text = "000";
                label362.Text = "*******";
            }
            if (textBox318.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Шифр стенда'!\nВыставлено значение 000\n";
                textBox318.Text = "000";
                label361.Text = "*******";
            }
            if (textBox311.Text.Length == 0)
            {
                proverkaEl += "Незаполнено обязательное поле 'Шифр ед. измерения'!\nВыставлено значение 70\n";
                textBox311.Text = "70";
                label360.Text = "Штук";
            }
            return proverkaEl;
        }

        //Подтверждение редактирования
        private void button258_Click(object sender, EventArgs e)
        {
            //Проверка на наличия кода испытуемого элемента и вида испытания
            if (!string.IsNullOrEmpty(textBox341.Text) && !string.IsNullOrWhiteSpace(textBox341.Text) && !string.IsNullOrEmpty(textBox340.Text) && !string.IsNullOrWhiteSpace(textBox340.Text))
            {
                //Проверка на заполненные поля
                string proverkaAllFIResult = functionProverkaAllFIResult();
                if (proverkaAllFIResult.Length > 0)
                {
                    functionMessageShow(2, proverkaAllFIResult);
                }
                else
                {
                    bool proverkaShifrov = true;
                    if (!functionProverkaElementsInListFI(textBox341.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaVidIspInList(textBox340.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Вид испытания с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaMCInList(textBox336.Text) && textBox336.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkapregradiInList(textBox327.Text) && textBox327.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkapregradiInList(textBox325.Text) && textBox325.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Преграда с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaMCInList(textBox321.Text) && textBox321.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaMCInList(textBox318.Text) && textBox318.Text != "000")
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Мат Часть с данным кодом отсутствует в справочнике!");
                    }
                    if (!functionProverkaEdIzmInList(textBox311.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Ед. измерения с данным кодом отсутствует в справочнике!");
                    }
                    if (proverkaShifrov)
                    {
                        string valInBD = "";
                        if (textBox336.Text != "000")
                            valInBD += ",[codeSysFIMespl]=@codeSysFIMespl";
                        if (textBox335.Text.Length > 0)
                            valInBD += ",[codeUsIspMespl]=@codeUsIspMespl";
                        if (textBox334.Text.Length > 0)
                            valInBD += ",[distanceFIMespl]=@distanceFIMespl";
                        if (textBox333.Text.Length > 0)
                            valInBD += ",[sizePartFIMespl]=@sizePartFIMespl";
                        if (textBox332.Text.Length > 0)
                            valInBD += ",[lgotFIMespl]=@lgotFIMespl";
                        if (textBox331.Text.Length > 0)
                            valInBD += ",[countShotPartFIMespl]=@countShotPartFIMespl";
                        if (textBox330.Text.Length > 0)
                            valInBD += ",[countReShotFIMespl]=@countReShotFIMespl";
                        if (textBox329.Text.Length > 0)
                            valInBD += ",[countPodShotFIMespl]=@countPodShotFIMespl";
                        if (textBox328.Text.Length > 0)
                            valInBD += ",[uslCountPartYearFIMespl]=@uslCountPartYearFIMespl";
                        if (textBox327.Text != "000")
                            valInBD += ",[codePregradiOneFIMespl]=@codePregradiOneFIMespl";
                        if (textBox326.Text.Length > 0)
                            valInBD += ",[livePregradiOneFIMespl]=@livePregradiOneFIMespl";
                        if (textBox325.Text != "000")
                            valInBD += ",[codePregradiTwoFIMespl]=@codePregradiTwoFIMespl";
                        if (textBox324.Text.Length > 0)
                            valInBD += ",[livePregradiTwoFIMespl]=@livePregradiTwoFIMespl";
                        if (textBox323.Text.Length > 0)
                            valInBD += ",[liveSystemFIMespl]=@liveSystemFIMespl";
                        if (textBox322.Text.Length > 0)
                            valInBD += ",[prevLiveSystemFIMespl]=@prevLiveSystemFIMespl";
                        if (textBox321.Text != "000")
                            valInBD += ",[codeNameStFIMespl]=@codeNameStFIMespl";
                        if (textBox320.Text.Length > 0)
                            valInBD += ",[liveStFIMespl]=@liveStFIMespl";
                        if (textBox319.Text.Length > 0)
                            valInBD += ",[prevLiveStFIMespl]=@prevLiveStFIMespl";
                        if (textBox318.Text != "000")
                            valInBD += ",[codeNameStandFIMespl]=@codeNameStandFIMespl";
                        if (textBox317.Text.Length > 0)
                            valInBD += ",[liveStandFIMespl]=@liveStandFIMespl";
                        if (textBox316.Text.Length > 0)
                            valInBD += ",[prevLiveStandFIMespl]=@prevLiveStandFIMespl";
                        if (textBox315.Text.Length > 0)
                            valInBD += ",[koefAmorGilzFIMespl]=@koefAmorGilzFIMespl";
                        if (textBox314.Text.Length > 0)
                            valInBD += ",[koefPrivedZarFIMespl]=@koefPrivedZarFIMespl";
                        if (textBox313.Text.Length > 0)
                            valInBD += ",[koefPrivShotFIMespl]=@koefPrivShotFIMespl";
                        if (textBox312.Text.Length > 0)
                            valInBD += ",[uslCountZvFIMespl]=@uslCountZvFIMespl";
                        if (textBox311.Text.Length > 0)
                            valInBD += ",[codeEdIzmFIMespl]=@codeEdIzmFIMespl";
                        string commandInBD = "UPDATE [FIMespl] SET [codeElementFIMespl]=@codeElementFIMespl,[vidIspFIMespl]=@vidIspFIMespl" + valInBD + " WHERE [id]=@id";
                        SQLiteCommand command = new SQLiteCommand(commandInBD, sqliteConnection);
                        //id
                        command.Parameters.AddWithValue("id", textBox310.Text);
                        //Код испытуемого элемента
                        int idElementsFIMespl = 0;
                        foreach (ClassElements el in elementsList)
                            if (el.getCode() == textBox341.Text)
                                idElementsFIMespl = el.getId();
                        command.Parameters.AddWithValue("codeElementFIMespl", idElementsFIMespl);
                        //Вид испытания
                        int idVidIspFIMespl = 0;
                        foreach (ClassVidIsp el in vidIspList)
                            if (el.code == textBox340.Text)
                                idVidIspFIMespl = el.id;
                        command.Parameters.AddWithValue("vidIspFIMespl", idVidIspFIMespl);
                        //Шифр системы
                        int idCodeSysFIMespl = 0;
                        foreach (ClassMC el in mcList)
                            if (el.codeMC3 == textBox336.Text)
                                idCodeSysFIMespl = el.id;
                        command.Parameters.AddWithValue("codeSysFIMespl", idCodeSysFIMespl);
                        //Шифр условий испытания
                        command.Parameters.AddWithValue("codeUsIspMespl", textBox335.Text);
                        //Дистанция
                        command.Parameters.AddWithValue("distanceFIMespl", textBox334.Text);
                        //Размер партии
                        command.Parameters.AddWithValue("sizePartFIMespl", textBox333.Text);
                        //Льготность
                        command.Parameters.AddWithValue("lgotFIMespl", textBox332.Text);
                        //Количество выстрелов от партии
                        command.Parameters.AddWithValue("countShotPartFIMespl", textBox331.Text);
                        //Количество повторных выстрелов
                        command.Parameters.AddWithValue("countReShotFIMespl", textBox330.Text);
                        //Количество подготовительных выстрелов
                        command.Parameters.AddWithValue("countPodShotFIMespl", textBox329.Text);
                        //Усл. кол. парт/год
                        command.Parameters.AddWithValue("uslCountPartYearFIMespl", textBox328.Text);
                        //Шифр преграды 1
                        int idCodePregradiOneFIMespl = 0;
                        foreach (ClassPregrads el in pregradsList)
                            if (el.getCode() == textBox327.Text)
                                idCodePregradiOneFIMespl = el.getId();
                        command.Parameters.AddWithValue("codePregradiOneFIMespl", idCodePregradiOneFIMespl);
                        //Живучесть преграды 1
                        command.Parameters.AddWithValue("livePregradiOneFIMespl", textBox326.Text);
                        //Шифр преграды 2
                        int idCodePregradiTwoFIMespl = 0;
                        foreach (ClassPregrads el in pregradsList)
                            if (el.getCode() == textBox325.Text)
                                idCodePregradiTwoFIMespl = el.getId();
                        command.Parameters.AddWithValue("codePregradiTwoFIMespl", idCodePregradiTwoFIMespl);
                        //Живучесть преграды 2
                        command.Parameters.AddWithValue("livePregradiTwoFIMespl", textBox324.Text);
                        //Живучесть системы
                        command.Parameters.AddWithValue("liveSystemFIMespl", textBox323.Text);
                        //Пред. живучесть системы
                        command.Parameters.AddWithValue("prevLiveSystemFIMespl", textBox322.Text);
                        //Шифр ствола
                        int idCodeStFIMespl = 0;
                        foreach (ClassMC el in mcList)
                            if (el.codeMC3 == textBox321.Text)
                                idCodeStFIMespl = el.id;
                        command.Parameters.AddWithValue("codeNameStFIMespl", idCodeStFIMespl);
                        //Живучесть ствола
                        command.Parameters.AddWithValue("liveStFIMespl", textBox320.Text);
                        //Пред. жив. ствола
                        command.Parameters.AddWithValue("prevLiveStFIMespl", textBox319.Text);
                        //Шифр стенда
                        int idCodeStandFIMespl = 0;
                        foreach (ClassMC el in mcList)
                            if (el.codeMC3 == textBox318.Text)
                                idCodeStandFIMespl = el.id;
                        command.Parameters.AddWithValue("codeNameStandFIMespl", idCodeStandFIMespl);
                        //Живу. стенда
                        command.Parameters.AddWithValue("liveStandFIMespl", textBox317.Text);
                        //Пред. жив. стенда
                        command.Parameters.AddWithValue("prevLiveStandFIMespl", textBox316.Text);
                        //Коэф. аморт. гильзы
                        command.Parameters.AddWithValue("koefAmorGilzFIMespl", textBox315.Text);
                        //Коэф. привед. заряда
                        command.Parameters.AddWithValue("koefPrivedZarFIMespl", textBox314.Text);
                        //Коэф. прив. выстрела
                        command.Parameters.AddWithValue("koefPrivShotFIMespl", textBox313.Text);
                        //Услов. кол. звеньев
                        command.Parameters.AddWithValue("uslCountZvFIMespl", textBox312.Text);
                        //Шифр ед. измерения
                        int idCodeEdIzmFIMespl = 0;
                        foreach (ClassEdIzm el in edIzmList)
                            if (el.code2 == textBox311.Text)
                                idCodeEdIzmFIMespl = el.id;
                        command.Parameters.AddWithValue("codeEdIzmFIMespl", idCodeEdIzmFIMespl);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно обновлены");
                        functionQueryFI();
                        functionDisableShoeNewFIResult();
                        functionShowFIResult(positionFIResultList);
                    }
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код испытуемого элемента','Вид испытания' должны быть заполнены!");
            }
        }

        //Поиск
        private void button259_Click(object sender, EventArgs e)
        {
            Form9 form9 = new Form9(fiList);
            form9.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionFIResultList = ClassSearchStatic.position;
                    functionShowFIResult(positionFIResultList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "УФИ с данным " + ClassSearchStatic.searchtype + " не найдена!");
                }
            }
        }

        //Ведомость комплектации
        private void button257_Click(object sender, EventArgs e)
        {
            bool proverkaVKResult = false;
            string vkInUFIstr = "";
            foreach (ClassVKMespl el in vkMesplList)
                if (el.idFIMespl == Convert.ToInt32(textBox310.Text))
                {
                    foreach (ClassVKMesplElements element in el.listElements)
                        vkInUFIstr += "            " + element.el.getCode() + "\t\t           " + element.codeEdIzmVKMespl + "\t\t           " + element.countVKMespl + "\n";
                    proverkaVKResult = true;
                }
            foreach (ClassVKMespl el in vkMesplSbList)
                if (el.idFIMespl == Convert.ToInt32(textBox310.Text))
                {
                    foreach (ClassVKMesplElements element in el.listElements)
                        vkInUFIstr += "            " + element.el.getCode() + "\t\t           " + element.codeEdIzmVKMespl + "\t\t           " + element.countVKMespl + "\n";
                    proverkaVKResult = true;
                }
            if (proverkaVKResult)
                MessageBox.Show("Комплектующий элемент\tЕд.Измерения\tКоличество КЭ\n" + vkInUFIstr, "Ведомость комплектаций", MessageBoxButtons.OK, MessageBoxIcon.Information);
            else
                functionMessageShow(1, "Не найдета ведомость комплектаций!");
        }

        //------------------------------ВЕДОМОСТЬ КОМПЛЕКТАЦИЙ------------------------------
        private void button269_Click(object sender, EventArgs e)
        {
            panel34.Visible = false;
            panel31.Visible = true;
            functionShowVKResult(-1);
        }

        private void button248_Click(object sender, EventArgs e)
        {
            functionCancelResult();
        }

        //Функция отображение форматки испытания годового плана
        private void functionShowVKResult(int pos)
        {
            if (!spVKResultEdit)
            {
                if (pos >= 0)
                {
                    if (typeVKResult)
                    {
                        if (typeVKResultElement)
                        {
                            if (vkMesplList.Count > 0)
                            {
                                textBox304.Text = Convert.ToString(vkMesplList[pos].id);
                                textBox303.Text = Convert.ToString(vkMesplList[pos].idFIMespl);
                                textBox309.Text = Convert.ToString(vkMesplList[pos].codeElementVKMespl);
                                textBox308.Text = Convert.ToString(vkMesplList[pos].pictureElementVKMespl);
                                textBox307.Text = Convert.ToString(vkMesplList[pos].indexElementVKMespl);
                                textBox306.Text = Convert.ToString(vkMesplList[pos].nameElementVKMespl);
                                textBox305.Text = Convert.ToString(vkMesplList[pos].codeVidIspVKMespl);
                                label351.Text = Convert.ToString(vkMesplList[pos].nameVidIspVKMespl);
                                listBox5.Items.Clear();
                                listBox5.Items.Add("Комплектующий элемент\tЕд.Измерения\tКоличество КЭ");
                                foreach (ClassVKMesplElements el in vkMesplList[pos].listElements)
                                {
                                    listBox5.Items.Add("            " + el.el.getCode() + "\t\t           " + el.codeEdIzmVKMespl + "\t\t         " + el.countVKMespl);
                                }
                            }
                        }
                        else
                        {
                            if (vkMesplElementList.Count > 0)
                            {
                                textBox304.Text = Convert.ToString(vkMesplElementList[pos].id);
                                textBox309.Text = Convert.ToString(vkMesplElementList[pos].el.getCode());
                                textBox308.Text = Convert.ToString(vkMesplElementList[pos].el.getPicture());
                                textBox307.Text = Convert.ToString(vkMesplElementList[pos].el.getIndex());
                                textBox306.Text = Convert.ToString(vkMesplElementList[pos].el.getName());
                                textBox305.Text = Convert.ToString(vkMesplElementList[pos].codeEdIzmVKMespl);
                                label351.Text = Convert.ToString(vkMesplElementList[pos].nameEdIzmVKMespl);
                                listBox5.Items.Clear();
                                listBox5.Items.Add("Испытуемый элемент\tВид испытания\tКоличество КЭ");
                                int posElementCountPr = 0;
                                foreach (ClassVKMespl el in vkMesplElementList[pos].listElements)
                                {
                                    listBox5.Items.Add("            " + el.codeElementVKMespl + "\t\t           " + el.codeVidIspVKMespl + "\t\t         " + vkMesplElementList[pos].listElementsCount[posElementCountPr]);
                                    posElementCountPr++;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (typeVKResultElement)
                        {
                            if (vkMesplSbList.Count > 0)
                            {
                                textBox304.Text = Convert.ToString(vkMesplSbList[pos].id);
                                textBox303.Text = Convert.ToString(vkMesplSbList[pos].idFIMespl);
                                textBox309.Text = Convert.ToString(vkMesplSbList[pos].codeElementVKMespl);
                                textBox308.Text = Convert.ToString(vkMesplSbList[pos].pictureElementVKMespl);
                                textBox307.Text = Convert.ToString(vkMesplSbList[pos].indexElementVKMespl);
                                textBox306.Text = Convert.ToString(vkMesplSbList[pos].nameElementVKMespl);
                                textBox305.Text = Convert.ToString(vkMesplSbList[pos].codeVidIspVKMespl);
                                label351.Text = Convert.ToString(vkMesplSbList[pos].nameVidIspVKMespl);
                                listBox5.Items.Clear();
                                listBox5.Items.Add("Комплектующий элемент\tЕд.Измерения\tКоличество");
                                foreach (ClassVKMesplElements el in vkMesplSbList[pos].listElements)
                                {
                                    listBox5.Items.Add("            " + el.el.getCode() + "\t\t           " + el.codeEdIzmVKMespl + "\t\t       " + el.countVKMespl);
                                }
                            }
                        }
                        else
                        {
                            if (vkMesplSbElementList.Count > 0)
                            {
                                textBox304.Text = Convert.ToString(vkMesplSbElementList[pos].id);
                                textBox309.Text = Convert.ToString(vkMesplSbElementList[pos].el.getCode());
                                textBox308.Text = Convert.ToString(vkMesplSbElementList[pos].el.getPicture());
                                textBox307.Text = Convert.ToString(vkMesplSbElementList[pos].el.getIndex());
                                textBox306.Text = Convert.ToString(vkMesplSbElementList[pos].el.getName());
                                textBox305.Text = Convert.ToString(vkMesplSbElementList[pos].codeEdIzmVKMespl);
                                label351.Text = Convert.ToString(vkMesplSbElementList[pos].nameEdIzmVKMespl);
                                listBox5.Items.Clear();
                                listBox5.Items.Add("Испытуемый элемент\tВид испытания\tКоличество КЭ");
                                int posElementCountPr = 0;
                                foreach (ClassVKMespl el in vkMesplSbElementList[pos].listElements)
                                {
                                    listBox5.Items.Add("            " + el.codeElementVKMespl + "\t\t           " + el.codeVidIspVKMespl + "\t\t       " + vkMesplElementList[pos].listElementsCount[posElementCountPr]);
                                    posElementCountPr++;
                                }
                            }
                        }
                    }
                }
                else
                {
                    textBox304.Text = "";
                    textBox303.Text = "";
                    textBox309.Text = "";
                    textBox308.Text = "";
                    textBox307.Text = "";
                    textBox306.Text = "";
                    textBox305.Text = "";
                    label351.Text = "";
                    listBox5.Items.Clear();
                    listBox5.Items.Add("Комплектующий элемент\tЕд.Измерения\tКоличество");
                }
            }
        }

        //Позиция ведомости испытаний
        private void createPositionVKResult(int s)
        {
            if (s == 0)
            {
                if (positionVKResultList - 1 >= 0)
                    positionVKResultList--;
            }
            else
            {
                if (typeVKResultElement)
                {
                    if (typeVKResult)
                        if (positionVKResultList + 1 < vkMesplList.Count)
                            positionVKResultList++;
                    if (!typeVKResult)
                        if (positionVKResultList + 1 < vkMesplSbList.Count)
                            positionVKResultList++;
                }
                else
                {
                    if (typeVKResult)
                        if (positionVKResultList + 1 < vkMesplElementList.Count)
                            positionVKResultList++;
                    if (!typeVKResult)
                        if (positionVKResultList + 1 < vkMesplSbElementList.Count)
                            positionVKResultList++;
                }
            }
            functionShowVKResult(positionVKResultList);
        }

        private void comboBox11_SelectedIndexChanged(object sender, EventArgs e)
        {
            functionShowVKResultElement();
        }

        private void comboBox10_SelectedIndexChanged(object sender, EventArgs e)
        {
            functionShowVKResultElement();
        }

        //Функция отображения
        private void functionShowVKResultElement()
        {
            if (comboBox11.Text == "Прямая ВК" && comboBox10.Text == "ВК общая")
            {
                functionShowVKResult(-1);
                positionVKResultList = 0;
                typeVKResult = true;
                label356.Text = "Испытуемый элемент";
                label355.Text = "Вид испытания";
                typeVKResultElement = true;
                button255.Visible = true;
                button254.Visible = true;
                button253.Visible = true;
                button246.Visible = true;
                functionShowVKResult(positionVKResultList);
            }
            if (comboBox11.Text == "Прямая ВК" && comboBox10.Text == "ВК на сборку")
            {
                functionShowVKResult(-1);
                positionVKResultList = 0;
                typeVKResult = false;
                label356.Text = "Испытуемый элемент";
                label355.Text = "Вид испытания";
                typeVKResultElement = true;
                button255.Visible = true;
                button254.Visible = true;
                button253.Visible = true;
                button246.Visible = true;
                functionShowVKResult(positionVKResultList);
            }
            if (comboBox11.Text == "Обратная ВК" && comboBox10.Text == "ВК общая")
            {
                functionShowVKResult(-1);
                positionVKResultList = 0;
                typeVKResult = true;
                label356.Text = "Комплект. элемент";
                label355.Text = "Ед. измерения";
                typeVKResultElement = false;
                button255.Visible = false;
                button254.Visible = false;
                button253.Visible = false;
                button246.Visible = false;
                functionShowVKResult(positionVKResultList);
            }
            if (comboBox11.Text == "Обратная ВК" && comboBox10.Text == "ВК на сборку")
            {
                functionShowVKResult(-1);
                positionVKResultList = 0;
                typeVKResult = false;
                label356.Text = "Комплект. элемент";
                label355.Text = "Ед. измерения";
                typeVKResultElement = false;
                button255.Visible = false;
                button254.Visible = false;
                button253.Visible = false;
                button246.Visible = false;
                functionShowVKResult(positionVKResultList);
            }
        }

        //Назад
        private void button256_Click(object sender, EventArgs e)
        {
            createPositionVKResult(0);
        }

        //Вперед
        private void button252_Click(object sender, EventArgs e)
        {
            createPositionVKResult(1);
        }

        //Добавить
        private void button255_Click(object sender, EventArgs e)
        {
            functionShowVKResult(-1);
            spVKResultEdit = true;
            button249.Visible = false;
            button256.Visible = false;
            button255.Visible = false;
            button254.Visible = false;
            button253.Visible = false;
            button252.Visible = false;
            button246.Visible = false;
            button251.Visible = true;
            button250.Visible = true;
            button247.Visible = false;
            button248.Visible = false;
            button245.Visible = false;
            comboBox11.Visible = false;
            comboBox10.Visible = false;
            textBox309.ReadOnly = false;
            textBox305.ReadOnly = false;
            listBox5.Height = 150;
            textBox302.Visible = true;
            textBox301.Visible = true;
            textBox300.Visible = true;
            button244.Visible = true;
            button243.Visible = true;
            textBox302.Text = "";
            textBox301.Text = "";
            textBox300.Text = "";
        }

        //Редактировать
        private void button254_Click(object sender, EventArgs e)
        {
            spVKResultEdit = true;
            button256.Visible = false;
            button255.Visible = false;
            button254.Visible = false;
            button253.Visible = false;
            button252.Visible = false;
            button246.Visible = false;
            button251.Visible = true;
            button249.Visible = true;
            button247.Visible = false;
            button248.Visible = false;
            button245.Visible = false;
            comboBox11.Visible = false;
            comboBox10.Visible = false;
            textBox309.ReadOnly = false;
            textBox305.ReadOnly = false;
            listBox5.Height = 150;
            textBox302.Visible = true;
            textBox301.Visible = true;
            textBox300.Visible = true;
            button244.Visible = true;
            button243.Visible = true;
            textBox302.Text = "";
            textBox301.Text = "";
            textBox300.Text = "";
        }

        //Отмена добавления и редактирования
        private void button251_Click(object sender, EventArgs e)
        {
            functionDisableShoeNewVKResult();
        }

        //Фнукция отмены добавления и редактирования
        private void functionDisableShoeNewVKResult()
        {
            spVKResultEdit = false;
            button256.Visible = true;
            button255.Visible = true;
            button254.Visible = true;
            button253.Visible = true;
            button252.Visible = true;
            button246.Visible = true;
            button251.Visible = false;
            button250.Visible = false;
            button249.Visible = false;
            button247.Visible = true;
            button248.Visible = true;
            button245.Visible = true;
            comboBox11.Visible = true;
            comboBox10.Visible = true;
            textBox309.ReadOnly = true;
            textBox305.ReadOnly = true;
            listBox5.Height = 220;
            textBox302.Visible = false;
            textBox301.Visible = false;
            textBox300.Visible = false;
            button244.Visible = false;
            button243.Visible = false;
            textBox302.Text = "";
            textBox301.Text = "";
            textBox300.Text = "";
            functionShowVKResult(positionVKResultList);
        }

        //Подтверждение добавления
        private void button250_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox309.Text) && !string.IsNullOrWhiteSpace(textBox305.Text))
            {
                if (functionSearchIDFIMespl(textBox309.Text, textBox305.Text) != -1)
                {
                    string strCodeElPr = textBox309.Text;
                    string strCodeVidPr = textBox305.Text;
                    int idFIMespl = functionSearchIDFIMespl(strCodeElPr, strCodeVidPr);
                    bool proverkaVKMespl = true;
                    foreach (ClassVKMespl el in vkMesplList)
                        if (el.idFIMespl == idFIMespl)
                            proverkaVKMespl = false;
                    foreach (ClassVKMespl el in vkMesplSbList)
                        if (el.idFIMespl == idFIMespl)
                            proverkaVKMespl = false;
                    if (proverkaVKMespl)
                    {
                        List<List<string>> newVK = new List<List<string>>();
                        for (int i = 1; i < listBox5.Items.Count; i++)
                        {
                            string[] strNewVKPr = Convert.ToString(listBox5.Items[i]).Split(' ');
                            List<string> strNewVKPrBP = new List<string>();
                            foreach (string k in strNewVKPr)
                                if (k.Length > 0)
                                    strNewVKPrBP.Add(k.Trim());
                            newVK.Add(strNewVKPrBP);
                        }
                        if (newVK.Count > 0)
                        {
                            bool proverkaAddNewData = false;
                            foreach (List<string> k in newVK)
                            {
                                int idVKElement = functionSearchIDElInSp(k[0]);
                                int idVKEdIzm = functionSearcgIDEdIzmInSp(k[1]);
                                if (idVKElement > 0 && idVKEdIzm > 0)
                                {
                                    SQLiteCommand command = new SQLiteCommand("INSERT INTO [VKMespl] (idFIMespl,idElementVKMespl,edIzmVKMespl,countVKMespl) VALUES (@idFIMespl,@idElementVKMespl,@edIzmVKMespl,@countVKMespl)", sqliteConnection);
                                    command.Parameters.AddWithValue("idFIMespl", idFIMespl);
                                    command.Parameters.AddWithValue("idElementVKMespl", idVKElement);
                                    command.Parameters.AddWithValue("edIzmVKMespl", idVKEdIzm);
                                    command.Parameters.AddWithValue("countVKMespl", Convert.ToDouble(k[2]));
                                    sqliteConnection.Open();
                                    command.ExecuteNonQuery();
                                    sqliteConnection.Close();
                                    proverkaAddNewData = true;
                                }
                                else
                                {
                                    functionMessageShow(1, "Ошибка при добавлении элемента " + k[0] + "!");
                                }
                            }
                            if (proverkaAddNewData)
                            {
                                functionMessageShow(2, "Данные успешно добавлены");
                                functionQueryVK(false);
                                functionDisableShoeNewVKResult();
                                positionVKResultList = vkMesplList.Count - 1;
                                functionShowVKResult(positionVKResultList);
                            }
                        }
                        else
                        {
                            functionMessageShow(1, "Необходимо добавить комплектующий элемент!");
                        }
                    }
                    else
                    {
                        functionMessageShow(1, "Ведомость комплектации для данной форматки уже существует!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Не найденна форматка испытания с данным кодом испытуемого элемента и вида испытания!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Испытуемый элемент' и 'Вид испытания' должны быть заполнены!");
            }
        }

        //Подтверждение редактирования
        private void button249_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox309.Text) && !string.IsNullOrWhiteSpace(textBox305.Text))
            {
                if (functionSearchIDFIMespl(textBox309.Text, textBox305.Text) != -1)
                {
                    string strCodeElPr = textBox309.Text;
                    string strCodeVidPr = textBox305.Text;
                    int idFIMespl = functionSearchIDFIMespl(strCodeElPr, strCodeVidPr);
                    List<List<string>> newVK = new List<List<string>>();
                    for (int i = 1; i < listBox5.Items.Count; i++)
                    {
                        string[] strNewVKPr = Convert.ToString(listBox5.Items[i]).Split(' ');
                        List<string> strNewVKPrBP = new List<string>();
                        foreach (string k in strNewVKPr)
                            if (k.Length > 0)
                                strNewVKPrBP.Add(k.Trim());
                        newVK.Add(strNewVKPrBP);
                    }
                    if (newVK.Count > 0)
                    {
                        bool proverkaAddNewData = false;
                        SQLiteCommand command = new SQLiteCommand("DELETE FROM [VKMespl] WHERE [idFIMespl]=@idFIMespl", sqliteConnection);
                        command.Parameters.AddWithValue("idFIMespl", textBox303.Text);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        foreach (List<string> k in newVK)
                        {
                            int idVKElement = functionSearchIDElInSp(k[0]);
                            int idVKEdIzm = functionSearcgIDEdIzmInSp(k[1]);
                            if (idVKElement > 0 && idVKEdIzm > 0)
                            {
                                command = new SQLiteCommand("INSERT INTO [VKMespl] (idFIMespl,idElementVKMespl,edIzmVKMespl,countVKMespl) VALUES (@idFIMespl,@idElementVKMespl,@edIzmVKMespl,@countVKMespl)", sqliteConnection);
                                command.Parameters.AddWithValue("idFIMespl", idFIMespl);
                                command.Parameters.AddWithValue("idElementVKMespl", idVKElement);
                                command.Parameters.AddWithValue("edIzmVKMespl", idVKEdIzm);
                                command.Parameters.AddWithValue("countVKMespl", Convert.ToDouble(k[2]));
                                sqliteConnection.Open();
                                command.ExecuteNonQuery();
                                sqliteConnection.Close();
                                proverkaAddNewData = true;
                            }
                            else
                            {
                                functionMessageShow(1, "Ошибка при добавлении элемента " + k[0] + "!");
                            }
                        }
                        if (proverkaAddNewData)
                        {
                            functionMessageShow(2, "Данные успешно изменены");
                            functionQueryVK(false);
                            functionDisableShoeNewVKResult();
                            functionShowVKResult(positionVKResultList);
                        }
                    }
                    else
                    {
                        functionMessageShow(1, "Необходимо добавить комплектующий элемент!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Не найденна форматка испытания с данным кодом испытуемого элемента и вида испытания!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Испытуемый элемент' и 'Вид испытания' должны быть заполнены!");
            }
        }

        //Удалить
        private void button253_Click(object sender, EventArgs e)
        {
            if (positionVKResultList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить ведомость комплектации?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [VKMespl] WHERE [idFIMespl]=@idFIMespl", sqliteConnection);
                    command.Parameters.AddWithValue("idFIMespl", textBox303.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    if (typeVKResult)
                    {
                        foreach (ClassVKMesplElements el in vkMesplElementList.ToArray())
                        {
                            int indexEl = 0;
                            bool isElementInList = false;
                            foreach (ClassVKMespl vk in el.listElements)
                            {
                                if (vk == vkMesplList[positionVKMesplList])
                                {
                                    isElementInList = true;
                                    break;
                                }
                                else
                                    indexEl++;
                            }
                            if (isElementInList)
                            {
                                el.listElements.RemoveAt(indexEl);
                                el.listElementsCount.RemoveAt(indexEl);
                                if (el.listElements.Count == 0)
                                    vkMesplElementList.Remove(el);
                            }
                        }
                        vkMesplList.Remove(vkMesplList[positionVKMesplList]);
                    }
                    else
                    {
                        foreach (ClassVKMesplElements el in vkMesplSbElementList.ToArray())
                        {
                            int indexEl = 0;
                            bool isElementInList = false;
                            foreach (ClassVKMespl vk in el.listElements)
                            {
                                if (vk == vkMesplSbList[positionVKMesplList])
                                {
                                    isElementInList = true;
                                    break;
                                }
                                else
                                    indexEl++;
                            }
                            if (isElementInList)
                            {
                                el.listElements.RemoveAt(indexEl);
                                el.listElementsCount.RemoveAt(indexEl);
                                if (el.listElements.Count == 0)
                                    vkMesplSbElementList.Remove(el);
                            }
                        }
                        vkMesplSbList.Remove(vkMesplSbList[positionVKMesplList]);
                    }
                    functionMessageShow(2, "Ведомость комплектации успешна удалена");
                    //functionQueryVK();
                    createPositionVKResult(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите ведомость комплектации для удаления");
            }
        }

        //Добавить элемент
        private void button243_Click(object sender, EventArgs e)
        {
            bool proverkaShifrov = true;
            if (!functionProverkaElementsInList(textBox302.Text))
            {
                proverkaShifrov = false;
                functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
            }
            if (!functionProverkaEdIzmInList(textBox301.Text))
            {
                proverkaShifrov = false;
                functionMessageShow(1, "Ед. измерения с данным кодом отсутствует в справочнике!");
            }
            if (textBox300.Text.Length == 0)
            {
                proverkaShifrov = false;
                functionMessageShow(1, "Необходимо написать количество комплектующих!");
            }
            if (textBox300.Text.Length > 0 && Convert.ToDouble(textBox300.Text) <= 0)
            {
                proverkaShifrov = false;
                functionMessageShow(1, "Необходимо написать количество комплектующих больше 0!");
            }
            if (proverkaShifrov)
            {
                listBox5.Items.Add("            " + textBox302.Text + "\t\t           " + textBox301.Text + "\t\t       " + textBox300.Text);
                textBox302.Text = "";
                textBox301.Text = "";
                textBox300.Text = "";
            }
        }

        //Удалить элемент
        private void button244_Click(object sender, EventArgs e)
        {
            if (listBox5.SelectedIndex > 0)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить комплектующий элемент?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    listBox5.Items.Remove(listBox5.Items[listBox5.SelectedIndex]);
                }
            }
        }

        //Просмотреть элемент
        private void button245_Click(object sender, EventArgs e)
        {
            if (listBox5.SelectedIndex > 0)
            {
                if (typeVKResult)
                {
                    if (typeVKResultElement)
                    {
                        ClassElements el = vkMesplList[positionVKResultList].listElements[listBox5.SelectedIndex - 1].el;
                        functionMessageShow(2, "Код комплектующего элемента: " + el.getCode() + "\nЧертеж: " + el.getPicture() + "\nИндекс: " + el.getIndex() + "\nНаименование элемента: " + el.getName());
                    }
                    else
                    {
                        ClassVKMespl el = vkMesplElementList[positionVKResultList].listElements[listBox5.SelectedIndex - 1];
                        functionMessageShow(2, "Код комплектующего элемента: " + el.codeElementVKMespl + "\nЧертеж: " + el.pictureElementVKMespl + "\nИндекс: " + el.indexElementVKMespl + "\nНаименование элемента: " + el.nameElementVKMespl);
                    }
                }
                else
                {
                    if (typeVKResultElement)
                    {
                        ClassElements el = vkMesplSbList[positionVKResultList].listElements[listBox5.SelectedIndex - 1].el;
                        functionMessageShow(2, "Код комплектующего элемента: " + el.getCode() + "\nЧертеж: " + el.getPicture() + "\nИндекс: " + el.getIndex() + "\nНаименование элемента: " + el.getName());
                    }
                    else
                    {
                        ClassVKMespl el = vkMesplSbElementList[positionVKResultList].listElements[listBox5.SelectedIndex - 1];
                        functionMessageShow(2, "Код комплектующего элемента: " + el.codeElementVKMespl + "\nЧертеж: " + el.pictureElementVKMespl + "\nИндекс: " + el.indexElementVKMespl + "\nНаименование элемента: " + el.nameElementVKMespl);
                    }
                }
            }
        }

        //Показать УФИ
        private void button246_Click(object sender, EventArgs e)
        {
            if (positionVKResultList != -1)
            {
                string ufiInVKstr = "";
                foreach (ClassFI el in fiList)
                    if (el.id == Convert.ToInt32(textBox303.Text))
                    {
                        ufiInVKstr += "\nШифр, наименование системы  " + el.codeSysFIMespl + "   " + el.nameSysFIMespl +
                                        "\nШифр условия испытаний    " + el.codeUsIspMespl + "   " + "\t\t\tДистанция " + el.distanceFIMespl +
                                        "\nРазмер партии             " + el.sizePartFIMespl + "   " + "\t\t\tЛьготность " + el.lgotFIMespl +
                                        "\nКол. выстр. от партии     " + el.countShotPartFIMespl + "   " + "\t\t\tКол. повт. выстрелов " + el.countReShotFIMespl +
                                        "\nКол. подгот. выстрелов    " + el.countPodShotFIMespl + "   " + "\t\t\tУсл. кол. парт/год " + el.uslCountPartYearFIMespl +
                                        "\nШифр преграды 1           " + el.codePregradiOneFIMespl + "   " + "\t\t\tЖив. преграды 1 " + el.livePregradiOneFIMespl +
                                        "\nШифр преграды 2           " + el.codePregradiTwoFIMespl + "   " + "\t\t\tЖив. преграды 2 " + el.livePregradiTwoFIMespl +
                                        "\nЖивуч. системы            " + el.liveSystemFIMespl + "   " + "\t\t\tПред. живуч. системы " + el.prevLiveSystemFIMespl +
                                        "\nШифр, наименование ствола " + el.codeNameStFIMespl + "   " + el.nameNameStFIMespl +
                                        "\nЖивуч. ствола             " + el.liveStFIMespl + "   " + "\t\t\tПред. живуч. ствола " + el.prevLiveStFIMespl +
                                        "\nШифр, наименование стенда " + el.codeNameStandFIMespl + "   " + el.nameNameStandFIMespl +
                                        "\nЖивуч. стенда             " + el.liveStandFIMespl + "   " + "\t\t\tПред. живуч. стенда " + el.prevLiveStandFIMespl +
                                        "\nКоэф. амор. гильзы        " + el.koefAmorGilzFIMespl + "   " + "\t\t\tКоэф. привед. заряда " + el.koefPrivedZarFIMespl +
                                        "\nКоэф. прив. выстрела      " + el.koefPrivShotFIMespl + "   " + "\t\t\tУслов. кол. звеньев " + el.uslCountZvFIMespl +
                                        "\nШифр ед. измерения        " + el.codeEdIzmFIMespl + "   " + el.nameEdIzmFIMespl;
                    }
                MessageBox.Show("Унифицированная форматка испытаний\n" + ufiInVKstr, "УФИ", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                functionMessageShow(2, "Выберите ведомость комплектации для отображения УФИ");
            }
        }

        //Поиск
        private void button247_Click(object sender, EventArgs e)
        {
            if (typeVKResult)
            {
                if (typeVKResultElement)
                {
                    Form10 form10 = new Form10(vkMesplList, true);
                    form10.ShowDialog();
                }
                else
                {
                    Form10 form10 = new Form10(vkMesplElementList, false);
                    form10.ShowDialog();
                }
            }
            else
            {
                if (typeVKResultElement)
                {
                    Form10 form10 = new Form10(vkMesplSbList, true);
                    form10.ShowDialog();
                }
                else
                {
                    Form10 form10 = new Form10(vkMesplSbElementList, false);
                    form10.ShowDialog();
                }
            }
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionVKResultList = ClassSearchStatic.position;
                    functionShowVKResult(positionVKResultList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "ВК с данным " + ClassSearchStatic.searchtype + " не найдена!");
                }
            }
        }

        //------------------------------ПЛАН ИСПЫТАНИЙ------------------------------
        private void button273_Click(object sender, EventArgs e)
        {
            Form19 form19 = new Form19("План испытаний", true);
            form19.ShowDialog();
            if (form19.exitAgree)
            {
                functionShowPlIspResult(-1);
                functionQueryMC();
                functionQueryFI();
                label348.Text = "ПЛАН ИСПЫТАНИЙ НА " + form19.numericUpDown1.Text + " ГОД";
                yearPlIspResult = form19.numericUpDown1.Text;
                numberPlIspResult = form19.numericUpDown2.Text;
                functionQueryPlIspResult(yearPlIspResult, numberPlIspResult);
                positionPlIspResultList = 0;
                functionShowPlIspResult(positionPlIspResultList);
                panel34.Visible = false;
                panel30.Visible = true;
            }
        }

        private void button234_Click(object sender, EventArgs e)
        {
            functionCancelResult();
        }

        //Функция отображение плана испытаний
        private void functionShowPlIspResult(int pos)
        {
            if (!spPlIspResultEdit)
            {
                if (pos >= 0 && plIspResultList.Count > 0)
                {
                    textBox275.Text = Convert.ToString(plIspResultList[pos].id);
                    //Полигон
                    textBox299.Text = Convert.ToString(plIspResultList[pos].numberPoligonPlIspKontrol);
                    label343.Text = Convert.ToString(plIspResultList[pos].namePoligonPlIspKontrol);
                    //Позиции по планам
                    textBox297.Text = Convert.ToString(plIspResultList[pos].nPosPlPlIspKontrol);
                    textBox296.Text = Convert.ToString(plIspResultList[pos].nPosSvPlIspKontrol);
                    //Элемент
                    textBox295.Text = Convert.ToString(plIspResultList[pos].codeElementPlIspKontrol);
                    textBox294.Text = Convert.ToString(plIspResultList[pos].pictureElementPlIspKontrol);
                    textBox293.Text = Convert.ToString(plIspResultList[pos].indexElementPlIspKontrol);
                    textBox292.Text = Convert.ToString(plIspResultList[pos].nameElementPlIspKontrol);
                    //Завод
                    textBox274.Text = Convert.ToString(plIspResultList[pos].codeFactoryPlIspKontrol);
                    textBox298.Text = Convert.ToString(plIspResultList[pos].nameFactoryPlIspKontrol);
                    //Вид испытания
                    textBox291.Text = Convert.ToString(plIspResultList[pos].codeVidIspPlIspKontrol);
                    textBox290.Text = Convert.ToString(plIspResultList[pos].nameVidIspPlIspKontrol);
                    //Система
                    textBox289.Text = Convert.ToString(plIspResultList[pos].codeSystemPlIspKontrol);
                    textBox288.Text = Convert.ToString(plIspResultList[pos].nameSystemPlIspKontrol);
                    //Ствол
                    textBox287.Text = Convert.ToString(plIspResultList[pos].codeStvolPlIspKontrol);
                    textBox286.Text = Convert.ToString(plIspResultList[pos].nameStvolPlIspKontrol);
                    //Стенд
                    textBox285.Text = Convert.ToString(plIspResultList[pos].codeStandPlIspKontrol);
                    textBox284.Text = Convert.ToString(plIspResultList[pos].nameStandPlIspKontrol);
                    //Трудоемкость
                    textBox282.Text = Convert.ToString(plIspResultList[pos].trudoemkostPlIspKontrol);
                    //Стоимость
                    textBox283.Text = Convert.ToString(plIspResultList[pos].cenaPlIspKontrol);
                    //Объем испытаний
                    textBox281.Text = Convert.ToString(plIspResultList[pos].vYearPlIspKontrol);
                    textBox280.Text = Convert.ToString(plIspResultList[pos].vOnePlIspKontrol);
                    textBox279.Text = Convert.ToString(plIspResultList[pos].vTwoPlIspKontrol);
                    textBox278.Text = Convert.ToString(plIspResultList[pos].vThrePlIspKontrol);
                    textBox277.Text = Convert.ToString(plIspResultList[pos].vThourPlIspKontrol);
                    //Примечание
                    textBox276.Text = Convert.ToString(plIspResultList[pos].commentPlIspKontrol);
                }
                else
                {
                    textBox275.Text = "";
                    textBox299.Text = "";
                    label343.Text = "";
                    textBox297.Text = "";
                    textBox296.Text = "";
                    textBox295.Text = "";
                    textBox294.Text = "";
                    textBox293.Text = "";
                    textBox292.Text = "";
                    textBox274.Text = "";
                    textBox298.Text = "";
                    textBox291.Text = "";
                    textBox290.Text = "";
                    textBox289.Text = "";
                    textBox288.Text = "";
                    textBox287.Text = "";
                    textBox286.Text = "";
                    textBox285.Text = "";
                    textBox284.Text = "";
                    textBox282.Text = "";
                    textBox283.Text = "";
                    textBox281.Text = "";
                    textBox280.Text = "";
                    textBox279.Text = "";
                    textBox278.Text = "";
                    textBox277.Text = "";
                    textBox276.Text = "";
                }
            }
        }

        //Позиция плана испытаний
        private void createPositionPlIspResult(int s)
        {
            if (s == 0)
            {
                if (positionPlIspResultList - 1 >= 0)
                    positionPlIspResultList--;
            }
            else
            {
                if (positionPlIspResultList + 1 < plIspResultList.Count)
                    positionPlIspResultList++;
            }
            functionShowPlIspResult(positionPlIspResultList);
        }

        //Назад
        private void button242_Click(object sender, EventArgs e)
        {
            createPositionPlIspResult(0);
        }

        //Вперед
        private void button238_Click(object sender, EventArgs e)
        {
            createPositionPlIspResult(1);
        }

        //Добавить
        private void button241_Click(object sender, EventArgs e)
        {
            functionShowPlIspResult(-1);
            spPlIspResultEdit = true;
            textBox274.ReadOnly = false;
            textBox299.ReadOnly = false;
            textBox297.ReadOnly = false;
            textBox296.ReadOnly = false;
            textBox295.ReadOnly = false;
            textBox291.ReadOnly = false;
            textBox289.ReadOnly = false;
            textBox287.ReadOnly = false;
            textBox285.ReadOnly = false;
            textBox280.ReadOnly = false;
            textBox279.ReadOnly = false;
            textBox278.ReadOnly = false;
            textBox277.ReadOnly = false;
            textBox276.ReadOnly = false;
            button242.Visible = false;
            button241.Visible = false;
            button240.Visible = false;
            button239.Visible = false;
            button238.Visible = false;
            button233.Visible = false;
            button234.Visible = false;
            button237.Visible = true;
            button236.Visible = true;
            textBox274.Focus();
        }

        //Редактировать
        private void button240_Click(object sender, EventArgs e)
        {
            spPlIspResultEdit = true;
            textBox274.ReadOnly = false;
            textBox299.ReadOnly = false;
            textBox297.ReadOnly = false;
            textBox296.ReadOnly = false;
            textBox295.ReadOnly = false;
            textBox291.ReadOnly = false;
            textBox289.ReadOnly = false;
            textBox287.ReadOnly = false;
            textBox285.ReadOnly = false;
            textBox280.ReadOnly = false;
            textBox279.ReadOnly = false;
            textBox278.ReadOnly = false;
            textBox277.ReadOnly = false;
            textBox276.ReadOnly = false;
            button242.Visible = false;
            button241.Visible = false;
            button240.Visible = false;
            button239.Visible = false;
            button238.Visible = false;
            button233.Visible = false;
            button234.Visible = false;
            button237.Visible = true;
            button235.Visible = true;
            textBox274.Focus();
        }

        //Подтверждение добавления
        private void button236_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox274.Text) && !string.IsNullOrWhiteSpace(textBox274.Text) && !string.IsNullOrEmpty(textBox299.Text) && !string.IsNullOrWhiteSpace(textBox299.Text) && !string.IsNullOrEmpty(textBox295.Text) && !string.IsNullOrWhiteSpace(textBox295.Text) && !string.IsNullOrEmpty(textBox291.Text) && !string.IsNullOrWhiteSpace(textBox291.Text))
            {
                if (functionSearchIDFIMespl(textBox295.Text, textBox291.Text) != -1)
                {
                    bool proverkaPlIspKontrol = true;
                    bool proverkaShifrov = true;
                    foreach (ClassPlIspKontrol el in plIspResultList)
                        if (el.codeElementPlIspKontrol == textBox295.Text && el.codeFactoryPlIspKontrol == textBox274.Text && el.codeVidIspPlIspKontrol == textBox291.Text)
                            proverkaPlIspKontrol = false;
                    if (!functionProverkaFactorysInList(textBox274.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Завод с данным кодом отсутствует в справочнике!");
                    }
                    if (proverkaPlIspKontrol && proverkaShifrov)
                    {
                        string polInBD = "";
                        string valInBD = "";
                        if (textBox289.Text.Length > 0)
                        {
                            polInBD += ",idSystemPlIspResult";
                            valInBD += ",@idSystemPlIspResult";
                        }
                        if (textBox287.Text.Length > 0)
                        {
                            polInBD += ",idStvolPlIspResult";
                            valInBD += ",@idStvolPlIspResult";
                        }
                        if (textBox285.Text.Length > 0)
                        {
                            polInBD += ",idStandPlIspResult";
                            valInBD += ",@idStandPlIspResult";
                        }
                        SQLiteCommand command = new SQLiteCommand("INSERT INTO [PlIspResult] (idElementPlIspResult,idFactoryPlIspResult,idPoligonPlIspResult,idVidIspPlIspResult" + polInBD + ",vOnePlIspResult,vTwoPlIspResult,vThrePlIspResult,vThourPlIspResult,nPosPlPlIspResult,nPosSvPlIspResult,commentPlIspResult,yearPlIspResult,numberPlIspResult) VALUES (@idElementPlIspResult,@idFactoryPlIspResult,@idPoligonPlIspResult,@idVidIspPlIspResult" + valInBD + ",@vOnePlIspResult,@vTwoPlIspResult,@vThrePlIspResult,@vThourPlIspResult,@nPosPlPlIspResult,@nPosSvPlIspResult,@commentPlIspResult,@yearPlIspResult,@numberPlIspResult)", sqliteConnection);
                        //Полигон
                        int idPoligonPlIspResult = 0;
                        foreach (ClassPoligons pl in poligonsList)
                            if (pl.numberPl == textBox299.Text)
                                idPoligonPlIspResult = pl.id;
                        command.Parameters.AddWithValue("idPoligonPlIspResult", idPoligonPlIspResult);
                        //Код испытуемого элемента
                        int idElementsPlIspResult = functionSearchIDElInSp(textBox295.Text);
                        command.Parameters.AddWithValue("idElementPlIspResult", idElementsPlIspResult);
                        //Код завода
                        int idFactorysPlIspResult = 0;
                        foreach (ClassFactorys el in factorysList)
                            if (el.getCode() == textBox274.Text)
                                idFactorysPlIspResult = el.getId();
                        command.Parameters.AddWithValue("idFactoryPlIspResult", idFactorysPlIspResult);
                        //Вид испытания
                        int idVidIspPlIspResult = functionSearchVidIspInSp(textBox291.Text);
                        command.Parameters.AddWithValue("idVidIspPlIspResult", idVidIspPlIspResult);
                        //Система
                        int idSystemPlIspResult = functionSearchMCInSp(textBox289.Text);
                        command.Parameters.AddWithValue("idSystemPlIspResult", idSystemPlIspResult);
                        //Ствол
                        int idStvolPlIspResult = functionSearchMCInSp(textBox287.Text);
                        command.Parameters.AddWithValue("idStvolPlIspResult", idStvolPlIspResult);
                        //Стенд
                        int idStandPlIspResult = functionSearchMCInSp(textBox285.Text);
                        command.Parameters.AddWithValue("idStandPlIspResult", idStandPlIspResult);
                        //Объем испытаний
                        command.Parameters.AddWithValue("vOnePlIspResult", textBox280.Text);
                        command.Parameters.AddWithValue("vTwoPlIspResult", textBox279.Text);
                        command.Parameters.AddWithValue("vThrePlIspResult", textBox278.Text);
                        command.Parameters.AddWithValue("vThourPlIspResult", textBox277.Text);
                        //Позиции
                        command.Parameters.AddWithValue("nPosPlPlIspResult", textBox296.Text);
                        command.Parameters.AddWithValue("nPosSvPlIspResult", textBox297.Text);
                        //Год
                        command.Parameters.AddWithValue("yearPlIspResult", yearPlIspResult);
                        //Комментарий
                        command.Parameters.AddWithValue("commentPlIspResult", textBox276.Text);
                        command.Parameters.AddWithValue("numberPlIspResult", numberPlIspResult);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно добавлены");
                        functionQueryPlIspResult(yearPlIspResult, numberPlIspResult);
                        functionDisableShoeNewPlIspResult();
                        positionPlIspResultList = plIspResultList.Count - 1;
                        functionShowPlIspResult(positionPlIspResultList);
                    }
                    else
                    {
                        functionMessageShow(1, "План испытаний испытаний с данным кодом элемента, заводом изготовителя и видом испытания уже существует!");
                    }
                }
                else
                {
                    functionMessageShow(1, "Не найденна форматка испытания с данным кодом элемента и видом испытания!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Завод изготовитель', 'Полигон', 'Испытуемый элемент' и 'Вид испытания' должны быть заполнены!");
            }
        }

        //Подтверждение редактировния
        private void button235_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox274.Text) && !string.IsNullOrWhiteSpace(textBox274.Text) && !string.IsNullOrEmpty(textBox299.Text) && !string.IsNullOrWhiteSpace(textBox299.Text) && !string.IsNullOrEmpty(textBox295.Text) && !string.IsNullOrWhiteSpace(textBox295.Text) && !string.IsNullOrEmpty(textBox291.Text) && !string.IsNullOrWhiteSpace(textBox291.Text))
            {
                if (functionSearchIDFIMespl(textBox295.Text, textBox291.Text) != -1)
                {
                    bool proverkaShifrov = true;
                    if (!functionProverkaFactorysInList(textBox274.Text))
                    {
                        proverkaShifrov = false;
                        functionMessageShow(1, "Завод с данным кодом отсутствует в справочнике!");
                    }
                    if (proverkaShifrov)
                    {
                        string valInBD = "";
                        if (textBox289.Text.Length > 0)
                            valInBD += ",[idSystemPlIspResult]=@idSystemPlIspResult";
                        if (textBox287.Text.Length > 0)
                            valInBD += ",[idStvolPlIspResult]=@idStvolPlIspResult";
                        if (textBox285.Text.Length > 0)
                            valInBD += ",[idStandPlIspResult]=@idStandPlIspResult";
                        SQLiteCommand command = new SQLiteCommand("UPDATE [PlIspResult] SET [idElementPlIspResult]=@idElementPlIspResult,[idFactoryPlIspResult]=@idFactoryPlIspResult,[idPoligonPlIspResult]=@idPoligonPlIspResult,[idVidIspPlIspResult]=@idVidIspPlIspResult" + valInBD + ",[vOnePlIspResult]=@vOnePlIspResult,[vTwoPlIspResult]=@vTwoPlIspResult,[vThrePlIspResult]=@vThrePlIspResult,[vThourPlIspResult]=@vThourPlIspResult,[nPosPlPlIspResult]=@nPosPlPlIspResult,[nPosSvPlIspResult]=@nPosSvPlIspResult,[commentPlIspResult]=@commentPlIspResult,[yearPlIspResult]=@yearPlIspResult WHERE [id]=@id", sqliteConnection);
                        command.Parameters.AddWithValue("id", textBox275.Text);
                        //Полигон
                        int idPoligonPlIspResult = 0;
                        foreach (ClassPoligons pl in poligonsList)
                            if (pl.numberPl == textBox299.Text)
                                idPoligonPlIspResult = pl.id;
                        command.Parameters.AddWithValue("idPoligonPlIspResult", idPoligonPlIspResult);
                        //Код испытуемого элемента
                        int idElementsPlIspResult = functionSearchIDElInSp(textBox295.Text);
                        command.Parameters.AddWithValue("idElementPlIspResult", idElementsPlIspResult);
                        //Код завода
                        int idFactorysPlIspResult = 0;
                        foreach (ClassFactorys el in factorysList)
                            if (el.getCode() == textBox274.Text)
                                idFactorysPlIspResult = el.getId();
                        command.Parameters.AddWithValue("idFactoryPlIspResult", idFactorysPlIspResult);
                        //Вид испытания
                        int idVidIspPlIspResult = functionSearchVidIspInSp(textBox291.Text);
                        command.Parameters.AddWithValue("idVidIspPlIspResult", idVidIspPlIspResult);
                        //Система
                        int idSystemPlIspResult = functionSearchMCInSp(textBox289.Text);
                        command.Parameters.AddWithValue("idSystemPlIspResult", idSystemPlIspResult);
                        //Ствол
                        int idStvolPlIspResult = functionSearchMCInSp(textBox287.Text);
                        command.Parameters.AddWithValue("idStvolPlIspResult", idStvolPlIspResult);
                        //Стенд
                        int idStandPlIspResult = functionSearchMCInSp(textBox285.Text);
                        command.Parameters.AddWithValue("idStandPlIspResult", idStandPlIspResult);
                        //Объем испытаний
                        command.Parameters.AddWithValue("vOnePlIspResult", textBox280.Text);
                        command.Parameters.AddWithValue("vTwoPlIspResult", textBox279.Text);
                        command.Parameters.AddWithValue("vThrePlIspResult", textBox278.Text);
                        command.Parameters.AddWithValue("vThourPlIspResult", textBox277.Text);
                        //Позиции
                        command.Parameters.AddWithValue("nPosPlPlIspResult", textBox296.Text);
                        command.Parameters.AddWithValue("nPosSvPlIspResult", textBox297.Text);
                        //Год
                        command.Parameters.AddWithValue("yearPlIspResult", yearPlIspResult);
                        //Комментарий
                        command.Parameters.AddWithValue("commentPlIspResult", textBox276.Text);
                        command.Parameters.AddWithValue("numberPlIspResult", numberPlIspResult);
                        sqliteConnection.Open();
                        command.ExecuteNonQuery();
                        sqliteConnection.Close();
                        functionMessageShow(2, "Данные успешно добавлены");
                        functionQueryPlIspResult(yearPlIspResult, numberPlIspResult);
                        functionDisableShoeNewPlIspResult();
                        functionShowPlIspResult(positionPlIspResultList);
                    }
                }
                else
                {
                    functionMessageShow(1, "Не найденна форматка испытания с данным кодом элемента и видом испытания!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Завод изготовитель', 'Полигон', 'Испытуемый элемент' и 'Вид испытания' должны быть заполнены!");
            }
        }

        //Отмена добавления и редактирования
        private void button237_Click(object sender, EventArgs e)
        {
            functionDisableShoeNewPlIspResult();
        }

        //Функция отмены добавления и редактирования
        private void functionDisableShoeNewPlIspResult()
        {
            spPlIspResultEdit = false;
            textBox274.ReadOnly = true;
            textBox299.ReadOnly = true;
            textBox297.ReadOnly = true;
            textBox296.ReadOnly = true;
            textBox295.ReadOnly = true;
            textBox291.ReadOnly = true;
            textBox289.ReadOnly = true;
            textBox287.ReadOnly = true;
            textBox285.ReadOnly = true;
            textBox280.ReadOnly = true;
            textBox279.ReadOnly = true;
            textBox278.ReadOnly = true;
            textBox277.ReadOnly = true;
            textBox276.ReadOnly = true;
            //textBox299.ReadOnly = true;
            button242.Visible = true;
            button241.Visible = true;
            button240.Visible = true;
            button239.Visible = true;
            button238.Visible = true;
            button233.Visible = true;
            button234.Visible = true;
            button237.Visible = false;
            button236.Visible = false;
            button235.Visible = false;
            functionShowPlIspResult(positionPlIspResultList);
        }

        //Удалить
        private void button239_Click(object sender, EventArgs e)
        {
            if (positionPlIspResultList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить план испытания?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [PlIspResult] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox275.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "План испытаний успешно удален");
                    functionQueryPlIspResult(yearPlIspResult, numberPlIspResult);
                    createPositionPlIspResult(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите план испытания для удаления");
            }
        }

        //Поиск
        private void button233_Click(object sender, EventArgs e)
        {
            Form20 form20 = new Form20(plIspResultList);
            form20.ShowDialog();
            if (!ClassSearchStatic.exit)
            {
                if (ClassSearchStatic.id != -1)
                {
                    positionPlIspResultList = ClassSearchStatic.position;
                    functionShowPlIspResult(positionPlIspResultList);
                    ClassSearchStatic.exit = true;
                }
                else
                {
                    functionMessageShow(1, "План испытаний с данным " + ClassSearchStatic.searchtype + " не найден!");
                }
            }
        }

        private void textBox280_Leave(object sender, EventArgs e)
        {
            functionReShetPlIspResult();
        }

        private void textBox279_Leave(object sender, EventArgs e)
        {
            functionReShetPlIspResult();
        }

        private void textBox278_Leave(object sender, EventArgs e)
        {
            functionReShetPlIspResult();
        }

        private void textBox277_Leave(object sender, EventArgs e)
        {
            functionReShetPlIspResult();
        }

        //Функция пересчета объема испытаний за год
        private void functionReShetPlIspResult()
        {
            if (spPlIspResultEdit)
            {
                int prResPlIspResult = 0;
                if (textBox280.Text.Length > 0)
                    prResPlIspResult += Convert.ToInt32(textBox280.Text);
                if (textBox279.Text.Length > 0)
                    prResPlIspResult += Convert.ToInt32(textBox279.Text);
                if (textBox278.Text.Length > 0)
                    prResPlIspResult += Convert.ToInt32(textBox278.Text);
                if (textBox277.Text.Length > 0)
                    prResPlIspResult += Convert.ToInt32(textBox277.Text);
                if (prResPlIspResult > 0)
                    textBox281.Text = Convert.ToString(prResPlIspResult);
                else
                    textBox281.Text = "";
            }
        }

        //------------------------------ПЛАН ПРОИЗВОДСТВА------------------------------
        private void button268_Click(object sender, EventArgs e)
        {
            Form19 form19 = new Form19("План производства", true);
            form19.ShowDialog();
            if (form19.exitAgree)
            {
                functionShowPlIndResult(-1);
                label324.Text = "ПЛАН ПРОИЗВОДСТВА НА " + form19.numericUpDown1.Text + " ГОД";
                yearPlIndResult = form19.numericUpDown1.Text;
                numberPlIndResult = form19.numericUpDown2.Text;
                functionQueryPlIndResult(yearPlIndResult, numberPlIndResult);
                positionPlIndResultList = 0;
                functionShowPlIndResult(positionPlIndResultList);
                panel34.Visible = false;
                panel29.Visible = true;
            }
        }

        private void button224_Click(object sender, EventArgs e)
        {
            functionCancelResult();
        }

        //Функция отображение плана производства
        private void functionShowPlIndResult(int pos)
        {
            if (!spPlIndResultEdit)
            {
                if (pos >= 0 && plIndResultList.Count > 0)
                {
                    textBox263.Text = Convert.ToString(plIndResultList[pos].id);
                    //Элемент
                    textBox273.Text = Convert.ToString(plIndResultList[pos].codeElementPlIndKontrol);
                    textBox272.Text = Convert.ToString(plIndResultList[pos].pictureElementPlIndKontrol);
                    textBox271.Text = Convert.ToString(plIndResultList[pos].indexElementPlIndKontrol);
                    textBox270.Text = Convert.ToString(plIndResultList[pos].nameElementPlIndKontrol);
                    //Завод-изготовитель
                    textBox269.Text = Convert.ToString(plIndResultList[pos].codeFactoryPlIndKontrol);
                    label318.Text = Convert.ToString(plIndResultList[pos].nameFactoryPlIndKontrol);
                    //Единица измерения
                    textBox262.Text = Convert.ToString(plIndResultList[pos].codeEdIzmPlIndKontrol);
                    label309.Text = Convert.ToString(plIndResultList[pos].nameEdIzmPlIndKontrol);
                    //Объем производства
                    textBox268.Text = Convert.ToString(plIndResultList[pos].vYearPlIndKontrol);
                    textBox267.Text = Convert.ToString(plIndResultList[pos].vOnePlIndKontrol);
                    textBox266.Text = Convert.ToString(plIndResultList[pos].vTwoPlIndKontrol);
                    textBox265.Text = Convert.ToString(plIndResultList[pos].vThrePlIndKontrol);
                    textBox264.Text = Convert.ToString(plIndResultList[pos].vThourPlIndKontrol);
                }
                else
                {
                    textBox263.Text = "";
                    textBox273.Text = "";
                    textBox272.Text = "";
                    textBox271.Text = "";
                    textBox270.Text = "";
                    textBox269.Text = "";
                    label318.Text = "";
                    textBox262.Text = "";
                    label309.Text = "";
                    textBox268.Text = "";
                    textBox267.Text = "";
                    textBox266.Text = "";
                    textBox265.Text = "";
                    textBox264.Text = "";
                }
            }
        }

        //Позиция плана производства
        private void createPositionPlIndResult(int s)
        {
            if (s == 0)
            {
                if (positionPlIndResultList - 1 >= 0)
                    positionPlIndResultList--;
            }
            else
            {
                if (positionPlIndResultList + 1 < plIndResultList.Count)
                    positionPlIndResultList++;
            }
            functionShowPlIndResult(positionPlIndResultList);
        }

        //Назад
        private void button232_Click(object sender, EventArgs e)
        {
            createPositionPlIndResult(0);
        }

        //Вперед
        private void button228_Click(object sender, EventArgs e)
        {
            createPositionPlIndResult(1);
        }

        //Добавить
        private void button231_Click(object sender, EventArgs e)
        {
            functionShowPlIndResult(-1);
            spPlIndResultEdit = true;
            textBox273.ReadOnly = false;
            textBox269.ReadOnly = false;
            textBox262.ReadOnly = false;
            textBox267.ReadOnly = false;
            textBox266.ReadOnly = false;
            textBox265.ReadOnly = false;
            textBox264.ReadOnly = false;
            button232.Visible = false;
            button231.Visible = false;
            button230.Visible = false;
            button229.Visible = false;
            button228.Visible = false;
            button224.Visible = false;
            button223.Visible = false;
            button227.Visible = true;
            button226.Visible = true;
        }

        //Редактировать
        private void button230_Click(object sender, EventArgs e)
        {
            spPlIndResultEdit = true;
            textBox273.ReadOnly = false;
            textBox269.ReadOnly = false;
            textBox262.ReadOnly = false;
            textBox267.ReadOnly = false;
            textBox266.ReadOnly = false;
            textBox265.ReadOnly = false;
            textBox264.ReadOnly = false;
            button232.Visible = false;
            button231.Visible = false;
            button230.Visible = false;
            button229.Visible = false;
            button228.Visible = false;
            button224.Visible = false;
            button223.Visible = false;
            button227.Visible = true;
            button225.Visible = true;
        }

        //Подтверждение добавления
        private void button226_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox273.Text) && !string.IsNullOrWhiteSpace(textBox273.Text) && !string.IsNullOrEmpty(textBox269.Text) && !string.IsNullOrWhiteSpace(textBox269.Text) && !string.IsNullOrEmpty(textBox262.Text) && !string.IsNullOrWhiteSpace(textBox262.Text))
            {
                bool proverkaPlIndKontrol = true;
                bool proverkaShifrov = true;
                foreach (ClassPlIndKontrol el in plIndKontrolList)
                    if (el.codeElementPlIndKontrol == textBox273.Text && el.codeFactoryPlIndKontrol == textBox269.Text)
                        proverkaPlIndKontrol = false;
                if (!functionProverkaElementsInList(textBox273.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
                }
                if (!functionProverkaFactorysInList(textBox269.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Завод с данным кодом отсутствует в справочнике!");
                }
                if (!functionProverkaEdIzmInList(textBox262.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Единица измерения с данным кодом отсутствует в справочнике!");
                }
                if (proverkaPlIndKontrol && proverkaShifrov)
                {
                    SQLiteCommand command = new SQLiteCommand("INSERT INTO [PlIndResult] (idElementPlIndResult,idFactoryPlIndResult,idEdIzmPlIndResult,vOnePlIndResult,vTwoPlIndResult,vThrePlIndResult,vThourPlIndResult,yearPlIndResult) VALUES (@idElementPlIndResult,@idFactoryPlIndResult,@idEdIzmPlIndResult,@vOnePlIndResult,@vTwoPlIndResult,@vThrePlIndResult,@vThourPlIndResult,@yearPlIndResult)", sqliteConnection);
                    //Код испытуемого элемента
                    int idElementsPlIndResult = functionSearchIDElInSp(textBox273.Text);
                    command.Parameters.AddWithValue("idElementPlIndResult", idElementsPlIndResult);
                    //Код завода
                    int idFactorysPlIndResult = 0;
                    foreach (ClassFactorys el in factorysList)
                        if (el.getCode() == textBox269.Text)
                            idFactorysPlIndResult = el.getId();
                    command.Parameters.AddWithValue("idFactoryPlIndResult", idFactorysPlIndResult);
                    //Единица измерения
                    int idEdIzmPlIndResult = functionSearcgIDEdIzmInSp(textBox262.Text);
                    command.Parameters.AddWithValue("idEdIzmPlIndResult", idEdIzmPlIndResult);
                    //Объем испытаний
                    command.Parameters.AddWithValue("vOnePlIndResult", textBox267.Text);
                    command.Parameters.AddWithValue("vTwoPlIndResult", textBox266.Text);
                    command.Parameters.AddWithValue("vThrePlIndResult", textBox265.Text);
                    command.Parameters.AddWithValue("vThourPlIndResult", textBox264.Text);
                    //Год
                    command.Parameters.AddWithValue("yearPlIndResult", yearPlIndResult);
                    command.Parameters.AddWithValue("numberPlIndResult", numberPlIndResult);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Данные успешно добавлены");
                    functionQueryPlIndResult(yearPlIndResult, numberPlIndResult);
                    functionDisableShoeNewPlIndResult();
                    positionPlIndResultList = plIndResultList.Count - 1;
                    functionShowPlIndResult(positionPlIndResultList);
                }
                else
                {
                    functionMessageShow(1, "План производства с данным кодом элемента, заводом изготовителя и видом испытания уже существует!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код элемента', 'Завод-изготовитель', и 'Единица измерения' должны быть заполнены!");
            }
        }

        //Подтверждение редактирования
        private void button225_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox273.Text) && !string.IsNullOrWhiteSpace(textBox273.Text) && !string.IsNullOrEmpty(textBox269.Text) && !string.IsNullOrWhiteSpace(textBox269.Text) && !string.IsNullOrEmpty(textBox262.Text) && !string.IsNullOrWhiteSpace(textBox262.Text))
            {
                bool proverkaShifrov = true;
                if (!functionProverkaElementsInList(textBox273.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
                }
                if (!functionProverkaFactorysInList(textBox269.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Завод с данным кодом отсутствует в справочнике!");
                }
                if (!functionProverkaEdIzmInList(textBox262.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Единица измерения с данным кодом отсутствует в справочнике!");
                }
                if (proverkaShifrov)
                {
                    SQLiteCommand command = new SQLiteCommand("UPDATE [PlIndResult] SET [idElementPlIndResult]=@idElementPlIndResult,[idFactoryPlIndResult]=@idFactoryPlIndResult,[idEdIzmPlIndResult]=@idEdIzmPlIndResult,[vOnePlIndResult]=@vOnePlIndResult,[vTwoPlIndResult]=@vTwoPlIndResult,[vThrePlIndResult]=@vThrePlIndResult,[vThourPlIndResult]=@vThourPlIndResult,[yearPlIndResult]=@yearPlIndResult WHERE [id]=@id", sqliteConnection);
                    //id
                    command.Parameters.AddWithValue("id", textBox263.Text);
                    //Код испытуемого элемента
                    int idElementsPlIndResult = functionSearchIDElInSp(textBox273.Text);
                    command.Parameters.AddWithValue("idElementPlIndResult", idElementsPlIndResult);
                    //Код завода
                    int idFactorysPlIndResult = 0;
                    foreach (ClassFactorys el in factorysList)
                        if (el.getCode() == textBox269.Text)
                            idFactorysPlIndResult = el.getId();
                    command.Parameters.AddWithValue("idFactoryPlIndResult", idFactorysPlIndResult);
                    //Единица измерения
                    int idEdIzmPlIndResult = functionSearcgIDEdIzmInSp(textBox262.Text);
                    command.Parameters.AddWithValue("idEdIzmPlIndResult", idEdIzmPlIndResult);
                    //Объем испытаний
                    command.Parameters.AddWithValue("vOnePlIndResult", textBox267.Text);
                    command.Parameters.AddWithValue("vTwoPlIndResult", textBox266.Text);
                    command.Parameters.AddWithValue("vThrePlIndResult", textBox265.Text);
                    command.Parameters.AddWithValue("vThourPlIndResult", textBox264.Text);
                    //Год
                    command.Parameters.AddWithValue("yearPlIndResult", yearPlIndResult);
                    command.Parameters.AddWithValue("numberPlIndResult", numberPlIndResult);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Данные успешно добавлены");
                    functionQueryPlIndResult(yearPlIndResult, numberPlIndResult);
                    functionDisableShoeNewPlIndResult();
                    positionPlIndResultList = plIndResultList.Count - 1;
                    functionShowPlIndResult(positionPlIndResultList);
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код элемента', 'Завод-изготовитель', и 'Единица измерения' должны быть заполнены!");
            }
        }

        //Отмена добавления и редактирования
        private void button227_Click(object sender, EventArgs e)
        {
            functionDisableShoeNewPlIndResult();
        }

        //Фнукция отмены добавления и редактирования
        private void functionDisableShoeNewPlIndResult()
        {
            spPlIndResultEdit = false;
            textBox273.ReadOnly = true;
            textBox269.ReadOnly = true;
            textBox262.ReadOnly = true;
            textBox267.ReadOnly = true;
            textBox266.ReadOnly = true;
            textBox265.ReadOnly = true;
            textBox264.ReadOnly = true;
            button232.Visible = true;
            button231.Visible = true;
            button230.Visible = true;
            button229.Visible = true;
            button228.Visible = true;
            button224.Visible = true;
            button223.Visible = true;
            button227.Visible = false;
            button226.Visible = false;
            button225.Visible = false;
            functionShowPlIndResult(positionPlIndResultList);
        }

        //Удаление
        private void button229_Click(object sender, EventArgs e)
        {
            if (positionPlIndResultList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить план производства?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [PlIndResult] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox263.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "План производства успешно удален");
                    functionQueryPlIndResult(yearPlIndResult, numberPlIndResult);
                    createPositionPlIndResult(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите план испытания для удаления");
            }
        }

        private void textBox267_Leave(object sender, EventArgs e)
        {
            functionReShetPlIndResult();
        }

        private void textBox266_Leave(object sender, EventArgs e)
        {
            functionReShetPlIndResult();
        }

        private void textBox265_Leave(object sender, EventArgs e)
        {
            functionReShetPlIndResult();
        }

        private void textBox264_Leave(object sender, EventArgs e)
        {
            functionReShetPlIndResult();
        }

        //Функция пересчета плана производства за год
        private void functionReShetPlIndResult()
        {
            if (spPlIndResultEdit)
            {
                int prResPlIndResult = 0;
                if (textBox267.Text.Length > 0)
                    prResPlIndResult += Convert.ToInt32(textBox267.Text);
                if (textBox266.Text.Length > 0)
                    prResPlIndResult += Convert.ToInt32(textBox266.Text);
                if (textBox265.Text.Length > 0)
                    prResPlIndResult += Convert.ToInt32(textBox265.Text);
                if (textBox264.Text.Length > 0)
                    prResPlIndResult += Convert.ToInt32(textBox264.Text);
                if (prResPlIndResult > 0)
                    textBox268.Text = Convert.ToString(prResPlIndResult);
                else
                    textBox268.Text = "";
            }
        }

        //Поиск
        private void button223_Click(object sender, EventArgs e)
        {

        }

        //------------------------------ПОТРЕБНОСТЬ В КОМПЛЕКТУЮЩИХ ЭЛЕМЕНТАХ НА ГОД------------------------------
        private void button271_Click(object sender, EventArgs e)
        {
            Form19 form19 = new Form19("Потребность в КЭ", false);
            form19.ShowDialog();
            if (form19.exitAgree)
            {
                functionShowPotrVKEResult(-1);
                label308.Text = "ПОТРЕБНОСТЬ В КЭ НА " + form19.numericUpDown1.Text + " ГОД";
                yearPotrVKEResult = form19.numericUpDown1.Text;
                numberPotrVKEResult = form19.numericUpDown2.Text;
                functionQueryPlIspResult(yearPotrVKEResult, numberPotrVKEResult);
                //functionQueryVK();
                functionQueryNoneVk();
                potrVKEResultList.Clear();
                bool prIspOrSb = true;
                if (form19.comboBox1.Text == "Для сборки")
                    prIspOrSb = false;
                functionPotrVKEResultForming(yearPotrVKEResult, prIspOrSb);
                positionPotrVKEResultList = 0;
                functionShowPotrVKEResult(positionPotrVKEResultList);
                panel34.Visible = false;
                panel28.Visible = true;
                if (potrNoneVKResultList.Count > 0)
                {
                    //listBox2.Items.Add("\tНе найдена ведомость комплектации!");
                    string strErrorMesage = "Код элемента" + "\t\t" + "Код ВИ" + "\t\t" + "Код завода";
                    foreach (ClassPlIspKontrol el in potrNoneVKResultList)
                    {
                        strErrorMesage += "             " + el.codeElementPlIspKontrol + "\t\t" + el.codeVidIspPlIspKontrol + "\t\t" + el.codeFactoryPlIspKontrol;
                    }
                    MessageBox.Show(strErrorMesage, "Не найдена ведомость комплектации", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void button220_Click(object sender, EventArgs e)
        {
            functionCancelResult();
        }

        //Вычисление потребности
        private void functionPotrVKEResultForming(string yearPotrVKEResult, bool ispOrSb)
        {
            potrNoneVKResultList.Clear();
            foreach (ClassPlIspKontrol pl in plIspResultList)
            {
                bool proverkaPlInVK = false;
                if (ispOrSb)
                {
                    foreach (ClassVKMespl vk in vkMesplList)
                    {
                        if (pl.codeElementPlIspKontrol == vk.codeElementVKMespl && pl.codeVidIspPlIspKontrol == vk.codeVidIspVKMespl)
                        {
                            proverkaPlInVK = true;
                            foreach (ClassVKMesplElements el in vk.listElements)
                            {
                                bool proverkaPKE = true;
                                if (potrVKEResultList.Count > 0)
                                {
                                    foreach (ClassPotrVKEKontrol pk in potrVKEResultList)
                                    {
                                        if (pk.codeElementPotrVKEKontrol == el.el.getCode())
                                        {
                                            double summVYear = 0;
                                            if (pl.vOnePlIspKontrol.Length > 0)
                                            {
                                                pk.vOnePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vOnePlIspKontrol) * 1.3;
                                                summVYear += Convert.ToDouble(pk.vOnePotrVKEKontrol);
                                            }
                                            if (pl.vTwoPlIspKontrol.Length > 0)
                                            {
                                                pk.vTwoPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vTwoPlIspKontrol) * 1.3;
                                                summVYear += Convert.ToDouble(pk.vTwoPotrVKEKontrol);
                                            }
                                            if (pl.vThrePlIspKontrol.Length > 0)
                                            {
                                                pk.vThrePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThrePlIspKontrol) * 1.3;
                                                summVYear += Convert.ToDouble(pk.vThrePotrVKEKontrol);
                                            }
                                            if (pl.vThourPlIspKontrol.Length > 0)
                                            {
                                                pk.vThourPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThourPlIspKontrol) * 1.3;
                                                summVYear += Convert.ToDouble(pk.vThourPotrVKEKontrol);
                                            }
                                            if (summVYear > 0)
                                                pk.vYearPotrVKEKontrol = summVYear;
                                            pk.ispEl.Add(pl);
                                            pk.countVK.Add(Convert.ToDouble(el.countVKMespl));
                                            proverkaPKE = false;
                                            break;
                                        }
                                    }
                                }
                                if (proverkaPKE)
                                {
                                    ClassPotrVKEKontrol pkNew = new ClassPotrVKEKontrol();
                                    pkNew.codeElementPotrVKEKontrol = el.el.getCode();
                                    pkNew.pictureElementPotrVKEKontrol = el.el.getPicture();
                                    pkNew.indexElementPotrVKEKontrol = el.el.getIndex();
                                    pkNew.nameElementPotrVKEKontrol = el.el.getName();
                                    pkNew.codeEdIzmPotrVKEKontrol = el.codeEdIzmVKMespl;
                                    pkNew.nameEdIzmPotrVKEKontrol = el.nameEdIzmVKMespl;
                                    pkNew.codePoligonPotrVKEKontrol = pl.numberPoligonPlIspKontrol;
                                    pkNew.namePoligonPotrVKEKontrol = pl.namePoligonPlIspKontrol;
                                    pkNew.codePoligonFactoryPotrVKEKontrol = "";
                                    pkNew.namePoligonFactoryPotrVKEKontrol = "";
                                    pkNew.codeFactoryPostPotrVKEKontrol = el.el.codeFactory;
                                    pkNew.nameFactoryPostPotrVKEKontrol = el.el.nameFactory;
                                    pkNew.innFactoryPostPotrVKEKontrol = el.el.innFactory;
                                    double summVYear = 0;
                                    if (pl.vOnePlIspKontrol.Length > 0)
                                    {
                                        pkNew.vOnePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vOnePlIspKontrol) * 1.3;
                                        summVYear += Convert.ToDouble(pkNew.vOnePotrVKEKontrol);
                                    }
                                    if (pl.vTwoPlIspKontrol.Length > 0)
                                    {
                                        pkNew.vTwoPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vTwoPlIspKontrol) * 1.3;
                                        summVYear += Convert.ToDouble(pkNew.vTwoPotrVKEKontrol);
                                    }
                                    if (pl.vThrePlIspKontrol.Length > 0)
                                    {
                                        pkNew.vThrePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThrePlIspKontrol) * 1.3;
                                        summVYear += Convert.ToDouble(pkNew.vThrePotrVKEKontrol);
                                    }
                                    if (pl.vThourPlIspKontrol.Length > 0)
                                    {
                                        pkNew.vThourPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThourPlIspKontrol) * 1.3;
                                        summVYear += Convert.ToDouble(pkNew.vThourPotrVKEKontrol);
                                    }
                                    if (summVYear > 0)
                                        pkNew.vYearPotrVKEKontrol = summVYear;
                                    pkNew.ispEl.Add(pl);
                                    pkNew.countVK.Add(Convert.ToDouble(el.countVKMespl));
                                    potrVKEResultList.Add(pkNew);
                                }
                            }
                        }
                    }
                }
                else
                {
                    foreach (ClassVKMespl vk in vkMesplSbList)
                    {
                        if (pl.codeElementPlIspKontrol == vk.codeElementVKMespl && pl.codeVidIspPlIspKontrol == vk.codeVidIspVKMespl)
                        {
                            proverkaPlInVK = true;
                            foreach (ClassVKMesplElements el in vk.listElements)
                            {
                                bool proverkaPKE = true;
                                if (potrVKEResultList.Count > 0)
                                {
                                    foreach (ClassPotrVKEKontrol pk in potrVKEResultList)
                                    {
                                        if (pk.codeElementPotrVKEKontrol == el.el.getCode())
                                        {
                                            double summVYear = 0;
                                            if (pl.vOnePlIspKontrol.Length > 0)
                                            {
                                                pk.vOnePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vOnePlIspKontrol);
                                                summVYear += Convert.ToDouble(pk.vOnePotrVKEKontrol);
                                            }
                                            if (pl.vTwoPlIspKontrol.Length > 0)
                                            {
                                                pk.vTwoPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vTwoPlIspKontrol);
                                                summVYear += Convert.ToDouble(pk.vTwoPotrVKEKontrol);
                                            }
                                            if (pl.vThrePlIspKontrol.Length > 0)
                                            {
                                                pk.vThrePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThrePlIspKontrol);
                                                summVYear += Convert.ToDouble(pk.vThrePotrVKEKontrol);
                                            }
                                            if (pl.vThourPlIspKontrol.Length > 0)
                                            {
                                                pk.vThourPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThourPlIspKontrol);
                                                summVYear += Convert.ToDouble(pk.vThourPotrVKEKontrol);
                                            }
                                            if (summVYear > 0)
                                                pk.vYearPotrVKEKontrol = summVYear;
                                            pk.ispEl.Add(pl);
                                            pk.countVK.Add(Convert.ToDouble(el.countVKMespl));
                                            proverkaPKE = false;
                                            break;
                                        }
                                    }
                                }
                                if (proverkaPKE)
                                {
                                    ClassPotrVKEKontrol pkNew = new ClassPotrVKEKontrol();
                                    pkNew.codeElementPotrVKEKontrol = el.el.getCode();
                                    pkNew.pictureElementPotrVKEKontrol = el.el.getPicture();
                                    pkNew.indexElementPotrVKEKontrol = el.el.getIndex();
                                    pkNew.nameElementPotrVKEKontrol = el.el.getName();
                                    pkNew.codeEdIzmPotrVKEKontrol = el.codeEdIzmVKMespl;
                                    pkNew.nameEdIzmPotrVKEKontrol = el.nameEdIzmVKMespl;
                                    pkNew.codePoligonPotrVKEKontrol = pl.numberPoligonPlIspKontrol;
                                    pkNew.namePoligonPotrVKEKontrol = pl.namePoligonPlIspKontrol;
                                    pkNew.codePoligonFactoryPotrVKEKontrol = "";
                                    pkNew.namePoligonFactoryPotrVKEKontrol = "";
                                    pkNew.codeFactoryPostPotrVKEKontrol = el.el.codeFactory;
                                    pkNew.nameFactoryPostPotrVKEKontrol = el.el.nameFactory;
                                    pkNew.innFactoryPostPotrVKEKontrol = el.el.innFactory;
                                    double summVYear = 0;
                                    if (pl.vOnePlIspKontrol.Length > 0)
                                    {
                                        pkNew.vOnePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vOnePlIspKontrol);
                                        summVYear += Convert.ToDouble(pkNew.vOnePotrVKEKontrol);
                                    }
                                    if (pl.vTwoPlIspKontrol.Length > 0)
                                    {
                                        pkNew.vTwoPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vTwoPlIspKontrol);
                                        summVYear += Convert.ToDouble(pkNew.vTwoPotrVKEKontrol);
                                    }
                                    if (pl.vThrePlIspKontrol.Length > 0)
                                    {
                                        pkNew.vThrePotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThrePlIspKontrol);
                                        summVYear += Convert.ToDouble(pkNew.vThrePotrVKEKontrol);
                                    }
                                    if (pl.vThourPlIspKontrol.Length > 0)
                                    {
                                        pkNew.vThourPotrVKEKontrol += Convert.ToDouble(el.countVKMespl) * Convert.ToDouble(pl.vThourPlIspKontrol);
                                        summVYear += Convert.ToDouble(pkNew.vThourPotrVKEKontrol);
                                    }
                                    if (summVYear > 0)
                                        pkNew.vYearPotrVKEKontrol = summVYear;
                                    pkNew.ispEl.Add(pl);
                                    pkNew.countVK.Add(Convert.ToDouble(el.countVKMespl));
                                    potrVKEResultList.Add(pkNew);
                                }
                            }
                        }
                    }
                }
                if (!proverkaPlInVK)
                {
                    bool proverkaPlInNoneVk = true;
                    foreach (ClassNoneVk el in noneVkList)
                    {
                        if (el.codeElement == pl.codeElementPlIspKontrol)
                            proverkaPlInNoneVk = false;
                    }
                    if (proverkaPlInNoneVk && ispOrSb && (pl.codeVidIspPlIspKontrol != "098" && pl.codeVidIspPlIspKontrol != "099" && pl.codeVidIspPlIspKontrol != "205" && pl.codeVidIspPlIspKontrol != "206" && pl.codeVidIspPlIspKontrol != "207" && pl.codeVidIspPlIspKontrol != "239"))
                        potrNoneVKResultList.Add(pl);
                    if (proverkaPlInNoneVk && !ispOrSb && (pl.codeVidIspPlIspKontrol == "098" || pl.codeVidIspPlIspKontrol == "099" || pl.codeVidIspPlIspKontrol == "205" || pl.codeVidIspPlIspKontrol == "206" || pl.codeVidIspPlIspKontrol == "207" || pl.codeVidIspPlIspKontrol == "239"))
                        potrNoneVKResultList.Add(pl);
                }
            }
            if (ispOrSb)
                foreach (ClassPotrVKEKontrol potr in potrVKEResultList)
                {
                    potr.vOnePotrVKEKontrol = Math.Ceiling(potr.vOnePotrVKEKontrol);
                    potr.vTwoPotrVKEKontrol = Math.Ceiling(potr.vTwoPotrVKEKontrol);
                    potr.vThrePotrVKEKontrol = Math.Ceiling(potr.vThrePotrVKEKontrol);
                    potr.vThourPotrVKEKontrol = Math.Ceiling(potr.vThourPotrVKEKontrol);
                    potr.vOnePotrVKEKontrol = functionRoundInt(potr.vOnePotrVKEKontrol);
                    potr.vTwoPotrVKEKontrol = functionRoundInt(potr.vTwoPotrVKEKontrol);
                    potr.vThrePotrVKEKontrol = functionRoundInt(potr.vThrePotrVKEKontrol);
                    potr.vThourPotrVKEKontrol = functionRoundInt(potr.vThourPotrVKEKontrol);
                    potr.vYearPotrVKEKontrol = potr.vOnePotrVKEKontrol + potr.vTwoPotrVKEKontrol + potr.vThrePotrVKEKontrol + potr.vThourPotrVKEKontrol;
                }
        }

        //Функция отображение потребности в кэ
        private void functionShowPotrVKEResult(int pos)
        {
            if (!spPotrVKEResultEdit)
            {
                if (pos >= 0 && potrVKEResultList.Count > 0)
                {
                    textBox248.Text = Convert.ToString(potrVKEResultList[pos].id);
                    textBox261.Text = Convert.ToString(potrVKEResultList[pos].codeElementPotrVKEKontrol);
                    textBox260.Text = Convert.ToString(potrVKEResultList[pos].pictureElementPotrVKEKontrol);
                    textBox259.Text = Convert.ToString(potrVKEResultList[pos].indexElementPotrVKEKontrol);
                    textBox258.Text = Convert.ToString(potrVKEResultList[pos].nameElementPotrVKEKontrol);
                    textBox257.Text = Convert.ToString(potrVKEResultList[pos].codePoligonPotrVKEKontrol);
                    textBox256.Text = Convert.ToString(potrVKEResultList[pos].codePoligonFactoryPotrVKEKontrol);
                    textBox255.Text = Convert.ToString(potrVKEResultList[pos].codeFactoryPostPotrVKEKontrol);
                    textBox249.Text = Convert.ToString(potrVKEResultList[pos].codeEdIzmPotrVKEKontrol);
                    textBox254.Text = Convert.ToString(potrVKEResultList[pos].vYearPotrVKEKontrol);
                    textBox253.Text = Convert.ToString(potrVKEResultList[pos].vOnePotrVKEKontrol);
                    textBox252.Text = Convert.ToString(potrVKEResultList[pos].vTwoPotrVKEKontrol);
                    textBox251.Text = Convert.ToString(potrVKEResultList[pos].vThrePotrVKEKontrol);
                    textBox250.Text = Convert.ToString(potrVKEResultList[pos].vThourPotrVKEKontrol);
                    label302.Text = Convert.ToString(potrVKEResultList[pos].namePoligonPotrVKEKontrol);
                    label298.Text = Convert.ToString(potrVKEResultList[pos].namePoligonFactoryPotrVKEKontrol);
                    label297.Text = Convert.ToString(potrVKEResultList[pos].nameFactoryPostPotrVKEKontrol);
                    label290.Text = Convert.ToString(potrVKEResultList[pos].nameEdIzmPotrVKEKontrol);
                }
                else
                {
                    textBox248.Text = "";
                    textBox261.Text = "";
                    textBox260.Text = "";
                    textBox259.Text = "";
                    textBox258.Text = "";
                    textBox257.Text = "";
                    textBox256.Text = "";
                    textBox255.Text = "";
                    textBox249.Text = "";
                    textBox254.Text = "";
                    textBox253.Text = "";
                    textBox252.Text = "";
                    textBox251.Text = "";
                    textBox250.Text = "";
                    label302.Text = "";
                    label298.Text = "";
                    label297.Text = "";
                    label290.Text = "";
                }
            }
        }

        //Позиция потребности в кэ
        private void createPositionPotrVKEResult(int s)
        {
            if (s == 0)
            {
                if (positionPotrVKEResultList - 1 >= 0)
                    positionPotrVKEResultList--;
            }
            else
            {
                if (positionPotrVKEResultList + 1 < potrVKEResultList.Count)
                    positionPotrVKEResultList++;
            }
            functionShowPotrVKEResult(positionPotrVKEResultList);
        }

        //Назад
        private void button222_Click(object sender, EventArgs e)
        {
            createPositionPotrVKEResult(0);
        }

        //Вперед
        private void button221_Click(object sender, EventArgs e)
        {
            createPositionPotrVKEResult(1);
        }

        //Печать справки-обоснования
        private void button218_Click(object sender, EventArgs e)
        {

        }

        //Печать потребность в КЭ
        private void button217_Click(object sender, EventArgs e)
        {

        }

        //Поиск
        private void button219_Click(object sender, EventArgs e)
        {

        }

        //------------------------------ПОТРЕБНОСТЬ В КРЕШЕРНОМ ИМУЩЕСТВЕ------------------------------
        private void button276_Click(object sender, EventArgs e)
        {
            Form19 form19 = new Form19("Потребность в КИ", true);
            form19.ShowDialog();
            if (form19.exitAgree)
            {
                functionShowPotrVKIResult(-1);
                label397.Text = "КРЕШЕРНОЕ ИМУЩЕСТВО НА " + form19.numericUpDown1.Text + " ГОД";
                yearPotrVKIResult = form19.numericUpDown1.Text;
                numberPotrVKIResult = form19.numericUpDown2.Text;
                potrVKIResultList.Clear();
                functionQueryPotrVKIResult(yearPotrVKIResult, numberPotrVKIResult);
                positionPotrVKIResultList = 0;
                functionShowPotrVKIResult(positionPotrVKIResultList);
                panel34.Visible = false;
                panel35.Visible = true;
            }
        }

        private void button275_Click(object sender, EventArgs e)
        {
            functionCancelResult();
        }

        //Функция отображение потребности в крешерном имуществе
        private void functionShowPotrVKIResult(int pos)
        {
            if (!spPotrVKIResultEdit)
            {
                if (pos >= 0 && potrVKIResultList.Count > 0)
                {
                    textBox354.Text = Convert.ToString(potrVKIResultList[pos].id);
                    textBox352.Text = Convert.ToString(potrVKIResultList[pos].numberPotrVKIResult);
                    textBox353.Text = Convert.ToString(potrVKIResultList[pos].codeFactoryPotrVKIResult);
                    label413.Text = Convert.ToString(potrVKIResultList[pos].nameFactoryPotrVKIResult);
                    textBox345.Text = Convert.ToString(potrVKIResultList[pos].codeElementPotrVKIResult);
                    textBox344.Text = Convert.ToString(potrVKIResultList[pos].pictureElementPotrVKIResult);
                    textBox343.Text = Convert.ToString(potrVKIResultList[pos].indexElementPotrVKIResult);
                    textBox342.Text = Convert.ToString(potrVKIResultList[pos].nameElementPotrVKIResult);
                    textBox351.Text = Convert.ToString(potrVKIResultList[pos].codeEdIzmPotrVKIResult);
                    label411.Text = Convert.ToString(potrVKIResultList[pos].nameEdIzmPotrVKIResult);
                    textBox350.Text = Convert.ToString(potrVKIResultList[pos].vYearPotrVKIResult);
                    textBox349.Text = Convert.ToString(potrVKIResultList[pos].vOnePotrVKIResult);
                    textBox348.Text = Convert.ToString(potrVKIResultList[pos].vTwoPotrVKIResult);
                    textBox347.Text = Convert.ToString(potrVKIResultList[pos].vThrePotrVKIResult);
                    textBox346.Text = Convert.ToString(potrVKIResultList[pos].vThourPotrVKIResult);
                }
                else
                {
                    textBox354.Text = "";
                    textBox352.Text = "";
                    textBox353.Text = "";
                    label413.Text = "";
                    textBox345.Text = "";
                    textBox344.Text = "";
                    textBox343.Text = "";
                    textBox342.Text = "";
                    textBox351.Text = "";
                    label411.Text = "";
                    textBox350.Text = "";
                    textBox349.Text = "";
                    textBox348.Text = "";
                    textBox347.Text = "";
                    textBox346.Text = "";
                }
            }
        }

        //Позиция потребности в кэ
        private void createPositionPotrVKIResult(int s)
        {
            if (s == 0)
            {
                if (positionPotrVKIResultList - 1 >= 0)
                    positionPotrVKIResultList--;
            }
            else
            {
                if (positionPotrVKIResultList + 1 < potrVKIResultList.Count)
                    positionPotrVKIResultList++;
            }
            functionShowPotrVKIResult(positionPotrVKIResultList);
        }

        //Назад
        private void button284_Click(object sender, EventArgs e)
        {
            createPositionPotrVKIResult(0);
        }

        //Вперед
        private void button280_Click(object sender, EventArgs e)
        {
            createPositionPotrVKIResult(1);
        }

        //Добавить
        private void button283_Click(object sender, EventArgs e)
        {
            functionShowPotrVKIResult(-1);
            spPotrVKIResultEdit = true;
            textBox353.ReadOnly = false;
            textBox352.ReadOnly = false;
            textBox345.ReadOnly = false;
            textBox351.ReadOnly = false;
            textBox349.ReadOnly = false;
            textBox348.ReadOnly = false;
            textBox347.ReadOnly = false;
            textBox346.ReadOnly = false;
            button284.Visible = false;
            button283.Visible = false;
            button282.Visible = false;
            button281.Visible = false;
            button280.Visible = false;
            button285.Visible = false;
            button275.Visible = false;
            button279.Visible = true;
            button278.Visible = true;
            textBox353.Focus();
        }

        //Редактировать
        private void button282_Click(object sender, EventArgs e)
        {
            spPotrVKIResultEdit = true;
            textBox353.ReadOnly = false;
            textBox352.ReadOnly = false;
            textBox345.ReadOnly = false;
            textBox351.ReadOnly = false;
            textBox349.ReadOnly = false;
            textBox348.ReadOnly = false;
            textBox347.ReadOnly = false;
            textBox346.ReadOnly = false;
            button284.Visible = false;
            button283.Visible = false;
            button282.Visible = false;
            button281.Visible = false;
            button280.Visible = false;
            button285.Visible = false;
            button275.Visible = false;
            button279.Visible = true;
            button277.Visible = true;
            textBox353.Focus();
        }

        //Подтверждение добавления
        private void button278_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox345.Text) && !string.IsNullOrWhiteSpace(textBox345.Text) && !string.IsNullOrEmpty(textBox353.Text) && !string.IsNullOrWhiteSpace(textBox353.Text) && !string.IsNullOrEmpty(textBox351.Text) && !string.IsNullOrWhiteSpace(textBox351.Text))
            {
                bool proverkaPotrVKIKontrol = true;
                bool proverkaShifrov = true;
                foreach (ClassPotrVKIResult vki in potrVKIResultList)
                    if (vki.codeElementPotrVKIResult == textBox345.Text && vki.codeFactoryPotrVKIResult == textBox353.Text)
                        proverkaPotrVKIKontrol = false;
                if (!functionProverkaElementsInList(textBox345.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
                }
                if (!functionProverkaFactorysInList(textBox353.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Завод с данным кодом отсутствует в справочнике!");
                }
                if (!functionProverkaEdIzmInList(textBox351.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Единица измерения с данным кодом отсутствует в справочнике!");
                }
                if (proverkaPotrVKIKontrol && proverkaShifrov)
                {
                    SQLiteCommand command = new SQLiteCommand("INSERT INTO [PotrVKIResult] (idElementPotrVKIResult,idFactoryPotrVKIResult,idEdIzmPotrVKIResult,vOnePotrVKIResult,vTwoPotrVKIResult,vThrePotrVKIResult,vThourPotrVKIResult,yearPotrVKIResult,numberPotrVKIResult) VALUES (@idElementPotrVKIResult,@idFactoryPotrVKIResult,@idEdIzmPotrVKIResult,@vOnePotrVKIResult,@vTwoPotrVKIResult,@vThrePotrVKIResult,@vThourPotrVKIResult,@yearPotrVKIResult,@numberPotrVKIResult)", sqliteConnection);
                    //Номер входной заяки numberPotrVKIResult
                    command.Parameters.AddWithValue("numberPotrVKIResult", textBox352.Text);
                    //Код крешерного имущества
                    int idElementsPotrVKIResult = functionSearchIDElInSp(textBox345.Text);
                    command.Parameters.AddWithValue("idElementPotrVKIResult", idElementsPotrVKIResult);
                    //Код завода
                    int idFactorysPotrVKIResult = 0;
                    foreach (ClassFactorys el in factorysList)
                        if (el.getCode() == textBox353.Text)
                            idFactorysPotrVKIResult = el.getId();
                    command.Parameters.AddWithValue("idFactoryPotrVKIResult", idFactorysPotrVKIResult);
                    //Единица измерения
                    int idEdIzmPotrVKIResult = functionSearcgIDEdIzmInSp(textBox351.Text);
                    command.Parameters.AddWithValue("idEdIzmPotrVKIResult", idEdIzmPotrVKIResult);
                    //Объем испытаний
                    command.Parameters.AddWithValue("vOnePotrVKIResult", textBox349.Text);
                    command.Parameters.AddWithValue("vTwoPotrVKIResult", textBox348.Text);
                    command.Parameters.AddWithValue("vThrePotrVKIResult", textBox347.Text);
                    command.Parameters.AddWithValue("vThourPotrVKIResult", textBox346.Text);
                    //Год
                    command.Parameters.AddWithValue("yearPotrVKIResult", yearPotrVKIResult);
                    command.Parameters.AddWithValue("numberPotrVKIResult", numberPotrVKIResult);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Данные успешно добавлены");
                    functionQueryPotrVKIResult(yearPotrVKIResult, numberPotrVKIResult);
                    functionDisableShoeNewPotrVKIResult();
                    positionPotrVKIResultList = potrVKIResultList.Count - 1;
                    functionShowPotrVKIResult(positionPotrVKIResultList);
                }
                else if (!proverkaPotrVKIKontrol)
                {
                    functionMessageShow(1, "Заявка на крешерное имущество с данным кодом и заказчиком уже существует!");
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код крешерного имущества', 'Заказчик', и 'Единица измерения' должны быть заполнены!");
            }
        }

        //Подтверждение редактирования
        private void button277_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textBox345.Text) && !string.IsNullOrWhiteSpace(textBox345.Text) && !string.IsNullOrEmpty(textBox353.Text) && !string.IsNullOrWhiteSpace(textBox353.Text) && !string.IsNullOrEmpty(textBox351.Text) && !string.IsNullOrWhiteSpace(textBox351.Text))
            {
                bool proverkaShifrov = true;
                if (!functionProverkaElementsInList(textBox345.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Элемент с данным кодом отсутствует в справочнике!");
                }
                if (!functionProverkaFactorysInList(textBox353.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Завод с данным кодом отсутствует в справочнике!");
                }
                if (!functionProverkaEdIzmInList(textBox351.Text))
                {
                    proverkaShifrov = false;
                    functionMessageShow(1, "Единица измерения с данным кодом отсутствует в справочнике!");
                }
                if (proverkaShifrov)
                {
                    SQLiteCommand command = new SQLiteCommand("UPDATE [PotrVKIResult] SET [numberPotrVKIResult]=@numberPotrVKIResult,[idElementPotrVKIResult]=@idElementPotrVKIResult,[idFactoryPotrVKIResult]=@idFactoryPotrVKIResult,[idEdIzmPotrVKIResult]=@idEdIzmPotrVKIResult,[vOnePotrVKIResult]=@vOnePotrVKIResult,[vTwoPotrVKIResult]=@vTwoPotrVKIResult,[vThrePotrVKIResult]=@vThrePotrVKIResult,[vThourPotrVKIResult]=@vThourPotrVKIResult,[yearPotrVKIResult]=@yearPotrVKIResult WHERE [id]=@id", sqliteConnection);
                    //id
                    command.Parameters.AddWithValue("id", textBox354.Text);
                    //Номер входной заяки numberPotrVKIResult
                    command.Parameters.AddWithValue("numberPotrVKIResult", textBox352.Text);
                    //Код крешерного имущества
                    int idElementsPotrVKIResult = functionSearchIDElInSp(textBox345.Text);
                    command.Parameters.AddWithValue("idElementPotrVKIResult", idElementsPotrVKIResult);
                    //Код завода
                    int idFactorysPotrVKIResult = 0;
                    foreach (ClassFactorys el in factorysList)
                        if (el.getCode() == textBox353.Text)
                            idFactorysPotrVKIResult = el.getId();
                    command.Parameters.AddWithValue("idFactoryPotrVKIResult", idFactorysPotrVKIResult);
                    //Единица измерения
                    int idEdIzmPotrVKIResult = functionSearcgIDEdIzmInSp(textBox351.Text);
                    command.Parameters.AddWithValue("idEdIzmPotrVKIResult", idEdIzmPotrVKIResult);
                    //Объем испытаний
                    command.Parameters.AddWithValue("vOnePotrVKIResult", textBox349.Text);
                    command.Parameters.AddWithValue("vTwoPotrVKIResult", textBox348.Text);
                    command.Parameters.AddWithValue("vThrePotrVKIResult", textBox347.Text);
                    command.Parameters.AddWithValue("vThourPotrVKIResult", textBox346.Text);
                    //Год
                    command.Parameters.AddWithValue("yearPotrVKIResult", yearPotrVKIResult);
                    command.Parameters.AddWithValue("numberPotrVKIResult", numberPotrVKIResult);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Данные успешно добавлены");
                    functionQueryPotrVKIResult(yearPotrVKIResult, numberPotrVKIResult);
                    functionDisableShoeNewPotrVKIResult();
                    positionPotrVKIResultList = potrVKIResultList.Count - 1;
                    functionShowPotrVKIResult(positionPotrVKIResultList);
                }
            }
            else
            {
                functionMessageShow(1, "Поля 'Код крешерного имущества', 'Заказчик', и 'Единица измерения' должны быть заполнены!");
            }
        }

        //Отмена добавления и редактирования
        private void button279_Click(object sender, EventArgs e)
        {
            functionDisableShoeNewPotrVKIResult();
        }


        //Фнукция отмены добавления и редактирования
        private void functionDisableShoeNewPotrVKIResult()
        {
            spPotrVKIResultEdit = false;
            textBox353.ReadOnly = true;
            textBox352.ReadOnly = true;
            textBox345.ReadOnly = true;
            textBox351.ReadOnly = true;
            textBox350.ReadOnly = true;
            textBox349.ReadOnly = true;
            textBox348.ReadOnly = true;
            textBox347.ReadOnly = true;
            textBox346.ReadOnly = true;
            button284.Visible = true;
            button283.Visible = true;
            button282.Visible = true;
            button281.Visible = true;
            button280.Visible = true;
            button285.Visible = true;
            button275.Visible = true;
            button279.Visible = false;
            button277.Visible = false;
            button278.Visible = false;
            functionShowPotrVKIResult(positionPotrVKIResultList);
        }

        //Удалить
        private void button281_Click(object sender, EventArgs e)
        {
            if (positionPotrVKIResultList != -1)
            {
                if (DialogResult.Yes == MessageBox.Show("Вы уверены, что желаете удалить элемент?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {
                    SQLiteCommand command = new SQLiteCommand("DELETE FROM [PotrVKIResult] WHERE [id]=@id", sqliteConnection);
                    command.Parameters.AddWithValue("id", textBox354.Text);
                    sqliteConnection.Open();
                    command.ExecuteNonQuery();
                    sqliteConnection.Close();
                    functionMessageShow(2, "Элемент успешно удален");
                    functionQueryPotrVKIResult(yearPotrVKIResult, numberPotrVKIResult);
                    createPositionPotrVKIResult(0);
                }
            }
            else
            {
                functionMessageShow(2, "Выберите план испытания для удаления");
            }
        }

        //Поиск
        private void button285_Click(object sender, EventArgs e)
        {

        }

        //------------------------------ПЕЧАТЬ------------------------------
        private void button272_Click(object sender, EventArgs e)
        {
            Form19 form19 = new Form19("Печать отчетов", true);
            form19.ShowDialog();
            if (form19.exitAgree)
            {
                label287.Text = "ПЕЧАТЬ ОТЧЕТОВ НА " + form19.numericUpDown1.Text + " ГОД";
                yearPrintResult = form19.numericUpDown1.Text;
                numberPrintResult = form19.numericUpDown2.Text;
                panel34.Visible = false;
                panel27.Visible = true;
                label286.Text = "";
            }
        }

        private void button216_Click(object sender, EventArgs e)
        {
            functionCancelResult();
        }

        //Результ план
        private void button215_Click(object sender, EventArgs e)
        {
            Form21 form21 = new Form21(true, true);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                functionQueryCenaVidIsp();
                functionQueryPlIspResult(yearPrintResult, numberPrintResult);
                if (plIspResultList.Count > 0)
                {
                    bool printProverka = true;
                    button215.Enabled = false;
                    button214.Enabled = false;
                    button213.Enabled = false;
                    button212.Enabled = false;
                    button274.Enabled = false;
                    button286.Enabled = false;
                    button218.Enabled = false;
                    button287.Enabled = false;
                    button288.Enabled = false;
                    button289.Enabled = false;
                    //Количество экземпляров
                    string countEkz = form21.textBox2.Text;
                    //Учетный номер
                    string uchNumber = form21.textBox1.Text;
                    //WORD
                    label286.Text = "Печать: подготовка документа к печати";
                    new Thread(() =>
                    {
                        Word.Application oWord = new Word.Application();
                        oWord.Visible = false;
                        try
                        {
                            //Открытие документа
                            Word.Document wordDocument;
                            if (form21.typePrint == 1)
                                wordDocument = oWord.Documents.Open(templateFileNameWordPlanSbResult);
                            else
                                wordDocument = oWord.Documents.Open(templateFileNameWordPlanIspResult);
                            //Поиск и замена текста
                            functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                            functionReplaceInText(wordDocument, oWord, "{year}", yearPrintResult);
                            //Добавление в файл таблицы
                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание титульного листа"));
                            Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                            //Добавление в файл таблицы
                            //wordDocument.Paragraphs.Add();
                            var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                            wordDocument.Tables.Add(range, 1, 7, autoFitBehavior);
                            Word.Table oTable = wordDocument.Tables[1];
                            string[] nameHeaderTable = { "№\nп/п", "Шифр,\nнаименование\nэлемента", "Шифр,\nнаименование\nзавода", "Шифр,\nнаименование\nвида испытания", "Шифр,\nнаименование\nсистемы", "Цена,\nт.р.", "Количество изделий(выстрелов)/стоимость, т.р.", "Год", "1 кв", "2 кв", "3 кв", "4 кв" };
                            for (int i = 0; i < oTable.Columns.Count; i++)
                            {
                                Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                wordCellRange.Text = nameHeaderTable[i];
                                wordCellRange.Rows.HeadingFormat = -1;
                                wordCellRange.Font.Name = "Times New Roman";
                            }
                            oTable.Cell(1, 1).Width = 35;
                            oTable.Cell(1, 2).Width = 150;
                            oTable.Cell(1, 3).Width = 100;
                            oTable.Cell(1, 4).Width = 100;
                            oTable.Cell(1, 5).Width = 100;
                            oTable.Cell(1, 6).Width = 50;
                            oTable.Cell(1, 7).Width = 270;
                            oTable.Cell(1, 7).Split(2, 1);
                            oTable.Cell(2, 7).Split(1, 5);
                            for (int i = 7; i < 12; i++)
                            {
                                Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                wordCellRange.Text = nameHeaderTable[i];
                                wordCellRange.Rows.HeadingFormat = -1;
                            }
                            int positionRows = 3;
                            int printPlIspCount = 1;
                            int allPlIspCount = 0;
                            foreach (ClassPlIspKontrol pl in plIspResultList)
                            {
                                if (form21.typePrint == 1)
                                {
                                    //Для сборки
                                    if (pl.codeVidIspPlIspKontrol == "098" || pl.codeVidIspPlIspKontrol == "099" || pl.codeVidIspPlIspKontrol == "205" || pl.codeVidIspPlIspKontrol == "206" || pl.codeVidIspPlIspKontrol == "207" || pl.codeVidIspPlIspKontrol == "239")
                                        allPlIspCount++;
                                }
                                else
                                {
                                    //Для испытаний
                                    if (pl.codeVidIspPlIspKontrol != "098" && pl.codeVidIspPlIspKontrol != "099" && pl.codeVidIspPlIspKontrol != "205" && pl.codeVidIspPlIspKontrol != "206" && pl.codeVidIspPlIspKontrol != "207" && pl.codeVidIspPlIspKontrol != "239")
                                        allPlIspCount++;
                                }
                            }
                            /*//List<ClassSorting> sortingList = new List<ClassSorting>();
                            foreach (ClassPlIspKontrol pl in plIspResultList)
                            {
                               // bool proverkaInSort = true;
                                //if (proverkaInSort)
                                //{
                                    //ClassSorting classSorting = new ClassSorting();
                                //}
                            
                            }*/
                            var sortedList = plIspResultList.OrderBy(a => a.codeFactoryPlIspKontrol).ThenBy(b => b.codeElementPlIspKontrol).ThenBy(c => c.codeVidIspPlIspKontrol);
                            //plIspResultList.Sort((a, b) => a.codeFactoryPlIspKontrol.CompareTo(b.codeFactoryPlIspKontrol));
                            foreach (ClassPlIspKontrol pl in sortedList)
                            {
                                bool proverkaIspOrSb = false;
                                if (form21.typePrint == 1)
                                {
                                    //Для сборки
                                    if (pl.codeVidIspPlIspKontrol == "098" || pl.codeVidIspPlIspKontrol == "099" || pl.codeVidIspPlIspKontrol == "205" || pl.codeVidIspPlIspKontrol == "206" || pl.codeVidIspPlIspKontrol == "207" || pl.codeVidIspPlIspKontrol == "239")
                                        proverkaIspOrSb = true;
                                }
                                else
                                {
                                    //Для испытаний
                                    if (pl.codeVidIspPlIspKontrol != "098" && pl.codeVidIspPlIspKontrol != "099" && pl.codeVidIspPlIspKontrol != "205" && pl.codeVidIspPlIspKontrol != "206" && pl.codeVidIspPlIspKontrol != "207" && pl.codeVidIspPlIspKontrol != "239")
                                        proverkaIspOrSb = true;
                                }
                                if (proverkaIspOrSb)
                                {
                                    label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: печать плана испытанй " + printPlIspCount + " из " + allPlIspCount));
                                    printPlIspCount++;
                                    oTable.Rows.Add();
                                    for (int j = 0; j < 11; j++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                        wordCellRange.Rows.HeadingFormat = 0;
                                        if (j == 0)
                                            wordCellRange.Text = "0\n0";
                                        if (j == 1)
                                        {
                                            wordCellRange.Text = "     " + pl.codeElementPlIspKontrol + "\n" + pl.pictureElementPlIspKontrol + "\n" + pl.indexElementPlIspKontrol + "\n" + pl.nameElementPlIspKontrol;
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                        }
                                        if (j == 2)
                                            wordCellRange.Text = pl.codeFactoryPlIspKontrol + "\n" + pl.nameFactoryPlIspKontrol;
                                        if (j == 3)
                                            wordCellRange.Text = pl.codeVidIspPlIspKontrol + "\n" + pl.nameVidIspPlIspKontrol;
                                        if (j == 4)
                                            wordCellRange.Text = pl.codeSystemPlIspKontrol + "\n" + pl.nameSystemPlIspKontrol;
                                        double cenaIsp = 0;
                                        foreach (ClassCenaVidIsp cena in cenaVidIspList)
                                            if (cena.codeElementCenaVidIsp == pl.codeElementPlIspKontrol && cena.poligonCenaVidIsp == pl.numberPoligonPlIspKontrol)
                                                foreach (ClassCenaVidIspCombo co in cena.comboListCenaVidIsp)
                                                    if (co.codeVidIspCombo == pl.codeVidIspPlIspKontrol)
                                                        cenaIsp = Math.Round(Convert.ToDouble(co.cenaCombo) / 1000, 2);
                                        if (j == 5)
                                            if (cenaIsp > 0)
                                                wordCellRange.Text = "\n" + String.Format("{0:0.00}", cenaIsp);
                                        if (j == 6)
                                            if (cenaIsp > 0 && pl.vYearPlIspKontrol.Length > 0)
                                                wordCellRange.Text = pl.vYearPlIspKontrol + "\n" + String.Format("{0:0.00}", Convert.ToDouble(pl.vYearPlIspKontrol) * cenaIsp);
                                            else
                                                wordCellRange.Text = pl.vYearPlIspKontrol;
                                        if (j == 7)
                                            if (cenaIsp > 0 && pl.vOnePlIspKontrol.Length > 0)
                                                wordCellRange.Text = pl.vOnePlIspKontrol + "\n" + String.Format("{0:0.00}", Convert.ToDouble(pl.vOnePlIspKontrol) * cenaIsp);
                                            else
                                                wordCellRange.Text = pl.vOnePlIspKontrol;
                                        if (j == 8)
                                            if (cenaIsp > 0 && pl.vTwoPlIspKontrol.Length > 0)
                                                wordCellRange.Text = pl.vTwoPlIspKontrol + "\n" + String.Format("{0:0.00}", Convert.ToDouble(pl.vTwoPlIspKontrol) * cenaIsp);
                                            else
                                                wordCellRange.Text = pl.vTwoPlIspKontrol;
                                        if (j == 9)
                                            if (cenaIsp > 0 && pl.vThrePlIspKontrol.Length > 0)
                                                wordCellRange.Text = pl.vThrePlIspKontrol + "\n" + String.Format("{0:0.00}", Convert.ToDouble(pl.vThrePlIspKontrol) * cenaIsp);
                                            else
                                                wordCellRange.Text = pl.vThrePlIspKontrol;
                                        if (j == 10)
                                            if (cenaIsp > 0 && pl.vThourPlIspKontrol.Length > 0)
                                                wordCellRange.Text = pl.vThourPlIspKontrol + "\n" + String.Format("{0:0.00}", Convert.ToDouble(pl.vThourPlIspKontrol) * cenaIsp);
                                            else
                                                wordCellRange.Text = pl.vThourPlIspKontrol;
                                    }
                                    positionRows++;
                                }
                            }
                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание экземпляров"));
                            //Создание экземпляров
                            wordDocument.Range().Copy();
                            var rangeAllDocumentEkz = wordDocument.Content;
                            rangeAllDocumentEkz.Find.ClearFormatting();
                            for (int j = 0; j < plIspResultList.Count; j++)
                            {
                                functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                            }
                            for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                            {
                                //В конец документа
                                object what = Word.WdGoToItem.wdGoToLine;
                                object which = Word.WdGoToDirection.wdGoToLast;
                                Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                //Создаем разрыв РАЗДЕЛА (не страниц)
                                endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                //Вставляем
                                endRange.Paste();
                                rangeAllDocumentEkz = wordDocument.Content;
                                rangeAllDocumentEkz.Find.ClearFormatting();
                                rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                            }
                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: сохранение документа"));
                            //Сохранение
                            dateNowFileName = DateTime.Now;
                            string strSaveName = Convert.ToString(dateNowFileName);
                            strSaveName = strSaveName.Replace(':', '-');
                            if (form21.typePrint == 1)
                                wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\Результ ПЛАН НА СБОРКУ " + strSaveName + ".docx");
                            else
                                wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\Результ ПЛАН ИСПЫТАНИЙ " + strSaveName + ".docx");
                            wordDocument.Close();
                        }
                        catch
                        {
                            MessageBox.Show("Ошибка!");
                            printProverka = false;
                        }
                        finally
                        {
                            oWord.Quit();
                            if (printProverka)
                                if (form21.typePrint == 1)
                                    functionMessageShow(2, "Результ план на сборку напечатан!");
                                else
                                    functionMessageShow(2, "Результ план испытаний напечатан!");
                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = ""));
                            button215.BeginInvoke((MethodInvoker)(() => this.button215.Enabled = true));
                            button214.BeginInvoke((MethodInvoker)(() => this.button214.Enabled = true));
                            button213.BeginInvoke((MethodInvoker)(() => this.button213.Enabled = true));
                            button212.BeginInvoke((MethodInvoker)(() => this.button212.Enabled = true));
                            button274.BeginInvoke((MethodInvoker)(() => this.button274.Enabled = true));
                            button286.BeginInvoke((MethodInvoker)(() => this.button286.Enabled = true));
                            button218.BeginInvoke((MethodInvoker)(() => this.button218.Enabled = true));
                            button287.BeginInvoke((MethodInvoker)(() => this.button287.Enabled = true));
                            button288.BeginInvoke((MethodInvoker)(() => this.button288.Enabled = true));
                            button289.BeginInvoke((MethodInvoker)(() => this.button289.Enabled = true));
                        }
                    }).Start();
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //Справка-обоснование
        private void button214_Click(object sender, EventArgs e)
        {
            Form21 form21 = new Form21(true, true);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                functionQueryPlIspResult(yearPrintResult, numberPrintResult);
                //functionQueryVK();
                functionQueryNoneVk();
                potrVKEResultList.Clear();
                if (form21.typePrint == 1)
                    functionPotrVKEResultForming(yearPrintResult, false);
                else
                    functionPotrVKEResultForming(yearPrintResult, true);
                if (plIspResultList.Count > 0)
                {
                    if (potrVKEResultList.Count > 0)
                    {
                        bool printProverka = true;
                        button215.Enabled = false;
                        button214.Enabled = false;
                        button213.Enabled = false;
                        button212.Enabled = false;
                        button274.Enabled = false;
                        button286.Enabled = false;
                        button218.Enabled = false;
                        button287.Enabled = false;
                        button288.Enabled = false;
                        button289.Enabled = false;
                        //Количество экземпляров
                        string countEkz = form21.textBox2.Text;
                        //Учетный номер
                        string uchNumber = form21.textBox1.Text;
                        //WORD
                        label286.Text = "Печать: подготовка документа к печати";
                        new Thread(() =>
                        {
                            Word.Application oWord = new Word.Application();
                            oWord.Visible = false;
                            try
                            {
                                //Открытие документа
                                Word.Document wordDocument;
                                if (form21.typePrint == 1)
                                    wordDocument = oWord.Documents.Open(templateFileNameWordVKESbResult);
                                else
                                    wordDocument = oWord.Documents.Open(templateFileNameWordVKEIspResult);
                                //Поиск и замена текста
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                                functionReplaceInText(wordDocument, oWord, "{year}", yearPrintResult);
                                //Добавление в файл таблицы
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание титульного листа"));
                                Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                                //Добавление в файл таблицы
                                var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                wordDocument.Tables.Add(range, 1, 6, autoFitBehavior);
                                Word.Table oTable = wordDocument.Tables[1];
                                string[] nameHeaderTable = { "№\nп/п", "Код и наименование\nкомплектующего\nэлемента", "Код и наименование\nиспытуемого\nэлемента", "Заводы-\nизготовители\nКЭ и ИЭ", "Заявлено (шт) /Объем испытаний (выстр) /Результная потр.в КЭ (шт)", "Остаток\nна начало\nпериода", "год", "1 кв", "2 кв", "3 кв", "4 кв" };
                                for (int i = 0; i < oTable.Columns.Count; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Text = nameHeaderTable[i];
                                    wordCellRange.Rows.HeadingFormat = -1;
                                    wordCellRange.Font.Name = "Times New Roman";
                                }
                                oTable.Cell(1, 1).Width = 35;
                                oTable.Cell(1, 2).Width = 120;
                                oTable.Cell(1, 3).Width = 120;
                                oTable.Cell(1, 4).Width = 80;
                                oTable.Cell(1, 5).Width = 370;
                                oTable.Cell(1, 6).Width = 60;
                                oTable.Cell(1, 5).Split(2, 1);
                                oTable.Cell(2, 5).Split(1, 5);
                                oTable.Cell(2, 5).Width = 130;
                                oTable.Cell(2, 6).Width = 60;
                                oTable.Cell(2, 7).Width = 60;
                                oTable.Cell(2, 8).Width = 60;
                                oTable.Cell(2, 9).Width = 60;
                                oTable.Cell(1, 6).Merge(oTable.Cell(2, 10));
                                for (int i = 5; i < 10; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Text = nameHeaderTable[i + 1];
                                    wordCellRange.Rows.HeadingFormat = -1;
                                }
                                int positionRows = 3;
                                int positionRowsNew = 3;
                                int printVKECount = 1;
                                foreach (ClassPotrVKEKontrol vke in potrVKEResultList)
                                {
                                    vke.ispEl.OrderBy(a => a.codeElementPlIspKontrol);
                                }
                                var sortedList = potrVKEResultList.OrderBy(a => a.codeElementPotrVKEKontrol);
                                foreach (ClassPotrVKEKontrol vke in sortedList)
                                {
                                    label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: печать справки-обоснование " + printVKECount + " из " + potrVKEResultList.Count));
                                    printVKECount++;
                                    oTable.Rows.Add();
                                    positionRowsNew = positionRows;
                                    for (int j = 0; j < 10; j++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                        wordCellRange.Rows.HeadingFormat = 0;
                                        if (j == 0)
                                            wordCellRange.Text = Convert.ToString(printVKECount - 1);
                                        if (j == 1)
                                        {
                                            wordCellRange.Text = "     " + vke.codeElementPotrVKEKontrol + "\n" + vke.pictureElementPotrVKEKontrol + "\n" + vke.indexElementPotrVKEKontrol + "\n" + vke.nameElementPotrVKEKontrol;
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                        }
                                        if (j == 2)
                                        {
                                            int kPl = 0;
                                            foreach (ClassPlIspKontrol pl in vke.ispEl)
                                            {
                                                oTable.Rows.Add();
                                                positionRowsNew++;
                                                for (int k = 3; k < 10; k++)
                                                {
                                                    Word.Range wordCellRange2 = oTable.Cell(positionRowsNew, k).Range;
                                                    if (k == 3)
                                                    {
                                                        wordCellRange2.Text = "     " + pl.codeElementPlIspKontrol + "\n" + pl.pictureElementPlIspKontrol + "\n" + pl.indexElementPlIspKontrol + "\n" + pl.nameElementPlIspKontrol;
                                                        wordCellRange2.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                                    }
                                                    if (k == 4)
                                                        wordCellRange2.Text = pl.codeFactoryPlIspKontrol + "\n" + pl.nameFactoryPlIspKontrol;
                                                    if (k == 5)
                                                        wordCellRange2.Text = "Объем исп     " + pl.vYearPlIspKontrol + "\n" + "Потр.в КЭ     " + Convert.ToDouble(pl.vYearPlIspKontrol) * vke.countVK[kPl];
                                                    if (k == 6)
                                                        if (pl.vOnePlIspKontrol.Length > 0)
                                                            wordCellRange2.Text = pl.vOnePlIspKontrol;
                                                    if (k == 7)
                                                        if (pl.vTwoPlIspKontrol.Length > 0)
                                                            wordCellRange2.Text = pl.vTwoPlIspKontrol;
                                                    if (k == 8)
                                                        if (pl.vThrePlIspKontrol.Length > 0)
                                                            wordCellRange2.Text = pl.vThrePlIspKontrol;
                                                    if (k == 9)
                                                        if (pl.vThourPlIspKontrol.Length > 0)
                                                            wordCellRange2.Text = pl.vThourPlIspKontrol;
                                                }
                                                kPl++;
                                            }
                                        }
                                        if (j == 3)
                                            wordCellRange.Text = vke.codeFactoryPostPotrVKEKontrol + "\n" + vke.nameFactoryPostPotrVKEKontrol;
                                        if (j == 4)
                                            wordCellRange.Text = "Заявлено:     " + vke.vYearPotrVKEKontrol;
                                        if (j == 5)
                                            if (vke.vOnePotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vOnePotrVKEKontrol);
                                        if (j == 6)
                                            if (vke.vTwoPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vTwoPotrVKEKontrol);
                                        if (j == 7)
                                            if (vke.vThrePotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vThrePotrVKEKontrol);
                                        if (j == 8)
                                            if (vke.vThourPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vThourPotrVKEKontrol);
                                        if (j == 9)
                                            wordCellRange.Text = "";
                                    }
                                    positionRows = positionRowsNew;
                                    positionRows++;
                                }
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание экземпляров"));
                                //Создание экземпляров
                                wordDocument.Range().Copy();
                                var rangeAllDocumentEkz = wordDocument.Content;
                                rangeAllDocumentEkz.Find.ClearFormatting();
                                for (int j = 0; j < plIspResultList.Count; j++)
                                {
                                    functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                                }
                                for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                                {
                                    //В конец документа
                                    object what = Word.WdGoToItem.wdGoToLine;
                                    object which = Word.WdGoToDirection.wdGoToLast;
                                    Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                    //Создаем разрыв РАЗДЕЛА (не страниц)
                                    endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                    //Вставляем
                                    endRange.Paste();
                                    rangeAllDocumentEkz = wordDocument.Content;
                                    rangeAllDocumentEkz.Find.ClearFormatting();
                                    rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                }
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: сохранение документа"));
                                //Сохранение
                                dateNowFileName = DateTime.Now;
                                string strSaveName = Convert.ToString(dateNowFileName);
                                strSaveName = strSaveName.Replace(':', '-');
                                if (form21.typePrint == 1)
                                    wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\СПРАВКА-ОБОСНОВАНИЕ ДЛЯ СБОРКИ " + strSaveName + ".docx");
                                else
                                    wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\СПРАВКА-ОБОСНОВАНИЕ ДЛЯ ИСПЫТАНИЙ " + strSaveName + ".docx");
                                wordDocument.Close();
                            }
                            catch
                            {
                                MessageBox.Show("Ошибка!");
                                printProverka = false;
                            }
                            finally
                            {
                                oWord.Quit();
                                if (printProverka)
                                    if (form21.typePrint == 1)
                                        functionMessageShow(2, "Справка-обоснование для сборки напечатана!");
                                    else
                                        functionMessageShow(2, "Справка-обоснование для испытаний напечатана!");
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = ""));
                                button215.BeginInvoke((MethodInvoker)(() => this.button215.Enabled = true));
                                button214.BeginInvoke((MethodInvoker)(() => this.button214.Enabled = true));
                                button213.BeginInvoke((MethodInvoker)(() => this.button213.Enabled = true));
                                button212.BeginInvoke((MethodInvoker)(() => this.button212.Enabled = true));
                                button274.BeginInvoke((MethodInvoker)(() => this.button274.Enabled = true));
                                button286.BeginInvoke((MethodInvoker)(() => this.button286.Enabled = true));
                                button218.BeginInvoke((MethodInvoker)(() => this.button218.Enabled = true));
                                button287.BeginInvoke((MethodInvoker)(() => this.button287.Enabled = true));
                                button288.BeginInvoke((MethodInvoker)(() => this.button288.Enabled = true));
                                button289.BeginInvoke((MethodInvoker)(() => this.button289.Enabled = true));
                            }
                        }).Start();
                    }
                    else
                        functionMessageShow(1, "Не найдена потребность в комплектующих элементах!");
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //Результ потребности в КЭ
        private void button213_Click(object sender, EventArgs e)
        {
            Form21 form21 = new Form21(true, true);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                functionQueryPlIspResult(yearPrintResult, numberPrintResult);
                //functionQueryVK();
                functionQueryNoneVk();
                potrVKEResultList.Clear();
                if (form21.typePrint == 1)
                    functionPotrVKEResultForming(yearPrintResult, false);
                else
                    functionPotrVKEResultForming(yearPrintResult, true);
                if (plIspResultList.Count > 0)
                {
                    if (potrVKEResultList.Count > 0)
                    {
                        bool printProverka = true;
                        button215.Enabled = false;
                        button214.Enabled = false;
                        button213.Enabled = false;
                        button212.Enabled = false;
                        button274.Enabled = false;
                        button286.Enabled = false;
                        button218.Enabled = false;
                        button287.Enabled = false;
                        button288.Enabled = false;
                        button289.Enabled = false;
                        //Количество экземпляров
                        string countEkz = form21.textBox2.Text;
                        //Учетный номер
                        string uchNumber = form21.textBox1.Text;
                        //WORD
                        label286.Text = "Печать: подготовка документа к печати";
                        new Thread(() =>
                        {
                            Word.Application oWord = new Word.Application();
                            oWord.Visible = false;
                            try
                            {
                                //Открытие документа
                                Word.Document wordDocument;
                                if (form21.typePrint == 1)
                                    wordDocument = oWord.Documents.Open(templateFileNameWordPotrVKESbResult);
                                else
                                    wordDocument = oWord.Documents.Open(templateFileNameWordPotrVKEIspResult);
                                //Поиск и замена текста
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                                functionReplaceInText(wordDocument, oWord, "{year}", yearPrintResult);
                                //Добавление в файл таблицы
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание титульного листа"));
                                Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                                //Добавление в файл таблицы
                                var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                wordDocument.Tables.Add(range, 1, 7, autoFitBehavior);
                                Word.Table oTable = wordDocument.Tables[1];
                                string[] nameHeaderTable = { "№\nп/п", "Код и наименование\nкомплектующего\nэлемента", "Ед. измерения", "Поставщик", "Цена,\nт.р.", "Потребность в КЭ", "Примечание", "год", "1 кв", "2 кв", "3 кв", "4 кв" };
                                for (int i = 0; i < oTable.Columns.Count; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Text = nameHeaderTable[i];
                                    wordCellRange.Rows.HeadingFormat = -1;
                                    wordCellRange.Font.Name = "Times New Roman";
                                }
                                oTable.Cell(1, 1).Width = 35;
                                oTable.Cell(1, 2).Width = 120;
                                oTable.Cell(1, 3).Width = 60;
                                oTable.Cell(1, 4).Width = 80;
                                oTable.Cell(1, 5).Width = 50;
                                oTable.Cell(1, 6).Width = 320;
                                oTable.Cell(1, 7).Width = 120;
                                oTable.Cell(1, 6).Split(2, 1);
                                oTable.Cell(2, 6).Split(1, 5);
                                oTable.Cell(2, 6).Width = 80;
                                oTable.Cell(2, 7).Width = 60;
                                oTable.Cell(2, 8).Width = 60;
                                oTable.Cell(2, 9).Width = 60;
                                oTable.Cell(2, 10).Width = 60;
                                oTable.Cell(1, 7).Merge(oTable.Cell(2, 11));
                                for (int i = 6; i < 11; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Text = nameHeaderTable[i + 1];
                                    wordCellRange.Rows.HeadingFormat = -1;
                                }
                                int positionRows = 3;
                                int printVKECount = 1;
                                var sortedList = potrVKEResultList.OrderBy(a => a.codeElementPotrVKEKontrol);
                                foreach (ClassPotrVKEKontrol vke in sortedList)
                                {
                                    label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: печать потребности " + printVKECount + " из " + potrVKEResultList.Count));
                                    printVKECount++;
                                    oTable.Rows.Add();
                                    for (int j = 0; j < 11; j++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                        wordCellRange.Rows.HeadingFormat = 0;
                                        if (j == 0)
                                            wordCellRange.Text = Convert.ToString(printVKECount - 1);
                                        if (j == 1)
                                        {
                                            wordCellRange.Text = "     " + vke.codeElementPotrVKEKontrol + "\n" + vke.pictureElementPotrVKEKontrol + "\n" + vke.indexElementPotrVKEKontrol + "\n" + vke.nameElementPotrVKEKontrol;
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                        }
                                        if (j == 2)
                                            wordCellRange.Text = vke.codeEdIzmPotrVKEKontrol + "\n" + vke.nameEdIzmPotrVKEKontrol;
                                        if (j == 3)
                                            wordCellRange.Text = vke.codeFactoryPostPotrVKEKontrol + "\n" + vke.nameFactoryPostPotrVKEKontrol;
                                        double cenaKE = 0;
                                        foreach (ClassCenaKE cena in cenaKEList)
                                            if (cena.codeElementKE == vke.codeElementPotrVKEKontrol && cena.codeEdIzmKE == vke.codeEdIzmPotrVKEKontrol)
                                                cenaKE = Math.Round(Convert.ToDouble(cena.cenaKE) / 1000, 2);
                                        if (j == 4)
                                            if (cenaKE > 0)
                                                wordCellRange.Text = "\n" + String.Format("{0:0.00}", cenaKE);
                                        if (j == 5)
                                            if (cenaKE > 0 && vke.vYearPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vYearPotrVKEKontrol) + "\n" + String.Format("{0:0.00}", Convert.ToDouble(vke.vYearPotrVKEKontrol) * cenaKE);
                                            else if (vke.vYearPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vYearPotrVKEKontrol);
                                        if (j == 6)
                                            if (cenaKE > 0 && vke.vOnePotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vOnePotrVKEKontrol) + "\n" + String.Format("{0:0.00}", Convert.ToDouble(vke.vOnePotrVKEKontrol) * cenaKE);
                                            else if (vke.vOnePotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vOnePotrVKEKontrol);
                                        if (j == 7)
                                            if (cenaKE > 0 && vke.vTwoPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vTwoPotrVKEKontrol) + "\n" + String.Format("{0:0.00}", Convert.ToDouble(vke.vTwoPotrVKEKontrol) * cenaKE);
                                            else if (vke.vTwoPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vTwoPotrVKEKontrol);
                                        if (j == 8)
                                            if (cenaKE > 0 && vke.vThrePotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vThrePotrVKEKontrol) + "\n" + String.Format("{0:0.00}", Convert.ToDouble(vke.vThrePotrVKEKontrol) * cenaKE);
                                            else if (vke.vThrePotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vThrePotrVKEKontrol);
                                        if (j == 9)
                                            if (cenaKE > 0 && vke.vThourPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vThourPotrVKEKontrol) + "\n" + String.Format("{0:0.00}", Convert.ToDouble(vke.vThourPotrVKEKontrol) * cenaKE);
                                            else if (vke.vThourPotrVKEKontrol > 0)
                                                wordCellRange.Text = Convert.ToString(vke.vThourPotrVKEKontrol);
                                        if (j == 10)
                                            wordCellRange.Text = "";
                                    }
                                    positionRows++;
                                }
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание экземпляров"));
                                //Создание экземпляров
                                wordDocument.Range().Copy();
                                var rangeAllDocumentEkz = wordDocument.Content;
                                rangeAllDocumentEkz.Find.ClearFormatting();
                                for (int j = 0; j < plIspResultList.Count; j++)
                                {
                                    functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                                }
                                for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                                {
                                    //В конец документа
                                    object what = Word.WdGoToItem.wdGoToLine;
                                    object which = Word.WdGoToDirection.wdGoToLast;
                                    Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                    //Создаем разрыв РАЗДЕЛА (не страниц)
                                    endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                    //Вставляем
                                    endRange.Paste();
                                    rangeAllDocumentEkz = wordDocument.Content;
                                    rangeAllDocumentEkz.Find.ClearFormatting();
                                    rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                }
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: сохранение документа"));
                                //Сохранение
                                dateNowFileName = DateTime.Now;
                                string strSaveName = Convert.ToString(dateNowFileName);
                                strSaveName = strSaveName.Replace(':', '-');
                                if (form21.typePrint == 1)
                                    wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\Результ ПОТРЕБНОСТИ ДЛЯ СБОРКИ " + strSaveName + ".docx");
                                else
                                    wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\Результ ПОТРЕБНОСТИ ДЛЯ ИСПЫТАНИЙ " + strSaveName + ".docx");
                                wordDocument.Close();
                            }
                            catch
                            {
                                MessageBox.Show("Ошибка!");
                                printProverka = false;
                            }
                            finally
                            {
                                oWord.Quit();
                                if (printProverka)
                                    if (form21.typePrint == 1)
                                        functionMessageShow(2, "Результ потребности для сборки напечатан!");
                                    else
                                        functionMessageShow(2, "Результ потребности для испытаний напечатан!");
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = ""));
                                button215.BeginInvoke((MethodInvoker)(() => this.button215.Enabled = true));
                                button214.BeginInvoke((MethodInvoker)(() => this.button214.Enabled = true));
                                button213.BeginInvoke((MethodInvoker)(() => this.button213.Enabled = true));
                                button212.BeginInvoke((MethodInvoker)(() => this.button212.Enabled = true));
                                button274.BeginInvoke((MethodInvoker)(() => this.button274.Enabled = true));
                                button286.BeginInvoke((MethodInvoker)(() => this.button286.Enabled = true));
                                button218.BeginInvoke((MethodInvoker)(() => this.button218.Enabled = true));
                                button287.BeginInvoke((MethodInvoker)(() => this.button287.Enabled = true));
                                button288.BeginInvoke((MethodInvoker)(() => this.button288.Enabled = true));
                                button289.BeginInvoke((MethodInvoker)(() => this.button289.Enabled = true));
                            }
                        }).Start();
                    }
                    else
                        functionMessageShow(1, "Не найдена потребность в комплектующих элементах!");
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //Матчасть
        private void button212_Click(object sender, EventArgs e)
        {
            Form21 form21 = new Form21(false, true);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                functionQueryPlIspResult(yearPrintResult, numberPrintResult);
                functionCreateMC();
                if (plIspResultList.Count > 0)
                {
                    if (potrMCList.Count > 0)
                    {
                        bool printProverka = true;
                        button215.Enabled = false;
                        button214.Enabled = false;
                        button213.Enabled = false;
                        button212.Enabled = false;
                        button274.Enabled = false;
                        button286.Enabled = false;
                        button218.Enabled = false;
                        button287.Enabled = false;
                        button288.Enabled = false;
                        button289.Enabled = false;
                        //Количество экземпляров
                        string countEkz = form21.textBox2.Text;
                        //Учетный номер
                        string uchNumber = form21.textBox1.Text;
                        //WORD
                        label286.Text = "Печать: подготовка документа к печати";
                        new Thread(() =>
                        {
                            Word.Application oWord = new Word.Application();
                            oWord.Visible = false;
                            try
                            {
                                //Открытие документа
                                Word.Document wordDocument;
                                if (form21.typePrint == 1)
                                    wordDocument = oWord.Documents.Open(templateFileNameWordPotrMCResult);
                                else if (form21.typePrint == 2)
                                    wordDocument = oWord.Documents.Open(templateFileNameWordMCResult);
                                else
                                    wordDocument = oWord.Documents.Open(templateFileNameWordCallMCResult);
                                //Поиск и замена текста
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                                functionReplaceInText(wordDocument, oWord, "{year}", yearPrintResult);
                                //Добавление в файл таблицы
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание титульного листа"));
                                Word.Table oTable = functionCreateNewTableInMC(wordDocument, form21.typePrint);
                                int positionRows = 3;
                                int printMCCount = 1;
                                if (form21.typePrint == 1)
                                {
                                    //Справка-обоснование мат части
                                    var sortedList = potrMCList.OrderBy(a => a.codeMC5);
                                    foreach (ClassPotrMC mc in sortedList)
                                    {
                                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: печать справки-обоснование " + printMCCount + " из " + potrMCList.Count));
                                        printMCCount++;
                                        oTable.Rows.Add();
                                        for (int j = 0; j < 9; j++)
                                        {
                                            Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                            wordCellRange.Rows.HeadingFormat = 0;
                                            if (j == 0)
                                                wordCellRange.Text = Convert.ToString(printMCCount - 1);
                                            if (j == 1)
                                                wordCellRange.Text = mc.codeMC5 + "\n" + mc.fullNameMC;
                                            if (j == 2)
                                            {
                                                int countPosMC = 0;
                                                double potrMCFond = 0;
                                                var sortedList2 = mc.plIspList.OrderBy(a => a.codeElementPlIspKontrol).ThenBy(b => b.codeVidIspPlIspKontrol);
                                                foreach (ClassPlIspKontrol pl in sortedList2)
                                                {
                                                    for (int k = 3; k < 10; k++)
                                                    {
                                                        wordCellRange = oTable.Cell(positionRows, k).Range;
                                                        wordCellRange.Rows.HeadingFormat = 0;
                                                        if (k == 3)
                                                        {
                                                            wordCellRange.Text = "     " + pl.codeElementPlIspKontrol + "\n" + pl.pictureElementPlIspKontrol + "\n" + pl.indexElementPlIspKontrol + "\n" + pl.nameElementPlIspKontrol;
                                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                                        }
                                                        if (k == 4)
                                                            wordCellRange.Text = pl.codeFactoryPlIspKontrol + "\n" + pl.nameFactoryPlIspKontrol;
                                                        if (k == 5)
                                                            wordCellRange.Text = pl.codeVidIspPlIspKontrol + "\n" + pl.nameVidIspPlIspKontrol;
                                                        if (k == 6)
                                                            wordCellRange.Text = pl.vYearPlIspKontrol;
                                                        if (k == 7)
                                                            wordCellRange.Text = "";
                                                        if (k == 8)
                                                            wordCellRange.Text = mc.liveMC[countPosMC];
                                                        if (k == 9)
                                                        {
                                                            if (mc.liveMC[countPosMC].Length > 0 && mc.koefShot[countPosMC].Length > 0 && pl.vYearPlIspKontrol.Length > 0)
                                                            {
                                                                double prMCPotr = Math.Round(Convert.ToDouble(pl.vYearPlIspKontrol) * Convert.ToDouble(mc.koefShot[countPosMC]) * 1.4 / Convert.ToDouble(mc.liveMC[countPosMC]), 2);
                                                                if (prMCPotr > 0)
                                                                {
                                                                    wordCellRange.Text = Convert.ToString(prMCPotr);
                                                                    potrMCFond += prMCPotr;
                                                                }
                                                                else
                                                                {
                                                                    wordCellRange.Text = "0,01";
                                                                    potrMCFond += 0.01;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    countPosMC++;
                                                    oTable.Rows.Add();
                                                    positionRows++;
                                                }
                                                wordCellRange = oTable.Cell(positionRows, 8).Range;
                                                wordCellRange.Font.Bold = 1;
                                                wordCellRange.Text = "Итого";
                                                wordCellRange = oTable.Cell(positionRows, 9).Range;
                                                wordCellRange.Text = Convert.ToString(Math.Ceiling(potrMCFond));
                                                wordCellRange.Font.Bold = 0;
                                                positionRows++;
                                            }
                                        }
                                        positionRows++;
                                    }
                                }
                                else
                                {
                                    if (form21.typePrint == 2)
                                    {
                                        var sortedList = potrMCList.OrderBy(a => a.codeMC5);
                                        foreach (ClassPotrMC mc in sortedList)
                                        {
                                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: печать матчасти Результ плана " + printMCCount + " из " + potrMCFactorysList.Count));
                                            printMCCount++;
                                            oTable.Rows.Add();
                                            int realySummMC = 0;
                                            int summYearMC = 0;
                                            int realOneMC = 0;
                                            for (int j = 1; j < 10; j++)
                                            {
                                                Word.Range wordCellRange = oTable.Cell(positionRows, j).Range;
                                                wordCellRange.Rows.HeadingFormat = 0;
                                                if (j == 1)
                                                    wordCellRange.Text = Convert.ToString(printMCCount - 1);
                                                if (j == 2)
                                                    wordCellRange.Text = mc.codeMC5 + "\n" + mc.nameMC + "\n" + mc.fullNameMC;
                                                if (j == 3)
                                                    wordCellRange.Text = mc.nameFactoryPost;
                                                if (j == 4)
                                                {
                                                    double promPotrMCYear = 0;
                                                    foreach (string strMC in mc.vYearPotrMC)
                                                        promPotrMCYear += Convert.ToDouble(strMC);
                                                    wordCellRange.Text = Convert.ToString(Math.Ceiling(promPotrMCYear));
                                                    summYearMC = Convert.ToInt32(Math.Ceiling(promPotrMCYear));
                                                }
                                                if (j == 5)
                                                {
                                                    double promPotrMCOne = 0;
                                                    foreach (string strMC in mc.vOnePotrMC)
                                                        promPotrMCOne += Convert.ToDouble(strMC);
                                                    if (Math.Floor(promPotrMCOne) > 0)
                                                        wordCellRange.Text = Convert.ToString(Math.Floor(promPotrMCOne));
                                                    realySummMC += Convert.ToInt32(Math.Floor(promPotrMCOne));
                                                    realOneMC = Convert.ToInt32(Math.Floor(promPotrMCOne));
                                                }
                                                if (j == 6)
                                                {
                                                    double promPotrMCTwo = 0;
                                                    foreach (string strMC in mc.vTwoPotrMC)
                                                        promPotrMCTwo += Convert.ToDouble(strMC);
                                                    if (Math.Floor(promPotrMCTwo) > 0)
                                                        wordCellRange.Text = Convert.ToString(Math.Floor(promPotrMCTwo));
                                                    realySummMC += Convert.ToInt32(Math.Floor(promPotrMCTwo));
                                                }
                                                if (j == 7)
                                                {
                                                    double promPotrMCThree = 0;
                                                    foreach (string strMC in mc.vThreePotrMC)
                                                        promPotrMCThree += Convert.ToDouble(strMC);
                                                    if (Math.Floor(promPotrMCThree) > 0)
                                                        wordCellRange.Text = Convert.ToString(Math.Floor(promPotrMCThree));
                                                    realySummMC += Convert.ToInt32(Math.Floor(promPotrMCThree));
                                                }
                                                if (j == 8)
                                                {
                                                    double promPotrMCThour = 0;
                                                    foreach (string strMC in mc.vThourPotrMC)
                                                        promPotrMCThour += Convert.ToDouble(strMC);
                                                    if (Math.Floor(promPotrMCThour) > 0)
                                                        wordCellRange.Text = Convert.ToString(Math.Floor(promPotrMCThour));
                                                    realySummMC += Convert.ToInt32(Math.Floor(promPotrMCThour));
                                                    int raz = summYearMC - realySummMC;
                                                    wordCellRange = oTable.Cell(positionRows, 5).Range;
                                                    wordCellRange.Text = Convert.ToString(realOneMC + raz);
                                                }
                                                if (j == 9)
                                                    wordCellRange.Text = "";
                                            }
                                            positionRows++;
                                        }
                                    }
                                    else
                                    {
                                        foreach (ClassPotrMCFactorys mcf in potrMCFactorysList)
                                        {
                                            var range = wordDocument.Content;
                                            range.Find.ClearFormatting();
                                            range.Find.Execute(FindText: "{factoryPost}", ReplaceWith: mcf.nameFactoryPost);
                                            positionRows += 2;
                                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: печать заявок " + printMCCount + " из " + potrMCFactorysList.Count));
                                            printMCCount++;
                                            oTable.Rows.Add();
                                            int realySummMC = 0;
                                            int summYearMC = 0;
                                            int realOneMC = 0;
                                            int printMCFactorysCount = 1;
                                            foreach (ClassPotrMC mc in mcf.mcList)
                                            {
                                                for (int j = 1; j < 14; j++)
                                                {
                                                    Word.Range wordCellRange = oTable.Cell(positionRows, j).Range;
                                                    wordCellRange.Rows.HeadingFormat = 0;
                                                    if (j == 1)
                                                        wordCellRange.Text = Convert.ToString(printMCFactorysCount);
                                                    if (j == 2)
                                                        wordCellRange.Text = mc.fullNameMC;
                                                    if (j == 3)
                                                        wordCellRange.Text = mc.nameEdIzm;
                                                    if (j == 4)
                                                        wordCellRange.Text = mc.codeFactoryPost;
                                                    if (j == 5)
                                                        wordCellRange.Text = mc.codeMC5;
                                                    if (j == 6)
                                                        wordCellRange.Text = mc.codeEdIzm;
                                                    if (j == 7)
                                                        wordCellRange.Text = mc.cenaMC;
                                                    if (j == 8)
                                                        wordCellRange.Text = mc.fondMC;
                                                    if (j == 9)
                                                    {
                                                        double promPotrMCYear = 0;
                                                        foreach (string strMC in mc.vYearPotrMC)
                                                            promPotrMCYear += Convert.ToDouble(strMC);
                                                        wordCellRange.Text = Convert.ToString(Math.Ceiling(promPotrMCYear));
                                                        summYearMC = Convert.ToInt32(Math.Ceiling(promPotrMCYear));
                                                    }
                                                    if (j == 10)
                                                    {
                                                        double promPotrMCOne = 0;
                                                        foreach (string strMC in mc.vOnePotrMC)
                                                            promPotrMCOne += Convert.ToDouble(strMC);
                                                        if (Math.Floor(promPotrMCOne) > 0)
                                                            wordCellRange.Text = Convert.ToString(Math.Floor(promPotrMCOne));
                                                        realySummMC += Convert.ToInt32(Math.Floor(promPotrMCOne));
                                                        realOneMC = Convert.ToInt32(Math.Floor(promPotrMCOne));
                                                    }
                                                    if (j == 11)
                                                    {
                                                        double promPotrMCTwo = 0;
                                                        foreach (string strMC in mc.vTwoPotrMC)
                                                            promPotrMCTwo += Convert.ToDouble(strMC);
                                                        if (Math.Floor(promPotrMCTwo) > 0)
                                                            wordCellRange.Text = Convert.ToString(Math.Floor(promPotrMCTwo));
                                                        realySummMC += Convert.ToInt32(Math.Floor(promPotrMCTwo));
                                                    }
                                                    if (j == 12)
                                                    {
                                                        double promPotrMCThree = 0;
                                                        foreach (string strMC in mc.vThreePotrMC)
                                                            promPotrMCThree += Convert.ToDouble(strMC);
                                                        if (Math.Floor(promPotrMCThree) > 0)
                                                            wordCellRange.Text = Convert.ToString(Math.Floor(promPotrMCThree));
                                                        realySummMC += Convert.ToInt32(Math.Floor(promPotrMCThree));
                                                    }
                                                    if (j == 13)
                                                    {
                                                        double promPotrMCThour = 0;
                                                        foreach (string strMC in mc.vThourPotrMC)
                                                            promPotrMCThour += Convert.ToDouble(strMC);
                                                        if (Math.Floor(promPotrMCThour) > 0)
                                                            wordCellRange.Text = Convert.ToString(Math.Floor(promPotrMCThour));
                                                        realySummMC += Convert.ToInt32(Math.Floor(promPotrMCThour));
                                                        int raz = summYearMC - realySummMC;
                                                        wordCellRange = oTable.Cell(positionRows, 10).Range;
                                                        wordCellRange.Text = Convert.ToString(realOneMC + raz);
                                                    }
                                                }
                                                printMCFactorysCount++;
                                                if (printMCFactorysCount != mcf.mcList.Count + 1)
                                                    oTable.Rows.Add();
                                                positionRows++;
                                            }
                                            //Добавление новой страницы
                                            if (printMCCount - 1 != potrMCFactorysList.Count)
                                            {
                                                //В конец документа
                                                object what = Word.WdGoToItem.wdGoToLine;
                                                object which = Word.WdGoToDirection.wdGoToLast;
                                                Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                                //Создаем разрыв страниц
                                                endRange.InsertBreak();
                                                //Добавляем параграф
                                                range = wordDocument.GoTo(ref what, ref which);
                                                range.Text = "\t\t\t\t\t\tпредприятие-поставщик:  {factoryPost}";
                                                wordDocument.Paragraphs.Add();
                                                wordDocument.Paragraphs.Add();
                                                wordDocument.Paragraphs.Add();
                                                //Создаем новую таблицу
                                                oTable = functionCreateNewTableInMC(wordDocument, form21.typePrint);
                                            }
                                        }
                                    }
                                }
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание экземпляров"));
                                //Создание экземпляров
                                wordDocument.Range().Copy();
                                var rangeAllDocumentEkz = wordDocument.Content;
                                rangeAllDocumentEkz.Find.ClearFormatting();
                                for (int j = 0; j < plIspResultList.Count; j++)
                                {
                                    functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                                }
                                for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                                {
                                    //В конец документа
                                    object what = Word.WdGoToItem.wdGoToLine;
                                    object which = Word.WdGoToDirection.wdGoToLast;
                                    Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                    //Создаем разрыв РАЗДЕЛА (не страниц)
                                    endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                    //Вставляем
                                    endRange.Paste();
                                    rangeAllDocumentEkz = wordDocument.Content;
                                    rangeAllDocumentEkz.Find.ClearFormatting();
                                    rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                }
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: сохранение документа"));
                                //Сохранение
                                dateNowFileName = DateTime.Now;
                                string strSaveName = Convert.ToString(dateNowFileName);
                                strSaveName = strSaveName.Replace(':', '-');
                                if (form21.typePrint == 1)
                                    wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\СПРАВКА-ОБОСНОВАНИЕ РезультА ПОТРЕБНОСТИ В МАТЧАСТИ " + strSaveName + ".docx");
                                else if (form21.typePrint == 2)
                                    wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\МАТЧАСТЬ Результ ПЛАНА " + strSaveName + ".docx");
                                else
                                    wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\ЗАЯВКИ НА МАТЧАСТЬ " + strSaveName + ".docx");
                                wordDocument.Close();
                            }
                            catch
                            {
                                MessageBox.Show("Ошибка!");
                                printProverka = false;
                            }
                            finally
                            {
                                oWord.Quit();
                                if (printProverka)
                                    if (form21.typePrint == 1)
                                        functionMessageShow(2, "Справка-обоснование матчасти напечатана!");
                                    else if (form21.typePrint == 2)
                                        functionMessageShow(2, "Матчасть Результ плана напечатана!");
                                    else
                                        functionMessageShow(2, "Заявки на специальные комплектующие изделия напечатаны!");
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = ""));
                                button215.BeginInvoke((MethodInvoker)(() => this.button215.Enabled = true));
                                button214.BeginInvoke((MethodInvoker)(() => this.button214.Enabled = true));
                                button213.BeginInvoke((MethodInvoker)(() => this.button213.Enabled = true));
                                button212.BeginInvoke((MethodInvoker)(() => this.button212.Enabled = true));
                                button274.BeginInvoke((MethodInvoker)(() => this.button274.Enabled = true));
                                button286.BeginInvoke((MethodInvoker)(() => this.button286.Enabled = true));
                                button218.BeginInvoke((MethodInvoker)(() => this.button218.Enabled = true));
                                button287.BeginInvoke((MethodInvoker)(() => this.button287.Enabled = true));
                                button288.BeginInvoke((MethodInvoker)(() => this.button288.Enabled = true));
                                button289.BeginInvoke((MethodInvoker)(() => this.button289.Enabled = true));
                            }
                        }).Start();
                    }
                    else
                        functionMessageShow(1, "Не найдена потребность в матчасти!");
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //Функция добавления таблицы в документ
        private Word.Table functionCreateNewTableInMC(Word.Document wordDocument, int typePrint) 
        {
            Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
            //Добавление в файл таблицы
            var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
            if (typePrint == 1)
                wordDocument.Tables.Add(range, 1, 8, autoFitBehavior);
            else if (typePrint == 2)
                wordDocument.Tables.Add(range, 1, 5, autoFitBehavior);
            else
                wordDocument.Tables.Add(range, 1, 9, autoFitBehavior);
            Word.Table oTable = wordDocument.Tables[wordDocument.Tables.Count];
            string[] nameHeaderTable1 = { "№\nп/п", "Код\nи наименование\nматчасти", "Код и наименование\nиспытуемого\nэлемента", "Изготовитель\nиспытуемого\nэлемента", "Код и\nнаименование\nвида\nиспытания", "План испытаний(первичных)", "Живучесть\nматчасти", "Испрашиваемый\nфонд", "планируемого\nгода", "планируемого\n+10%" };
            string[] nameHeaderTable2 = { "№ п/п", "Матчасть", "Поставщик", "Результная потребность", "Примечание", "год", "1 кв", "2 кв", "3 кв", "4 кв" };
            string[] nameHeaderTable3 = { "№\nп/п", "Наименование\nизделия,тип\nчертеж", "Ед.\nизм.", "Шифр\nпред-\nприят\nпост.", "Шифр\nкомпле\nтующ.\nиздел.", "Ши-\nфр\nед.\nизм", "Цена\nки в руб.", "Фонд\n2010\nр.г.", "Потребн-ть на ГП Результ/вр", "все-\nго", "в т.ч. по кварталам" };
            for (int i = 0; i < oTable.Columns.Count; i++)
            {
                Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                wordCellRange.Rows.HeadingFormat = -1;
                wordCellRange.Font.Name = "Times New Roman";
                if (typePrint == 1)
                    wordCellRange.Text = nameHeaderTable1[i];
                else if (typePrint == 2)
                    wordCellRange.Text = nameHeaderTable2[i];
                else
                    wordCellRange.Text = nameHeaderTable3[i];
            }
            //Формат таблицы
            if (typePrint == 1)
            {
                oTable.Cell(1, 1).Width = 35;
                oTable.Cell(1, 3).Width = 125;
                oTable.Cell(1, 6).Split(2, 1);
                oTable.Cell(2, 6).Split(1, 2);
            }
            else if (typePrint == 2)
            {
                oTable.Cell(1, 1).Width = 40;
                oTable.Cell(1, 2).Width = 200;
                oTable.Cell(1, 3).Width = 200;
                oTable.Cell(1, 5).Width = 115;
                oTable.Cell(1, 4).Split(2, 1);
                oTable.Cell(2, 4).Split(1, 5);
            }
            else
            {
                oTable.Cell(1, 1).Width = 35;
                oTable.Cell(1, 2).Width = 120;
                oTable.Cell(1, 3).Width = 35;
                oTable.Cell(1, 4).Width = 50;
                oTable.Cell(1, 5).Width = 50;
                oTable.Cell(1, 6).Width = 35;
                oTable.Cell(1, 7).Width = 60;
                oTable.Cell(1, 8).Width = 50;
                oTable.Cell(1, 9).Width = 175;
                oTable.Cell(1, 9).Split(2, 1);
                oTable.Cell(2, 9).Split(1, 2);
                oTable.Cell(2, 9).Width = 35;
                oTable.Cell(2, 10).Width = 140;
                oTable.Cell(2, 10).Split(2, 1);
                oTable.Cell(3, 10).Split(1, 4);
                oTable.Rows.Add();
            }
            //Дозаполнения заголовка
            if (typePrint == 1)
            {
                for (int i = 6; i < 8; i++)
                {
                    Word.Range wordCellRange = oTable.Cell(2, i).Range;
                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                    wordCellRange.Text = nameHeaderTable1[i + 2];
                    wordCellRange.Rows.HeadingFormat = -1;
                }
            }
            else if (typePrint == 2)
            {
                for (int i = 4; i < 9; i++)
                {
                    Word.Range wordCellRange = oTable.Cell(2, i).Range;
                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                    wordCellRange.Text = nameHeaderTable2[i + 1];
                    wordCellRange.Rows.HeadingFormat = -1;
                }
            }
            else
            {
                for (int i = 9; i < 11; i++)
                {
                    Word.Range wordCellRange = oTable.Cell(2, i).Range;
                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                    wordCellRange.Text = nameHeaderTable3[i];
                    wordCellRange.Rows.HeadingFormat = -1;
                }
                for (int i = 10; i < 14; i++)
                {
                    Word.Range wordCellRange = oTable.Cell(3, i).Range;
                    wordCellRange.Text = Convert.ToString(i - 9);
                    wordCellRange.Rows.HeadingFormat = -1;
                }
                Word.Range wordCellRange2 = oTable.Cell(4, 1).Range;
                wordCellRange2.Rows.HeadingFormat = -1;
                wordCellRange2.Text = "а";
                wordCellRange2 = oTable.Cell(4, 2).Range;
                wordCellRange2.Text = "б";
                wordCellRange2 = oTable.Cell(4, 3).Range;
                wordCellRange2.Text = "в";
                wordCellRange2 = oTable.Cell(4, 4).Range;
                wordCellRange2.Text = "г";
                for (int i = 5; i < 14; i++)
                {
                    Word.Range wordCellRange = oTable.Cell(4, i).Range;
                    wordCellRange.Text = Convert.ToString(i - 4);
                }
            }
            return oTable;
        }

        private void functionCreateMC()
        {
            functionQueryFI();
            potrMCList.Clear();
            potrMCFactorysList.Clear();
            //Справка-обоснование
            foreach (ClassPlIspKontrol pl in plIspResultList)
            {
                if (pl.codeVidIspPlIspKontrol != "098" && pl.codeVidIspPlIspKontrol != "099" && pl.codeVidIspPlIspKontrol != "205" && pl.codeVidIspPlIspKontrol != "206" && pl.codeVidIspPlIspKontrol != "207" && pl.codeVidIspPlIspKontrol != "239")
                {
                    foreach (ClassFI fi in fiList)
                    {
                        if (fi.codeElementFIMespl == pl.codeElementPlIspKontrol && fi.codeVidIspFIMespl == pl.codeVidIspPlIspKontrol)
                        {
                            bool proverkaSystemInList = true;
                            bool proverkaStvolInList = true;
                            bool proverkaStandInList = true;
                            foreach (ClassPotrMC mc in potrMCList)
                            {
                                if (mc.codeMC3 == fi.codeSysFIMespl)
                                {
                                    if (fi.liveSystemFIMespl.Length > 0 && fi.koefPrivShotFIMespl.Length > 0)
                                    {
                                        if (pl.vYearPlIspKontrol.Length > 0)
                                            mc.vYearPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vYearPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveSystemFIMespl)));
                                        if (pl.vOnePlIspKontrol.Length > 0)
                                            mc.vOnePotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vOnePlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveSystemFIMespl)));
                                        if (pl.vTwoPlIspKontrol.Length > 0)
                                            mc.vTwoPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vTwoPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveSystemFIMespl)));
                                        if (pl.vThrePlIspKontrol.Length > 0)
                                            mc.vThreePotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vThrePlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveSystemFIMespl)));
                                        if (pl.vThourPlIspKontrol.Length > 0)
                                            mc.vThourPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vThourPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveSystemFIMespl)));
                                    }
                                    else
                                    {
                                        mc.vYearPotrMC.Add("0");
                                        mc.vOnePotrMC.Add("0");
                                        mc.vTwoPotrMC.Add("0");
                                        mc.vThreePotrMC.Add("0");
                                        mc.vThourPotrMC.Add("0");
                                    }
                                    mc.koefShot.Add(fi.koefPrivShotFIMespl);
                                    mc.liveMC.Add(fi.liveSystemFIMespl);
                                    mc.plIspList.Add(pl);
                                    proverkaSystemInList = false;
                                    break;
                                }
                                if (mc.codeMC3 == fi.codeNameStFIMespl)
                                {
                                    if (fi.liveStFIMespl.Length > 0 && fi.koefPrivShotFIMespl.Length > 0)
                                    {
                                        if (pl.vYearPlIspKontrol.Length > 0)
                                            mc.vYearPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vYearPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStFIMespl)));
                                        if (pl.vOnePlIspKontrol.Length > 0)
                                            mc.vOnePotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vOnePlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStFIMespl)));
                                        if (pl.vTwoPlIspKontrol.Length > 0)
                                            mc.vTwoPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vTwoPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStFIMespl)));
                                        if (pl.vThrePlIspKontrol.Length > 0)
                                            mc.vThreePotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vThrePlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStFIMespl)));
                                        if (pl.vThourPlIspKontrol.Length > 0)
                                            mc.vThourPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vThourPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStFIMespl)));
                                    }
                                    else
                                    {
                                        mc.vYearPotrMC.Add("0");
                                        mc.vOnePotrMC.Add("0");
                                        mc.vTwoPotrMC.Add("0");
                                        mc.vThreePotrMC.Add("0");
                                        mc.vThourPotrMC.Add("0");
                                    }
                                    mc.koefShot.Add(fi.koefPrivShotFIMespl);
                                    mc.liveMC.Add(fi.liveStFIMespl);
                                    mc.plIspList.Add(pl);
                                    proverkaStvolInList = false;
                                    break;
                                }
                                if (mc.codeMC3 == fi.codeNameStandFIMespl)
                                {
                                    if (fi.liveStandFIMespl.Length > 0 && fi.koefPrivShotFIMespl.Length > 0)
                                    {
                                        if (pl.vYearPlIspKontrol.Length > 0)
                                            mc.vYearPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vYearPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStandFIMespl)));
                                        if (pl.vOnePlIspKontrol.Length > 0)
                                            mc.vOnePotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vOnePlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStandFIMespl)));
                                        if (pl.vTwoPlIspKontrol.Length > 0)
                                            mc.vTwoPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vTwoPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStandFIMespl)));
                                        if (pl.vThrePlIspKontrol.Length > 0)
                                            mc.vThreePotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vThrePlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStandFIMespl)));
                                        if (pl.vThourPlIspKontrol.Length > 0)
                                            mc.vThourPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vThourPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStandFIMespl)));
                                    }
                                    else
                                    {
                                        mc.vYearPotrMC.Add("0");
                                        mc.vOnePotrMC.Add("0");
                                        mc.vTwoPotrMC.Add("0");
                                        mc.vThreePotrMC.Add("0");
                                        mc.vThourPotrMC.Add("0");
                                    }
                                    mc.koefShot.Add(fi.koefPrivShotFIMespl);
                                    mc.liveMC.Add(fi.liveStandFIMespl);
                                    mc.plIspList.Add(pl);
                                    proverkaStandInList = false;
                                    break;
                                }
                            }
                            if (potrMCList.Count == 0 || proverkaSystemInList)
                            {
                                if (fi.codeSysFIMespl != "000")
                                {
                                    foreach (ClassMC mc in mcList)
                                        if (mc.codeMC3 == fi.codeSysFIMespl)
                                        {
                                            ClassPotrMC newPotrMC = new ClassPotrMC();
                                            newPotrMC.codeMC3 = mc.codeMC3;
                                            newPotrMC.codeMC5 = mc.codeMC5;
                                            newPotrMC.nameMC = mc.socrName;
                                            newPotrMC.fullNameMC = mc.fullName;
                                            newPotrMC.codeFactoryPost = mc.codeFactory;
                                            newPotrMC.nameFactoryPost = mc.nameFactory;
                                            newPotrMC.innFactoryPost = mc.innFactory;
                                            newPotrMC.codeEdIzm = "796";
                                            newPotrMC.nameEdIzm = "шт.";
                                            newPotrMC.cenaMC = "";
                                            newPotrMC.fondMC = "";
                                            if (fi.liveSystemFIMespl.Length > 0 && fi.koefPrivShotFIMespl.Length > 0)
                                            {
                                                if (pl.vYearPlIspKontrol.Length > 0)
                                                    newPotrMC.vYearPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vYearPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveSystemFIMespl)));
                                                if (pl.vOnePlIspKontrol.Length > 0)
                                                    newPotrMC.vOnePotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vOnePlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveSystemFIMespl)));
                                                if (pl.vTwoPlIspKontrol.Length > 0)
                                                    newPotrMC.vTwoPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vTwoPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveSystemFIMespl)));
                                                if (pl.vThrePlIspKontrol.Length > 0)
                                                    newPotrMC.vThreePotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vThrePlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveSystemFIMespl)));
                                                if (pl.vThourPlIspKontrol.Length > 0)
                                                    newPotrMC.vThourPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vThourPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveSystemFIMespl)));
                                            }
                                            else
                                            {
                                                newPotrMC.vYearPotrMC.Add("0");
                                                newPotrMC.vOnePotrMC.Add("0");
                                                newPotrMC.vTwoPotrMC.Add("0");
                                                newPotrMC.vThreePotrMC.Add("0");
                                                newPotrMC.vThourPotrMC.Add("0");
                                            }
                                            newPotrMC.koefShot.Add(fi.koefPrivShotFIMespl);
                                            newPotrMC.liveMC.Add(fi.liveSystemFIMespl);
                                            newPotrMC.plIspList.Add(pl);
                                            potrMCList.Add(newPotrMC);
                                            break;
                                        }
                                }
                            }
                            if (potrMCList.Count == 0 || proverkaStvolInList)
                            {
                                if (fi.codeNameStFIMespl != "000")
                                {
                                    foreach (ClassMC mc in mcList)
                                        if (mc.codeMC3 == fi.codeNameStFIMespl)
                                        {
                                            ClassPotrMC newPotrMC = new ClassPotrMC();
                                            newPotrMC.codeMC3 = mc.codeMC3;
                                            newPotrMC.codeMC5 = mc.codeMC5;
                                            newPotrMC.nameMC = mc.socrName;
                                            newPotrMC.fullNameMC = mc.fullName;
                                            newPotrMC.codeFactoryPost = mc.codeFactory;
                                            newPotrMC.nameFactoryPost = mc.nameFactory;
                                            newPotrMC.innFactoryPost = mc.innFactory;
                                            newPotrMC.codeEdIzm = "796";
                                            newPotrMC.nameEdIzm = "шт.";
                                            newPotrMC.cenaMC = "";
                                            newPotrMC.fondMC = "";
                                            if (fi.liveStFIMespl.Length > 0 && fi.koefPrivShotFIMespl.Length > 0)
                                            {
                                                if (pl.vYearPlIspKontrol.Length > 0)
                                                    newPotrMC.vYearPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vYearPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStFIMespl)));
                                                if (pl.vOnePlIspKontrol.Length > 0)
                                                    newPotrMC.vOnePotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vOnePlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStFIMespl)));
                                                if (pl.vTwoPlIspKontrol.Length > 0)
                                                    newPotrMC.vTwoPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vTwoPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStFIMespl)));
                                                if (pl.vThrePlIspKontrol.Length > 0)
                                                    newPotrMC.vThreePotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vThrePlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStFIMespl)));
                                                if (pl.vThourPlIspKontrol.Length > 0)
                                                    newPotrMC.vThourPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vThourPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStFIMespl)));
                                            }
                                            else
                                            {
                                                newPotrMC.vYearPotrMC.Add("0");
                                                newPotrMC.vOnePotrMC.Add("0");
                                                newPotrMC.vTwoPotrMC.Add("0");
                                                newPotrMC.vThreePotrMC.Add("0");
                                                newPotrMC.vThourPotrMC.Add("0");
                                            }
                                            newPotrMC.koefShot.Add(fi.koefPrivShotFIMespl);
                                            newPotrMC.liveMC.Add(fi.liveStFIMespl);
                                            newPotrMC.plIspList.Add(pl);
                                            potrMCList.Add(newPotrMC);
                                            break;
                                        }
                                }
                            }
                            if (potrMCList.Count == 0 || proverkaStandInList)
                            {
                                if (fi.codeNameStandFIMespl != "000")
                                {
                                    foreach (ClassMC mc in mcList)
                                        if (mc.codeMC3 == fi.codeNameStandFIMespl)
                                        {
                                            ClassPotrMC newPotrMC = new ClassPotrMC();
                                            newPotrMC.codeMC3 = mc.codeMC3;
                                            newPotrMC.codeMC5 = mc.codeMC5;
                                            newPotrMC.nameMC = mc.socrName;
                                            newPotrMC.fullNameMC = mc.fullName;
                                            newPotrMC.codeFactoryPost = mc.codeFactory;
                                            newPotrMC.nameFactoryPost = mc.nameFactory;
                                            newPotrMC.innFactoryPost = mc.innFactory;
                                            newPotrMC.codeEdIzm = "796";
                                            newPotrMC.nameEdIzm = "шт.";
                                            newPotrMC.cenaMC = "";
                                            newPotrMC.fondMC = "";
                                            if (fi.liveStandFIMespl.Length > 0 && fi.koefPrivShotFIMespl.Length > 0)
                                            {
                                                if (pl.vYearPlIspKontrol.Length > 0)
                                                    newPotrMC.vYearPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vYearPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStandFIMespl)));
                                                if (pl.vOnePlIspKontrol.Length > 0)
                                                    newPotrMC.vOnePotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vOnePlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStandFIMespl)));
                                                if (pl.vTwoPlIspKontrol.Length > 0)
                                                    newPotrMC.vTwoPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vTwoPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStandFIMespl)));
                                                if (pl.vThrePlIspKontrol.Length > 0)
                                                    newPotrMC.vThreePotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vThrePlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStandFIMespl)));
                                                if (pl.vThourPlIspKontrol.Length > 0)
                                                    newPotrMC.vThourPotrMC.Add(Convert.ToString(Convert.ToDouble(pl.vThourPlIspKontrol) * Convert.ToDouble(fi.koefPrivShotFIMespl) * 1.4 / Convert.ToDouble(fi.liveStandFIMespl)));
                                            }
                                            else
                                            {
                                                newPotrMC.vYearPotrMC.Add("0");
                                                newPotrMC.vOnePotrMC.Add("0");
                                                newPotrMC.vTwoPotrMC.Add("0");
                                                newPotrMC.vThreePotrMC.Add("0");
                                                newPotrMC.vThourPotrMC.Add("0");
                                            }
                                            newPotrMC.koefShot.Add(fi.koefPrivShotFIMespl);
                                            newPotrMC.liveMC.Add(fi.liveStandFIMespl);
                                            newPotrMC.plIspList.Add(pl);
                                            potrMCList.Add(newPotrMC);
                                            break;
                                        }
                                }
                            }
                        }
                    }
                }
            }
            //Заявки
            if (potrMCList.Count > 0)
            {
                foreach (ClassPotrMC mc in potrMCList)
                {
                    bool proverkaFactorysInList = true;
                    foreach (ClassPotrMCFactorys mcf in potrMCFactorysList)
                    {
                        if (mcf.codeFactoryPost == mc.codeFactoryPost)
                        {
                            mcf.mcList.Add(mc);
                            proverkaFactorysInList = false;
                            break;
                        }
                    }
                    if (proverkaFactorysInList)
                    {
                        ClassPotrMCFactorys mcfNew = new ClassPotrMCFactorys();
                        mcfNew.codeFactoryPost = mc.codeFactoryPost;
                        mcfNew.nameFactoryPost = mc.nameFactoryPost;
                        mcfNew.innFactoryPost = mc.innFactoryPost;
                        mcfNew.mcList.Add(mc);
                        potrMCFactorysList.Add(mcfNew);
                    }
                }
            }
        }

        //Бронеплиты
        private void button274_Click(object sender, EventArgs e)
        {
            Form21 form21 = new Form21(true, false);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                functionQueryPlIspResult(yearPrintResult, numberPrintResult);
                functionCreateBP();
                if (plIspResultList.Count > 0)
                {
                    if (potrVBPList.Count > 0)
                    {
                        bool printProverka = true;
                        button215.Enabled = false;
                        button214.Enabled = false;
                        button213.Enabled = false;
                        button212.Enabled = false;
                        button274.Enabled = false;
                        button286.Enabled = false;
                        button218.Enabled = false;
                        button287.Enabled = false;
                        button288.Enabled = false;
                        button289.Enabled = false;
                        //Количество экземпляров
                        string countEkz = form21.textBox2.Text;
                        //Учетный номер
                        string uchNumber = form21.textBox1.Text;
                        //WORD
                        label286.Text = "Печать: подготовка документа к печати";
                        new Thread(() =>
                        {
                            Word.Application oWord = new Word.Application();
                            oWord.Visible = false;
                            try
                            {
                                //Открытие документа
                                Word.Document wordDocument;
                                if (form21.typePrint == 1)
                                    wordDocument = oWord.Documents.Open(templateFileNameWordPotrVBPResult);
                                else
                                    wordDocument = oWord.Documents.Open(templateFileNameWordSvPotrVBPResult);
                                //Поиск и замена текста
                                functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                                functionReplaceInText(wordDocument, oWord, "{year}", yearPrintResult);
                                //Добавление в файл таблицы
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание титульного листа"));
                                Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                                //Добавление в файл таблицы
                                var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                if (form21.typePrint == 1)
                                    wordDocument.Tables.Add(range, 1, 9, autoFitBehavior);
                                else
                                    wordDocument.Tables.Add(range, 1, 6, autoFitBehavior);
                                Word.Table oTable = wordDocument.Tables[1];
                                string[] nameHeaderTable = { "Шифр,\nразмер броне-\nплиты", "Вес\nб/плиты\nв кг", "Завод-\nизготовитель\nИЭ", "Шифр,\nнаименование\nиспытуемого эл-та", "Шифр,\nнаименование\nсистемы", "Шифр,\nнаименование\nВИ", "Кол-во\nвыстре-\nлов", "Живу-\nчесть\nБП", "Результная\nпотребность\nв б/плитах" };
                                string[] nameHeaderSVTable = { "Шифр,\nразмер бронеплиты", "Полигон-\nпотребитель", "Потребное\nкол-во,шт", "Вес,\nт", "Предприятие-\nизготовитель", "Примечание" };
                                for (int i = 0; i < oTable.Columns.Count; i++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                    wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    wordCellRange.Rows.HeadingFormat = -1;
                                    wordCellRange.Font.Name = "Times New Roman";
                                    if (form21.typePrint == 1)
                                        wordCellRange.Text = nameHeaderTable[i];
                                    else
                                        wordCellRange.Text = nameHeaderSVTable[i];
                                }
                                if (form21.typePrint == 1)
                                {
                                    oTable.Cell(1, 1).Width = 85;
                                    oTable.Cell(1, 2).Width = 55;
                                    oTable.Cell(1, 3).Width = 80;
                                    oTable.Cell(1, 4).Width = 115;
                                    oTable.Cell(1, 5).Width = 115;
                                }
                                else
                                {

                                }
                                int positionRows = 2;
                                int printVBPCount = 1;
                                double summPotrVBP = 0;
                                double summVesBP = 0;
                                double itogPotrVBP = 0;
                                double itogVesBP = 0;
                                var sortedList = potrVBPList.OrderBy(a => a.codeBP);
                                foreach (ClassPotrVBP vbp in sortedList)
                                {
                                    if (form21.typePrint == 1)
                                    {
                                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: печать справки-обоснование " + printVBPCount + " из " + potrVBPList.Count));
                                        printVBPCount++;
                                        oTable.Rows.Add();
                                        if (printVBPCount > 2)
                                        {
                                            oTable.Cell(positionRows - 1, 5).Split(2, 2);
                                            Word.Range wordCellRange = oTable.Cell(positionRows - 1, 5).Range;
                                            wordCellRange.Rows.HeadingFormat = 0;
                                            wordCellRange.Text = "Потребн.,шт";
                                            wordCellRange = oTable.Cell(positionRows - 1, 6).Range;
                                            wordCellRange.Text = "Вес,т";
                                            wordCellRange = oTable.Cell(positionRows, 5).Range;
                                            wordCellRange.Text = Convert.ToString(Math.Ceiling(summPotrVBP));
                                            itogPotrVBP += Math.Ceiling(summPotrVBP);
                                            wordCellRange = oTable.Cell(positionRows, 6).Range;
                                            wordCellRange.Text = Convert.ToString(Math.Round(summVesBP * summPotrVBP / 1000, 2));
                                            itogVesBP += Math.Round(summVesBP * summPotrVBP / 1000, 2);
                                            positionRows++;
                                        }
                                        summPotrVBP = 0;
                                        summVesBP = 0;
                                        for (int j = 0; j < 3; j++)
                                        {
                                            Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                            wordCellRange.Rows.HeadingFormat = 0;
                                            if (j == 0)
                                                wordCellRange.Text = Convert.ToString(printVBPCount - 1) + ".   " + vbp.codeBP + "\n" + vbp.sizeBP;
                                            if (j == 1)
                                            {
                                                summVesBP = vbp.vesBP;
                                                wordCellRange.Text = Convert.ToString(vbp.vesBP);
                                            }
                                            if (j == 2)
                                            {
                                                int liveCount = 0;
                                                var sortedList2 = vbp.plIspList.OrderBy(a => a.codeElementPlIspKontrol).ThenBy(b => b.codeVidIspPlIspKontrol);
                                                foreach (ClassPlIspKontrol pl in sortedList2)
                                                {
                                                    for (int k = 3; k < 10; k++)
                                                    {
                                                        wordCellRange = oTable.Cell(positionRows, k).Range;
                                                        if (k == 3)
                                                            wordCellRange.Text = pl.codeFactoryPlIspKontrol + "\n" + pl.nameFactoryPlIspKontrol;
                                                        if (k == 4)
                                                            wordCellRange.Text = pl.codeElementPlIspKontrol + "\n" + pl.pictureElementPlIspKontrol + "\n" + pl.indexElementPlIspKontrol + "\n" + pl.nameElementPlIspKontrol;
                                                        if (k == 5)
                                                            wordCellRange.Text = pl.codeSystemPlIspKontrol + "\n" + pl.nameSystemPlIspKontrol;
                                                        if (k == 6)
                                                            wordCellRange.Text = pl.codeVidIspPlIspKontrol + "\n" + pl.nameVidIspPlIspKontrol;
                                                        if (k == 7)
                                                            wordCellRange.Text = pl.vYearPlIspKontrol;
                                                        if (k == 8)
                                                            wordCellRange.Text = vbp.liveBP[liveCount];
                                                        if (k == 9)
                                                            if (vbp.liveBP[liveCount].Length > 0 && pl.vYearPlIspKontrol.Length > 0)
                                                            {
                                                                summPotrVBP += Math.Round(Convert.ToDouble(pl.vYearPlIspKontrol) / Convert.ToDouble(vbp.liveBP[liveCount]) * 1.15, 2);
                                                                wordCellRange.Text = Convert.ToString(Math.Round(Convert.ToDouble(pl.vYearPlIspKontrol) / Convert.ToDouble(vbp.liveBP[liveCount]) * 1.15, 2));
                                                            }
                                                    }
                                                    oTable.Rows.Add();
                                                    positionRows++;
                                                    liveCount++;
                                                }
                                            }
                                        }
                                        positionRows++;
                                        if (printVBPCount - 1 == potrVBPList.Count)
                                        {
                                            oTable.Cell(positionRows - 1, 5).Split(2, 2);
                                            Word.Range wordCellRange = oTable.Cell(positionRows - 1, 5).Range;
                                            wordCellRange.Text = "Потребн.,шт";
                                            wordCellRange = oTable.Cell(positionRows - 1, 6).Range;
                                            wordCellRange.Text = "Вес,т";
                                            wordCellRange = oTable.Cell(positionRows, 5).Range;
                                            wordCellRange.Text = Convert.ToString(Math.Ceiling(summPotrVBP));
                                            itogPotrVBP += Math.Ceiling(summPotrVBP);
                                            wordCellRange = oTable.Cell(positionRows, 6).Range;
                                            wordCellRange.Text = Convert.ToString(Math.Round(summVesBP * summPotrVBP / 1000, 2));
                                            itogVesBP += Math.Round(summVesBP * summPotrVBP / 1000, 2);
                                        }
                                    }
                                    else
                                    {
                                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: печать справки-обоснование " + printVBPCount + " из " + potrVBPList.Count));
                                        printVBPCount++;
                                        oTable.Rows.Add();
                                        summPotrVBP = 0;
                                        summVesBP = 0;
                                        for (int j = 0; j < 6; j++)
                                        {
                                            Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                            wordCellRange.Rows.HeadingFormat = 0;
                                            if (j == 0)
                                                wordCellRange.Text = Convert.ToString(printVBPCount - 1) + ".     " + vbp.codeBP + "\n" + vbp.sizeBP;
                                            if (j == 1)
                                                wordCellRange.Text = "01\nФКП *НТИИМ*";
                                            if (j == 2)
                                            {
                                                int liveCount = 0;
                                                foreach (ClassPlIspKontrol pl in vbp.plIspList)
                                                {
                                                    if (vbp.liveBP[liveCount].Length > 0)
                                                    {
                                                        summPotrVBP += Math.Round(Convert.ToDouble(pl.vYearPlIspKontrol) / Convert.ToDouble(vbp.liveBP[liveCount]) * 1.15, 2);
                                                    }
                                                    liveCount++;
                                                }
                                                wordCellRange.Text = Convert.ToString(Math.Ceiling(summPotrVBP));
                                                itogPotrVBP += Math.Ceiling(summPotrVBP);
                                            }
                                            if (j == 3)
                                            {
                                                wordCellRange.Text = Convert.ToString(Math.Round(vbp.vesBP * summPotrVBP / 1000, 2));
                                                itogVesBP += Math.Round(vbp.vesBP * summPotrVBP / 1000, 2);
                                            }
                                        }
                                        positionRows++;
                                    }
                                }
                                if (form21.typePrint == 1)
                                {
                                    wordDocument.Paragraphs.Add();
                                    range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                    range.Text = "\t\t\t\t\t\t\t\t\tИтог\t     " + itogPotrVBP + "\t\t" + itogVesBP + "\n\tИ.о. начальника отдела №22\t\t\tТ.М.Мясникова";
                                    wordDocument.Paragraphs.Add();
                                }
                                else
                                {
                                    oTable.Rows.Add();
                                    Word.Range wordCellRange = oTable.Cell(positionRows, 2).Range;
                                    wordCellRange.Rows.HeadingFormat = 0;
                                    wordCellRange.Text = "ИТОГО";
                                    wordCellRange = oTable.Cell(positionRows, 3).Range;
                                    wordCellRange.Text = Convert.ToString(itogPotrVBP);
                                    wordCellRange = oTable.Cell(positionRows, 4).Range;
                                    wordCellRange.Text = Convert.ToString(itogVesBP);
                                    wordDocument.Paragraphs.Add();
                                    range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                    range.Text = "\n\tИ.о. начальника отдела №22\t\t\tТ.М.Мясникова";
                                }
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание экземпляров"));
                                //Создание экземпляров
                                wordDocument.Range().Copy();
                                var rangeAllDocumentEkz = wordDocument.Content;
                                rangeAllDocumentEkz.Find.ClearFormatting();
                                for (int j = 0; j < plIspResultList.Count; j++)
                                {
                                    functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                                }
                                for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                                {
                                    //В конец документа
                                    object what = Word.WdGoToItem.wdGoToLine;
                                    object which = Word.WdGoToDirection.wdGoToLast;
                                    Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                    //Создаем разрыв РАЗДЕЛА (не страниц)
                                    endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                    //Вставляем
                                    endRange.Paste();
                                    rangeAllDocumentEkz = wordDocument.Content;
                                    rangeAllDocumentEkz.Find.ClearFormatting();
                                    rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                }
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: сохранение документа"));
                                //Сохранение
                                dateNowFileName = DateTime.Now;
                                string strSaveName = Convert.ToString(dateNowFileName);
                                strSaveName = strSaveName.Replace(':', '-');
                                if (form21.typePrint == 1)
                                    wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\СПРАВКА-ОБОСНОВАНИЕ ПОТРЕБНОСТИ В БРОНЕПЛИТАХ " + strSaveName + ".docx");
                                else
                                    wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\СВОДНАЯ ВЕДОМОСТЬ ПОТРЕБНОСТИ В БРОНЕПЛИТАХ " + strSaveName + ".docx");
                                wordDocument.Close();
                            }
                            catch
                            {
                                MessageBox.Show("Ошибка!");
                                printProverka = false;
                            }
                            finally
                            {
                                oWord.Quit();
                                if (printProverka)
                                    if (form21.typePrint == 1)
                                        functionMessageShow(2, "Справка-обоснование потребности в бронеплитах напечатана!");
                                    else
                                        functionMessageShow(2, "Сводная ведомость потребности в бронеплитах напечатана!");
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = ""));
                                button215.BeginInvoke((MethodInvoker)(() => this.button215.Enabled = true));
                                button214.BeginInvoke((MethodInvoker)(() => this.button214.Enabled = true));
                                button213.BeginInvoke((MethodInvoker)(() => this.button213.Enabled = true));
                                button212.BeginInvoke((MethodInvoker)(() => this.button212.Enabled = true));
                                button274.BeginInvoke((MethodInvoker)(() => this.button274.Enabled = true));
                                button286.BeginInvoke((MethodInvoker)(() => this.button286.Enabled = true));
                                button218.BeginInvoke((MethodInvoker)(() => this.button218.Enabled = true));
                                button287.BeginInvoke((MethodInvoker)(() => this.button287.Enabled = true));
                                button288.BeginInvoke((MethodInvoker)(() => this.button288.Enabled = true));
                                button289.BeginInvoke((MethodInvoker)(() => this.button289.Enabled = true));
                            }
                        }).Start();
                    }
                    else
                        functionMessageShow(1, "Не найдена потребность в бронеплитах!");
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        private void functionCreateBP()
        {
            functionQueryFI();
            potrVBPList.Clear();
            foreach (ClassPlIspKontrol pl in plIspResultList)
            {
                if (pl.codeVidIspPlIspKontrol != "098" && pl.codeVidIspPlIspKontrol != "099" && pl.codeVidIspPlIspKontrol != "205" && pl.codeVidIspPlIspKontrol != "206" && pl.codeVidIspPlIspKontrol != "207" && pl.codeVidIspPlIspKontrol != "239")
                {
                    foreach (ClassFI fi in fiList)
                    {
                        if (fi.codeElementFIMespl == pl.codeElementPlIspKontrol && fi.codeVidIspFIMespl == pl.codeVidIspPlIspKontrol)
                        {
                            bool proverkaBPOneInList = true;
                            bool proverkaBPTwoInList = true;
                            foreach (ClassPotrVBP bp in potrVBPList)
                            {
                                if(bp.codeBP == fi.codePregradiOneFIMespl)
                                {
                                    bp.liveBP.Add(fi.livePregradiOneFIMespl);
                                    bp.plIspList.Add(pl);
                                    proverkaBPOneInList = false;
                                    break;
                                }
                                if (bp.codeBP == fi.codePregradiTwoFIMespl)
                                {
                                    bp.liveBP.Add(fi.livePregradiTwoFIMespl);
                                    bp.plIspList.Add(pl);
                                    proverkaBPTwoInList = false;
                                    break;
                                }
                            }
                            if (potrVBPList.Count == 0 || proverkaBPOneInList)
                            {
                                if (fi.codePregradiOneFIMespl != "000")
                                {
                                    foreach (ClassPregrads pr in pregradsList)
                                        if (pr.getCode() == fi.codePregradiOneFIMespl && pr.getName() == "Бронеплита")
                                        {
                                            ClassPotrVBP newPotrVBP = new ClassPotrVBP();
                                            newPotrVBP.codeBP = pr.getCode();
                                            newPotrVBP.sizeBP = pr.getSize();
                                            newPotrVBP.vesBP = pr.getVes();
                                            newPotrVBP.liveBP.Add(fi.livePregradiOneFIMespl);
                                            newPotrVBP.plIspList.Add(pl);
                                            potrVBPList.Add(newPotrVBP);
                                            break;
                                        }
                                }
                            }
                            if (potrVBPList.Count == 0 || proverkaBPTwoInList)
                            {
                                if (fi.codePregradiTwoFIMespl != "000")
                                {
                                    foreach (ClassPregrads pr in pregradsList)
                                        if (pr.getCode() == fi.codePregradiTwoFIMespl && pr.getName() == "Бронеплита")
                                        {
                                            MessageBox.Show(pr.getName());
                                            ClassPotrVBP newPotrVBP = new ClassPotrVBP();
                                            newPotrVBP.codeBP = pr.getCode();
                                            newPotrVBP.sizeBP = pr.getSize();
                                            newPotrVBP.vesBP = pr.getVes();
                                            newPotrVBP.liveBP.Add(fi.livePregradiTwoFIMespl);
                                            newPotrVBP.plIspList.Add(pl);
                                            potrVBPList.Add(newPotrVBP);
                                            break;
                                        }
                                }
                            }
                        }
                    }
                }
            }
        }

        //Крешерное имущество
        private void button286_Click(object sender, EventArgs e)
        {
            functionQueryPotrVKIResult(yearPrintResult, numberPrintResult);
            Form21 form21 = new Form21(false, false);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                if (potrVKIResultList.Count > 0)
                {
                    bool printProverka = true;
                    button215.Enabled = false;
                    button214.Enabled = false;
                    button213.Enabled = false;
                    button212.Enabled = false;
                    button274.Enabled = false;
                    button286.Enabled = false;
                    button218.Enabled = false;
                    button287.Enabled = false;
                    button288.Enabled = false;
                    button289.Enabled = false;
                    //Количество экземпляров
                    string countEkz = form21.textBox2.Text;
                    //Учетный номер
                    string uchNumber = form21.textBox1.Text;
                    //WORD
                    label286.Text = "Печать: подготовка документа к печати";
                    new Thread(() =>
                    {
                        Word.Application oWord = new Word.Application();
                        oWord.Visible = false;
                        try
                        {
                            //Открытие документа
                            Word.Document wordDocument;
                            wordDocument = oWord.Documents.Open(templateFileNameWordKrImuResult);
                            //Поиск и замена текста
                            functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                            functionReplaceInText(wordDocument, oWord, "{year}", yearPrintResult);
                            //Добавление в файл таблицы
                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание титульного листа"));
                            Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                            //Добавление в файл таблицы
                            var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                            wordDocument.Tables.Add(range, 1, 8, autoFitBehavior);
                            Word.Table oTable = wordDocument.Tables[1];
                            string[] nameHeaderTable = { "№\nп/п", "Изделие", "Заказчик", "Ед.\nизм.", "Количество изделий", "Стоимость, т.р.", "Цена,\nт.р.", "Примечание", "год", "1 кв", "2 кв", "3 кв", "4 кв" };
                            for (int i = 0; i < oTable.Columns.Count; i++)
                            {
                                Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                wordCellRange.Text = nameHeaderTable[i];
                                wordCellRange.Rows.HeadingFormat = -1;
                                wordCellRange.Font.Name = "Times New Roman";
                            }
                            oTable.Cell(1, 1).Width = 35;
                            oTable.Cell(1, 5).Split(2, 1);
                            oTable.Cell(2, 5).Split(1, 5);
                            oTable.Cell(1, 6).Split(2, 1);
                            oTable.Cell(2, 10).Split(1, 5);
                            for (int i = 5; i < 10; i++)
                            {
                                Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                wordCellRange.Text = nameHeaderTable[i + 3];
                                wordCellRange.Rows.HeadingFormat = -1;
                            }
                            for (int i = 10; i < 15; i++)
                            {
                                Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                wordCellRange.Text = nameHeaderTable[i - 2];
                                wordCellRange.Rows.HeadingFormat = -1;
                            }
                            int positionRows = 3;
                            int printVKICount = 1;
                            var sortedList = potrVKIResultList.OrderBy(a => a.codeElementPotrVKIResult).ThenBy(b => b.codeFactoryPotrVKIResult);
                            foreach (ClassPotrVKIResult vki in sortedList)
                            {
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: печать справки-обоснование " + printVKICount + " из " + potrVKIResultList.Count));
                                printVKICount++;
                                oTable.Rows.Add();
                                double cenaKE = 0;
                                foreach (ClassCenaKE cena in cenaKEList)
                                    if (cena.codeElementKE == vki.codeElementPotrVKIResult)
                                        cenaKE = Convert.ToDouble(cena.cenaKE);
                                for (int j = 0; j < 16; j++)
                                {
                                    Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                    wordCellRange.Rows.HeadingFormat = 0;
                                    if (j == 0)
                                        wordCellRange.Text = Convert.ToString(printVKICount - 1);
                                    if (j == 1)
                                        wordCellRange.Text = vki.codeElementPotrVKIResult + "\n" + vki.pictureElementPotrVKIResult + "\n" + vki.indexElementPotrVKIResult + "\n" + vki.nameElementPotrVKIResult;
                                    if (j == 2)
                                        wordCellRange.Text = vki.codeFactoryPotrVKIResult + "\n" + vki.nameFactoryPotrVKIResult;
                                    if (j == 3)
                                        wordCellRange.Text = vki.socrNameEdIzmPotrVKIResult;
                                    if (j == 4)
                                        wordCellRange.Text = vki.vYearPotrVKIResult.Length > 0 ? vki.vYearPotrVKIResult : "0";
                                    if (j == 5)
                                        wordCellRange.Text = vki.vOnePotrVKIResult.Length > 0 ? vki.vOnePotrVKIResult : "0";
                                    if (j == 6)
                                        wordCellRange.Text = vki.vTwoPotrVKIResult.Length > 0 ? vki.vTwoPotrVKIResult : "0";
                                    if (j == 7)
                                        wordCellRange.Text = vki.vThrePotrVKIResult.Length > 0 ? vki.vThrePotrVKIResult : "0";
                                    if (j == 8)
                                        wordCellRange.Text = vki.vThourPotrVKIResult.Length > 0 ? vki.vThourPotrVKIResult : "0";
                                    if (j == 9)
                                    {
                                        if (vki.vYearPotrVKIResult.Length > 0)
                                        {
                                            double prCenaVKI = Math.Round(Convert.ToDouble(vki.vYearPotrVKIResult) * cenaKE, 2);
                                            if (prCenaVKI > 0)
                                                wordCellRange.Text = Convert.ToString(prCenaVKI);
                                            else
                                                wordCellRange.Text = "0.00";
                                        }
                                        else
                                            wordCellRange.Text = "0.00";
                                    }
                                    if (j == 10)
                                    {
                                        if (vki.vOnePotrVKIResult.Length > 0)
                                        {
                                            double prCenaVKI = Math.Round(Convert.ToDouble(vki.vOnePotrVKIResult) * cenaKE, 2);
                                            if (prCenaVKI > 0)
                                                wordCellRange.Text = Convert.ToString(prCenaVKI);
                                            else
                                                wordCellRange.Text = "0.00";
                                        }
                                        else
                                            wordCellRange.Text = "0.00";
                                    }
                                    if (j == 11)
                                    {
                                        if (vki.vTwoPotrVKIResult.Length > 0)
                                        {
                                            double prCenaVKI = Math.Round(Convert.ToDouble(vki.vTwoPotrVKIResult) * cenaKE, 2);
                                            if (prCenaVKI > 0)
                                                wordCellRange.Text = Convert.ToString(prCenaVKI);
                                            else
                                                wordCellRange.Text = "0.00";
                                        }
                                        else
                                            wordCellRange.Text = "0.00";
                                    }
                                    if (j == 12)
                                    {
                                        if (vki.vThrePotrVKIResult.Length > 0)
                                        {
                                            double prCenaVKI = Math.Round(Convert.ToDouble(vki.vThrePotrVKIResult) * cenaKE, 2);
                                            if (prCenaVKI > 0)
                                                wordCellRange.Text = Convert.ToString(prCenaVKI);
                                            else
                                                wordCellRange.Text = "0.00";
                                        }
                                        else
                                            wordCellRange.Text = "0.00";
                                    }
                                    if (j == 13)
                                    {
                                        if (vki.vThourPotrVKIResult.Length > 0)
                                        {
                                            double prCenaVKI = Math.Round(Convert.ToDouble(vki.vThourPotrVKIResult) * cenaKE, 2);
                                            if (prCenaVKI > 0)
                                                wordCellRange.Text = Convert.ToString(prCenaVKI);
                                            else
                                                wordCellRange.Text = "0.00";
                                        }
                                        else
                                            wordCellRange.Text = "0.00";
                                    }
                                    if (j == 14)
                                        wordCellRange.Text = Convert.ToString(cenaKE);
                                    if (j == 15)
                                        wordCellRange.Text = "";
                                }
                                positionRows++;
                            }
                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание экземпляров"));
                            //Создание экземпляров
                            wordDocument.Range().Copy();
                            var rangeAllDocumentEkz = wordDocument.Content;
                            rangeAllDocumentEkz.Find.ClearFormatting();
                            for (int j = 0; j < plIspResultList.Count; j++)
                            {
                                functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                            }
                            for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                            {
                                //В конец документа
                                object what = Word.WdGoToItem.wdGoToLine;
                                object which = Word.WdGoToDirection.wdGoToLast;
                                Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                //Создаем разрыв РАЗДЕЛА (не страниц)
                                endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                //Вставляем
                                endRange.Paste();
                                rangeAllDocumentEkz = wordDocument.Content;
                                rangeAllDocumentEkz.Find.ClearFormatting();
                                rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                            }
                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: сохранение документа"));
                            //Сохранение
                            dateNowFileName = DateTime.Now;
                            string strSaveName = Convert.ToString(dateNowFileName);
                            strSaveName = strSaveName.Replace(':', '-');
                            wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\ЗАЯВКИ ОТ ПРЕДПРИЯТИЙ НА ПОСТАВКУ КРЕШЕРНОГО ИМУЩЕСТВА " + strSaveName + ".docx");
                            wordDocument.Close();
                        }
                        catch
                        {
                            MessageBox.Show("Ошибка!");
                            printProverka = false;
                        }
                        finally
                        {
                            oWord.Quit();
                            if (printProverka)
                                functionMessageShow(2, "Заявки на поставку крешерного имущества напечатаны!");
                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = ""));
                            button215.BeginInvoke((MethodInvoker)(() => this.button215.Enabled = true));
                            button214.BeginInvoke((MethodInvoker)(() => this.button214.Enabled = true));
                            button213.BeginInvoke((MethodInvoker)(() => this.button213.Enabled = true));
                            button212.BeginInvoke((MethodInvoker)(() => this.button212.Enabled = true));
                            button274.BeginInvoke((MethodInvoker)(() => this.button274.Enabled = true));
                            button286.BeginInvoke((MethodInvoker)(() => this.button286.Enabled = true));
                            button218.BeginInvoke((MethodInvoker)(() => this.button218.Enabled = true));
                            button287.BeginInvoke((MethodInvoker)(() => this.button287.Enabled = true));
                            button288.BeginInvoke((MethodInvoker)(() => this.button288.Enabled = true));
                            button289.BeginInvoke((MethodInvoker)(() => this.button289.Enabled = true));
                        }
                    }).Start();
                }
                else
                    functionMessageShow(1, "Не найдена потребность в крешерном имуществе!");
            }
        }

        //Печать трудозатратов
        private void button218_Click_1(object sender, EventArgs e)
        {
            Form21 form21 = new Form21(true, true);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                functionQueryNormTimeIsp();
                functionQueryPlIspResult(yearPrintResult, numberPrintResult);
                if (plIspResultList.Count > 0)
                {
                    bool printProverka = true;
                    button215.Enabled = false;
                    button214.Enabled = false;
                    button213.Enabled = false;
                    button212.Enabled = false;
                    button274.Enabled = false;
                    button286.Enabled = false;
                    button218.Enabled = false;
                    button287.Enabled = false;
                    button288.Enabled = false;
                    button289.Enabled = false;
                    //Количество экземпляров
                    string countEkz = form21.textBox2.Text;
                    //Учетный номер
                    string uchNumber = form21.textBox1.Text;
                    //WORD
                    label286.Text = "Печать: подготовка документа к печати";
                    new Thread(() =>
                    {
                        Word.Application oWord = new Word.Application();
                        oWord.Visible = false;
                        try
                        {
                            //Открытие документа
                            Word.Document wordDocument;
                            wordDocument = oWord.Documents.Open(templateFileNameWordNotmTimeResult);
                            if (form21.typePrint == 1)
                                functionReplaceInText(wordDocument, oWord, "{nameWorkNormTime}", "на проведение сборочных работ по Результ. заданию");
                            else
                                functionReplaceInText(wordDocument, oWord, "{nameWorkNormTime}", "на проведение контрольных испытаний");
                            //Поиск и замена текста
                            functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                            functionReplaceInText(wordDocument, oWord, "{year}", yearPrintResult);
                            functionReplaceInText(wordDocument, oWord, "{year}", yearPrintResult);
                            //Добавление в файл таблицы
                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание титульного листа"));
                            Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                            //Добавление в файл таблицы
                            //wordDocument.Paragraphs.Add();
                            var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                            wordDocument.Tables.Add(range, 1, 6, autoFitBehavior);
                            Word.Table oTable = wordDocument.Tables[1];
                            string[] nameHeaderTable = { "№\nп/п", "Шифр,\nнаименование\nэлемента", "Шифр,\nнаименование\nвида испытания", "ФКП НТИИМ", "Vисп.", "Трудозатраты", "подразделение", "нормочасы\nна 1 изделие" };
                            for (int i = 0; i < oTable.Columns.Count; i++)
                            {
                                Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                wordCellRange.Text = nameHeaderTable[i];
                                wordCellRange.Rows.HeadingFormat = -1;
                                //Изменение размера шрифта
                                wordCellRange.Font.Size = 10;
                                //Изменение шрифта
                                wordCellRange.Font.Name = "Times New Roman";
                            }
                            oTable.Cell(1, 1).Width = 35;
                            oTable.Cell(1, 2).Width = 150;
                            oTable.Cell(1, 3).Width = 100;
                            oTable.Cell(1, 4).Width = 250;
                            oTable.Cell(1, 5).Width = 70;
                            oTable.Cell(1, 6).Width = 100;
                            oTable.Cell(1, 4).Split(2, 1);
                            oTable.Cell(2, 4).Split(1, 2);
                            for (int i = 4; i < 6; i++)
                            {
                                Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                wordCellRange.Text = nameHeaderTable[i + 2];
                                wordCellRange.Rows.HeadingFormat = -1;
                            }
                            //Отступ таблицы от левого края
                            oTable.Rows.LeftIndent = 40;
                            int positionRows = 3;
                            int printNormTimeCount = 1;
                            int allPlIspCount = 0;
                            int posCodeElement = 0;
                            ClassNormTimeIsp itogNormTimeIsp = new ClassNormTimeIsp();
                            double vIspNormTime = 0;
                            int page = 0;
                            foreach (ClassPlIspKontrol pl in plIspResultList.ToArray())
                            {
                                if (form21.typePrint == 1)
                                {
                                    //Для сборки
                                    if (pl.codeVidIspPlIspKontrol == "098" || pl.codeVidIspPlIspKontrol == "099" || pl.codeVidIspPlIspKontrol == "205" || pl.codeVidIspPlIspKontrol == "206" || pl.codeVidIspPlIspKontrol == "207" || pl.codeVidIspPlIspKontrol == "239")
                                        allPlIspCount++;
                                    else
                                        plIspResultList.Remove(pl);
                                }
                                else
                                {
                                    //Для испытаний
                                    if (pl.codeVidIspPlIspKontrol != "098" && pl.codeVidIspPlIspKontrol != "099" && pl.codeVidIspPlIspKontrol != "205" && pl.codeVidIspPlIspKontrol != "206" && pl.codeVidIspPlIspKontrol != "207" && pl.codeVidIspPlIspKontrol != "239")
                                        allPlIspCount++;
                                    else
                                        plIspResultList.Remove(pl);
                                }
                            }
                            var sortedList = plIspResultList.OrderBy(b => b.codeElementPlIspKontrol).ThenBy(c => c.codeVidIspPlIspKontrol);
                            foreach (ClassPlIspKontrol pl in sortedList)
                            {
                                bool proverkaIspOrSb = false;
                                if (form21.typePrint == 1)
                                {
                                    //Для сборки
                                    if (pl.codeVidIspPlIspKontrol == "098" || pl.codeVidIspPlIspKontrol == "099" || pl.codeVidIspPlIspKontrol == "205" || pl.codeVidIspPlIspKontrol == "206" || pl.codeVidIspPlIspKontrol == "207" || pl.codeVidIspPlIspKontrol == "239")
                                        proverkaIspOrSb = true;
                                }
                                else
                                {
                                    //Для испытаний
                                    if (pl.codeVidIspPlIspKontrol != "098" && pl.codeVidIspPlIspKontrol != "099" && pl.codeVidIspPlIspKontrol != "205" && pl.codeVidIspPlIspKontrol != "206" && pl.codeVidIspPlIspKontrol != "207" && pl.codeVidIspPlIspKontrol != "239")
                                        proverkaIspOrSb = true;
                                }
                                if (proverkaIspOrSb)
                                {
                                    label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: печать трудозатрат " + printNormTimeCount + " из " + allPlIspCount));
                                    printNormTimeCount++;
                                    oTable.Rows.Add();
                                    double allNormTime = 0;
                                    double allTime = 0;
                                    ClassNormTimeIsp newNormTimeIsp = new ClassNormTimeIsp();
                                    foreach (ClassNormTimeIsp normTime in normTimeIspList)
                                    {
                                        if (normTime.codeElementNormTimeIsp == pl.codeElementPlIspKontrol && normTime.codeVidIspNormTimeIsp == pl.codeVidIspPlIspKontrol)
                                            newNormTimeIsp = normTime;
                                    }
                                    bool isPageHaveElement = false;
                                    for (int j = 0; j < 7; j++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                        wordCellRange.Rows.HeadingFormat = 0;
                                        wordCellRange.Rows.AllowBreakAcrossPages = 0;
                                        wordCellRange.Bold = 0;
                                        //Проверка на наличие этого элемента на странице
                                        if (j == 0)
                                            wordCellRange.Text = Convert.ToString(printNormTimeCount - 1);
                                        if (j == 1)
                                        {
                                            Tuple<bool, int> kort = listPositionInWordDocument(page, wordCellRange);
                                            isPageHaveElement = kort.Item1;
                                            page = kort.Item2;
                                            if (posCodeElement > 0 && isPageHaveElement)
                                            {
                                                if (sortedList.ToArray()[posCodeElement - 1].codeElementPlIspKontrol != pl.codeElementPlIspKontrol)
                                                    wordCellRange.Text = "     " + pl.codeElementPlIspKontrol + "\n" + pl.pictureElementPlIspKontrol + "\n" + pl.indexElementPlIspKontrol + "\n" + pl.nameElementPlIspKontrol;
                                            }
                                            else
                                                wordCellRange.Text = "     " + pl.codeElementPlIspKontrol + "\n" + pl.pictureElementPlIspKontrol + "\n" + pl.indexElementPlIspKontrol + "\n" + pl.nameElementPlIspKontrol;
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                        }
                                        if (j == 2)
                                        {
                                            if (posCodeElement > 0 && isPageHaveElement)
                                            {
                                                if (sortedList.ToArray()[posCodeElement - 1].codeVidIspPlIspKontrol != pl.codeVidIspPlIspKontrol)
                                                    wordCellRange.Text = pl.codeVidIspPlIspKontrol + "\n" + pl.nameVidIspPlIspKontrol;
                                            }
                                            else
                                                wordCellRange.Text = pl.codeVidIspPlIspKontrol + "\n" + pl.nameVidIspPlIspKontrol;
                                        }
                                        if (j == 3)
                                        {
                                            wordCellRange.Text = newNormTimeIsp.strNameNormTimeIsp();
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                        }
                                        if (j == 4)
                                        {
                                            wordCellRange.Text = newNormTimeIsp.strNormTimeIsp();
                                        }
                                        if (j == 5)
                                            wordCellRange.Text = pl.vYearPlIspKontrol;
                                        if (j == 6)
                                        {
                                            string strNormTime = "";
                                            if (newNormTimeIsp.firstCehNormTimeIsp != null)
                                                if (newNormTimeIsp.firstCehNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.firstCehNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                            allTime += Convert.ToDouble(newNormTimeIsp.firstCehNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.firstCehNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.firstCehNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.firstCehNormTimeIsp));
                                                            itogNormTimeIsp.firstCehVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.firstCehVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.firstCehNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.firstCehNormTimeIsp);
                                                }
                                            strNormTime += "\n";
                                            if (newNormTimeIsp.secondCehNormTimeIsp != null)
                                                if (newNormTimeIsp.secondCehNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.secondCehNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                            allTime += Convert.ToDouble(newNormTimeIsp.secondCehNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.secondCehNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.secondCehNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.secondCehNormTimeIsp));
                                                            itogNormTimeIsp.secondCehVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.secondCehVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.secondCehNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.secondCehNormTimeIsp);
                                                }
                                            strNormTime += "\n";
                                            if (newNormTimeIsp.thirdCehNormTimeIsp != null)
                                                if (newNormTimeIsp.thirdCehNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.thirdCehNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol)) + "\n";
                                                            allTime += Convert.ToDouble(newNormTimeIsp.thirdCehNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.thirdCehNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.thirdCehNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.thirdCehNormTimeIsp));
                                                            itogNormTimeIsp.thirdCehVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.thirdCehVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.thirdCehNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.thirdCehNormTimeIsp);
                                                }
                                            if (newNormTimeIsp.temperNormTimeIsp != null)
                                                if (newNormTimeIsp.temperNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.temperNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                            allTime += Convert.ToDouble(newNormTimeIsp.temperNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.temperNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.temperNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.temperNormTimeIsp));
                                                            itogNormTimeIsp.temperVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.temperVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.temperNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.temperNormTimeIsp);
                                                }
                                            strNormTime += "\n";
                                            if (newNormTimeIsp.otkNormTimeIsp != null)
                                                if (newNormTimeIsp.otkNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.otkNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                            allTime += Convert.ToDouble(newNormTimeIsp.otkNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.otkNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.otkNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.otkNormTimeIsp));
                                                            itogNormTimeIsp.otkVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.otkVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.otkNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.otkNormTimeIsp);
                                                }
                                            strNormTime += "\n";
                                            if (newNormTimeIsp.twoNormTimeIsp != null)
                                                if (newNormTimeIsp.twoNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.twoNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                            allTime += Convert.ToDouble(newNormTimeIsp.twoNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.twoNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.twoNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.twoNormTimeIsp));
                                                            itogNormTimeIsp.twoVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.twoVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.twoNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.twoNormTimeIsp);
                                                }
                                            strNormTime += "\n";
                                            if (newNormTimeIsp.fiveNormTimeIsp != null)
                                                if (newNormTimeIsp.fiveNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.fiveNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol)) + "\n";
                                                            allTime += Convert.ToDouble(newNormTimeIsp.fiveNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.fiveNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.fiveNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.fiveNormTimeIsp));
                                                            itogNormTimeIsp.fiveVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.fiveVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.fiveNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.fiveNormTimeIsp);
                                                }
                                            strNormTime += "\n";
                                            if (newNormTimeIsp.grLuchNormTimeIsp != null)
                                                if (newNormTimeIsp.grLuchNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.grLuchNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                            allTime += Convert.ToDouble(newNormTimeIsp.grLuchNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.grLuchNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grLuchNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grLuchNormTimeIsp));
                                                            itogNormTimeIsp.grLuchVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grLuchVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grLuchNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.grLuchNormTimeIsp);
                                                }
                                            strNormTime += "\n";
                                            if (newNormTimeIsp.grCrecerNormTimeIsp != null)
                                                if (newNormTimeIsp.grCrecerNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.grCrecerNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                            allTime += Convert.ToDouble(newNormTimeIsp.grCrecerNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.grCrecerNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grCrecerNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grCrecerNormTimeIsp));
                                                            itogNormTimeIsp.grCrecerVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grCrecerVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grCrecerNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.grCrecerNormTimeIsp);
                                                }
                                            strNormTime += "\n";
                                            if (newNormTimeIsp.grMeteoNormTimeIsp != null)
                                                if (newNormTimeIsp.grMeteoNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.grMeteoNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                            allTime += Convert.ToDouble(newNormTimeIsp.grMeteoNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.grMeteoNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grMeteoNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grMeteoNormTimeIsp));
                                                            itogNormTimeIsp.grMeteoVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grMeteoVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grMeteoNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.grMeteoNormTimeIsp);
                                                }
                                            strNormTime += "\n";
                                            if (newNormTimeIsp.grKamaNormTimeIsp != null)
                                                if (newNormTimeIsp.grKamaNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.grKamaNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                            allTime += Convert.ToDouble(newNormTimeIsp.grKamaNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.grKamaNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grKamaNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grKamaNormTimeIsp));
                                                            itogNormTimeIsp.grKamaVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grKamaVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grKamaNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.grKamaNormTimeIsp);
                                                }
                                            strNormTime += "\n";
                                            if (newNormTimeIsp.grSolenoidsNormTimeIsp != null)
                                                if (newNormTimeIsp.grSolenoidsNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.grSolenoidsNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol)) + "\n";
                                                            allTime += Convert.ToDouble(newNormTimeIsp.grSolenoidsNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.grSolenoidsNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grSolenoidsNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grSolenoidsNormTimeIsp));
                                                            itogNormTimeIsp.grSolenoidsVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grSolenoidsVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grSolenoidsNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.grSolenoidsNormTimeIsp);
                                                }
                                            if (newNormTimeIsp.grGDINormTimeIsp != null)
                                                if (newNormTimeIsp.grGDINormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.grGDINormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol)) + "\n";
                                                            allTime += Convert.ToDouble(newNormTimeIsp.grGDINormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.grGDINormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grGDINormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grGDINormTimeIsp));
                                                            itogNormTimeIsp.grGDIVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grGDIVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grGDINormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.grGDINormTimeIsp);
                                                }
                                            if (newNormTimeIsp.grSVKNormTimeIsp != null)
                                                if (newNormTimeIsp.grSVKNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.grSVKNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol)) + "\n";
                                                            allTime += Convert.ToDouble(newNormTimeIsp.grSVKNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.grSVKNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grSVKNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grSVKNormTimeIsp));
                                                            itogNormTimeIsp.grSVKVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grSVKVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grSVKNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.grSVKNormTimeIsp);
                                                }
                                            if (newNormTimeIsp.grVeterNormTimeIsp != null)
                                                if (newNormTimeIsp.grVeterNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.grVeterNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol)) + "\n";
                                                            allTime += Convert.ToDouble(newNormTimeIsp.grVeterNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.grVeterNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grVeterNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grVeterNormTimeIsp));
                                                            itogNormTimeIsp.grVeterVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grVeterVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grVeterNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.grVeterNormTimeIsp);
                                                }
                                            if (newNormTimeIsp.grZummerNormTimeIsp != null)
                                                if (newNormTimeIsp.grZummerNormTimeIsp != "0")
                                                {
                                                    if (pl.vYearPlIspKontrol != null)
                                                        if (pl.vYearPlIspKontrol.Length > 0)
                                                        {
                                                            strNormTime += String.Format("{0:0.00}", Convert.ToDouble(newNormTimeIsp.grZummerNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol)) + "\n";
                                                            allTime += Convert.ToDouble(newNormTimeIsp.grZummerNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol);
                                                            itogNormTimeIsp.grZummerNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grZummerNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grZummerNormTimeIsp));
                                                            itogNormTimeIsp.grZummerVPNormTimeIsp = Convert.ToString(Convert.ToDouble(itogNormTimeIsp.grZummerVPNormTimeIsp) + Convert.ToDouble(newNormTimeIsp.grZummerNormTimeIsp) * Convert.ToDouble(pl.vYearPlIspKontrol));
                                                        }
                                                    allNormTime += Convert.ToDouble(newNormTimeIsp.grZummerNormTimeIsp);
                                                }
                                            wordCellRange.Text = strNormTime;
                                        }
                                    }
                                    oTable.Rows.Add();
                                    positionRows++;
                                    Word.Range rangeItog = oTable.Cell(positionRows, 4).Range;
                                    rangeItog.Rows.HeadingFormat = 0;
                                    rangeItog.Text = "Итого:";
                                    rangeItog.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                    rangeItog.Bold = 1;
                                    rangeItog = oTable.Cell(positionRows, 5).Range;
                                    rangeItog.Rows.HeadingFormat = 0;
                                    rangeItog.Text = String.Format("{0:0.00}", allNormTime);
                                    rangeItog = oTable.Cell(positionRows, 6).Range;
                                    rangeItog.Rows.HeadingFormat = 0;
                                    rangeItog.Text = pl.vYearPlIspKontrol;
                                    rangeItog = oTable.Cell(positionRows, 7).Range;
                                    rangeItog.Rows.HeadingFormat = 0;
                                    rangeItog.Text = String.Format("{0:0.00}", allTime);
                                    bool proverkaItog = false;
                                    if (posCodeElement + 1 <= plIspResultList.Count - 1)
                                        if (sortedList.ToArray()[posCodeElement + 1].codeElementPlIspKontrol != pl.codeElementPlIspKontrol)
                                        {
                                            proverkaItog = true;
                                        }
                                        else if (pl.vYearPlIspKontrol != null)
                                            vIspNormTime += Convert.ToDouble(pl.vYearPlIspKontrol);
                                        else
                                            vIspNormTime += 0;
                                    else
                                        proverkaItog = true;
                                    if (proverkaItog)
                                    {
                                        oTable.Rows.Add();
                                        positionRows++;
                                        Word.Range rangeAllItog = oTable.Cell(positionRows, 3).Range;
                                        rangeAllItog.Rows.HeadingFormat = 0;
                                        rangeAllItog.Text = "Итого по изделию:";
                                        rangeAllItog.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                        rangeAllItog.Bold = 1;
                                        rangeAllItog = oTable.Cell(positionRows, 4).Range;
                                        rangeAllItog.Text = itogNormTimeIsp.strNameNormTimeIsp();
                                        rangeAllItog.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                        rangeAllItog.Rows.HeadingFormat = 0;
                                        rangeAllItog.Bold = 0;
                                        //Выводим нормчасы по всему изделию
                                        rangeAllItog = oTable.Cell(positionRows, 5).Range;
                                        rangeAllItog.Text = itogNormTimeIsp.strNormTimeIsp();
                                        //Выводим трудозатраты по всему изделию
                                        rangeAllItog = oTable.Cell(positionRows, 7).Range;
                                        string strNormTime = "";
                                        double allTimeItog = 0;
                                        double allNormTimeItog = 0;
                                        if (itogNormTimeIsp.firstCehNormTimeIsp != null)
                                            if (itogNormTimeIsp.firstCehNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.firstCehVPNormTimeIsp));
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.firstCehNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.firstCehVPNormTimeIsp);
                                            }
                                        strNormTime += "\n";
                                        if (itogNormTimeIsp.secondCehNormTimeIsp != null)
                                            if (itogNormTimeIsp.secondCehNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.secondCehVPNormTimeIsp));
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.secondCehNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.secondCehVPNormTimeIsp);
                                            }
                                        strNormTime += "\n";
                                        if (itogNormTimeIsp.thirdCehNormTimeIsp != null)
                                            if (itogNormTimeIsp.thirdCehNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.thirdCehVPNormTimeIsp)) + "\n";
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.thirdCehNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.thirdCehVPNormTimeIsp);
                                            }
                                        if (itogNormTimeIsp.temperNormTimeIsp != null)
                                            if (itogNormTimeIsp.temperNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.temperVPNormTimeIsp));
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.temperNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.temperVPNormTimeIsp);
                                            }
                                        strNormTime += "\n";
                                        if (itogNormTimeIsp.otkNormTimeIsp != null)
                                            if (itogNormTimeIsp.otkNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.otkVPNormTimeIsp));
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.otkNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.otkVPNormTimeIsp);
                                            }
                                        strNormTime += "\n";
                                        if (itogNormTimeIsp.twoNormTimeIsp != null)
                                            if (itogNormTimeIsp.twoNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.twoVPNormTimeIsp));
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.twoNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.twoVPNormTimeIsp);
                                            }
                                        strNormTime += "\n";
                                        if (itogNormTimeIsp.fiveNormTimeIsp != null)
                                            if (itogNormTimeIsp.fiveNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.fiveVPNormTimeIsp)) + "\n";
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.fiveNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.fiveVPNormTimeIsp);
                                            }
                                        strNormTime += "\n";
                                        if (itogNormTimeIsp.grLuchNormTimeIsp != null)
                                            if (itogNormTimeIsp.grLuchNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.grLuchVPNormTimeIsp));
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.grLuchNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.grLuchVPNormTimeIsp);
                                            }
                                        strNormTime += "\n";
                                        if (itogNormTimeIsp.grCrecerNormTimeIsp != null)
                                            if (itogNormTimeIsp.grCrecerNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.grCrecerVPNormTimeIsp));
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.grCrecerNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.grCrecerVPNormTimeIsp);
                                            }
                                        strNormTime += "\n";
                                        if (itogNormTimeIsp.grMeteoNormTimeIsp != null)
                                            if (itogNormTimeIsp.grMeteoNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.grMeteoVPNormTimeIsp));
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.grMeteoNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.grMeteoVPNormTimeIsp);
                                            }
                                        strNormTime += "\n";
                                        if (itogNormTimeIsp.grKamaNormTimeIsp != null)
                                            if (itogNormTimeIsp.grKamaNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.grKamaVPNormTimeIsp));
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.grKamaNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.grKamaVPNormTimeIsp);
                                            }
                                        strNormTime += "\n";
                                        if (itogNormTimeIsp.grSolenoidsNormTimeIsp != null)
                                            if (itogNormTimeIsp.grSolenoidsNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.grSolenoidsVPNormTimeIsp)) + "\n";
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.grSolenoidsNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.grSolenoidsVPNormTimeIsp);
                                            }
                                        if (itogNormTimeIsp.grGDINormTimeIsp != null)
                                            if (itogNormTimeIsp.grGDINormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.grGDIVPNormTimeIsp)) + "\n";
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.grGDINormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.grGDIVPNormTimeIsp);
                                            }
                                        if (itogNormTimeIsp.grSVKNormTimeIsp != null)
                                            if (itogNormTimeIsp.grSVKNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.grSVKVPNormTimeIsp)) + "\n";
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.grSVKNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.grSVKVPNormTimeIsp);
                                            }
                                        if (itogNormTimeIsp.grVeterNormTimeIsp != null)
                                            if (itogNormTimeIsp.grVeterNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.grVeterVPNormTimeIsp)) + "\n";
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.grVeterNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.grVeterVPNormTimeIsp);
                                            }
                                        if (itogNormTimeIsp.grZummerNormTimeIsp != null)
                                            if (itogNormTimeIsp.grZummerNormTimeIsp != "0" && vIspNormTime > 0)
                                            {
                                                strNormTime += String.Format("{0:0.00}", Convert.ToDouble(itogNormTimeIsp.grZummerVPNormTimeIsp));
                                                allTimeItog += Convert.ToDouble(itogNormTimeIsp.grZummerNormTimeIsp);
                                                allNormTimeItog += Convert.ToDouble(itogNormTimeIsp.grZummerVPNormTimeIsp);
                                            }
                                        rangeAllItog.Text = strNormTime;
                                        //Итог итога
                                        oTable.Rows.Add();
                                        positionRows++;
                                        rangeAllItog = oTable.Cell(positionRows, 4).Range;
                                        rangeAllItog.Rows.HeadingFormat = 0;
                                        rangeAllItog.Text = "Итого:";
                                        rangeAllItog.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                        rangeAllItog.Bold = 1;
                                        //Сумма нормчасов
                                        rangeAllItog = oTable.Cell(positionRows, 5).Range;
                                        rangeAllItog.Text = Convert.ToString(allTimeItog);
                                        //Трудозатраты
                                        rangeAllItog = oTable.Cell(positionRows, 7).Range;
                                        rangeAllItog.Text = Convert.ToString(allNormTimeItog);
                                        itogNormTimeIsp = new ClassNormTimeIsp();
                                        vIspNormTime = 0;
                                        if (pl.vYearPlIspKontrol != null)
                                            if (pl.vYearPlIspKontrol.Length > 0)
                                                vIspNormTime = Convert.ToDouble(pl.vYearPlIspKontrol);
                                        positionRows++;
                                    }
                                    posCodeElement++;
                                    positionRows++;
                                }
                            }
                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание экземпляров"));
                            //Создание экземпляров
                            wordDocument.Range().Copy();
                            var rangeAllDocumentEkz = wordDocument.Content;
                            rangeAllDocumentEkz.Find.ClearFormatting();
                            for (int j = 0; j < plIspResultList.Count; j++)
                            {
                                functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                            }
                            for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                            {
                                //В конец документа
                                object what = Word.WdGoToItem.wdGoToLine;
                                object which = Word.WdGoToDirection.wdGoToLast;
                                Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                //Создаем разрыв РАЗДЕЛА (не страниц)
                                endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                //Вставляем
                                endRange.Paste();
                                rangeAllDocumentEkz = wordDocument.Content;
                                rangeAllDocumentEkz.Find.ClearFormatting();
                                rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                            }
                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: сохранение документа"));
                            //Сохранение
                            dateNowFileName = DateTime.Now;
                            string strSaveName = Convert.ToString(dateNowFileName);
                            strSaveName = strSaveName.Replace(':', '-');
                            if (form21.typePrint == 1)
                                wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\Результ ПЛАН ТРУДОЗАТРАТ НА СБОРКУ " + strSaveName + ".docx");
                            else
                                wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\Результ ПЛАН ТРУДОЗАТРАТ ДЛЯ ИСПЫТАНИЙ " + strSaveName + ".docx");
                            wordDocument.Close();
                        }
                        catch
                        {
                            MessageBox.Show("Ошибка!");
                            printProverka = false;
                        }
                        finally
                        {
                            oWord.Quit();
                            if (printProverka)
                                if (form21.typePrint == 1)
                                    functionMessageShow(2, "Трудозатраты на сборку напечатаны!");
                                else
                                    functionMessageShow(2, "Трудозатраты для испытаний напечатаны!");
                            label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = ""));
                            button215.BeginInvoke((MethodInvoker)(() => this.button215.Enabled = true));
                            button214.BeginInvoke((MethodInvoker)(() => this.button214.Enabled = true));
                            button213.BeginInvoke((MethodInvoker)(() => this.button213.Enabled = true));
                            button212.BeginInvoke((MethodInvoker)(() => this.button212.Enabled = true));
                            button274.BeginInvoke((MethodInvoker)(() => this.button274.Enabled = true));
                            button286.BeginInvoke((MethodInvoker)(() => this.button286.Enabled = true));
                            button218.BeginInvoke((MethodInvoker)(() => this.button218.Enabled = true));
                            button287.BeginInvoke((MethodInvoker)(() => this.button287.Enabled = true));
                            button288.BeginInvoke((MethodInvoker)(() => this.button288.Enabled = true));
                            button289.BeginInvoke((MethodInvoker)(() => this.button289.Enabled = true));
                        }
                    }).Start();
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //Печать заявов на комплектующие
        private void button287_Click(object sender, EventArgs e)
        {
            Form21 form21 = new Form21(true, true);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                functionQueryPlIspResult(yearPrintResult, numberPrintResult);
                //functionQueryVK();
                functionQueryNoneVk();
                potrVKEResultList.Clear();
                if (form21.typePrint == 1)
                    functionPotrVKEResultForming(yearPrintResult, false);
                else
                    functionPotrVKEResultForming(yearPrintResult, true);
                if (plIspResultList.Count > 0)
                {
                    if (potrVKEResultList.Count > 0)
                    {
                        bool printProverka = true;
                        button215.Enabled = false;
                        button214.Enabled = false;
                        button213.Enabled = false;
                        button212.Enabled = false;
                        button274.Enabled = false;
                        button286.Enabled = false;
                        button218.Enabled = false;
                        button287.Enabled = false;
                        button288.Enabled = false;
                        button289.Enabled = false;
                        //Количество экземпляров
                        string countEkz = form21.textBox2.Text;
                        //Учетный номер
                        string uchNumber = form21.textBox1.Text;
                        //WORD
                        label286.Text = "Печать: подготовка документа к печати";
                        new Thread(() =>
                        {
                            Word.Application oWord = new Word.Application();
                            oWord.Visible = true;
                            try
                            {
                                string namePositionFactoryInWord = null;
                                int positionInSortedList = 0;
                                int positionRows = 4;
                                int printVKECount = 1;
                                var sortedList = potrVKEResultList.OrderBy(a => a.codeFactoryPostPotrVKEKontrol).ThenBy(b => b.codeElementPotrVKEKontrol);
                                Word.Document wordDocument = null;
                                Word.Table oTable = null;
                                foreach (ClassPotrVKEKontrol vke in sortedList)
                                {
                                    if (namePositionFactoryInWord == null || namePositionFactoryInWord != vke.codeFactoryPostPotrVKEKontrol)
                                    {
                                        positionRows = 4;
                                        //Открытие документа
                                        if (form21.typePrint == 1)
                                            wordDocument = oWord.Documents.Open(templateFileNameWordQueryResult);
                                        else
                                            wordDocument = oWord.Documents.Open(templateFileNameWordQueryResult);
                                        //Поиск и замена текста
                                        functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                                        if (uchNumber.Length > 0)
                                            uchNumber = Convert.ToString(Convert.ToInt32(uchNumber) + 1);
                                        functionReplaceInText(wordDocument, oWord, "{year}", yearPrintResult);
                                        functionReplaceInText(wordDocument, oWord, "{nameQuery}", "специальных комплектующих изделий");
                                        //Добавление в файл таблицы
                                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание титульного листа"));
                                        Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                                        //Добавление в файл таблицы
                                        var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                        wordDocument.Tables.Add(range, 1, 9, autoFitBehavior);
                                        oTable = wordDocument.Tables[1];
                                        string[] nameHeaderTable = { "Наименование комплектующего изделия, код ОКП", "Организация поставщик, ИНН", "Наименование комплектуемого (ремонтируемого) изделия, код ОКП", "Организация потребитель, ИНН", "Единица измерения", "Стоимость единицы продукции в ценах на 01.01.2015г. (тыс.руб.)", "Объем поставок", "Стоимость продукции (тыс.руб.)", "Результилизационное задание применительно к условиям 2010 года (объем поставок)", "год", "1 кв", "2 кв", "3 кв", "4 кв" };
                                        for (int i = 0; i < oTable.Columns.Count; i++)
                                        {
                                            Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                            wordCellRange.Text = nameHeaderTable[i];
                                            wordCellRange.Rows.HeadingFormat = -1;
                                            wordCellRange.Font.Name = "Times New Roman";
                                            wordCellRange.Font.Bold = 1;
                                            wordCellRange.Font.Size = 11;
                                        }
                                        /*oTable.Cell(1, 1).Width = 35;
                                        oTable.Cell(1, 2).Width = 120;
                                        oTable.Cell(1, 3).Width = 60;
                                        oTable.Cell(1, 4).Width = 80;
                                        oTable.Cell(1, 5).Width = 50;
                                        oTable.Cell(1, 6).Width = 320;
                                        oTable.Cell(1, 7).Width = 120;*/
                                        oTable.Cell(1, 7).Split(2, 1);
                                        oTable.Cell(2, 7).Split(1, 5);
                                        /*oTable.Cell(2, 6).Width = 80;
                                        oTable.Cell(2, 7).Width = 60;
                                        oTable.Cell(2, 8).Width = 60;
                                        oTable.Cell(2, 9).Width = 60;
                                        oTable.Cell(2, 10).Width = 60;
                                        oTable.Cell(1, 7).Merge(oTable.Cell(2, 11));*/
                                        for (int i = 7; i < 12; i++)
                                        {
                                            Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                            wordCellRange.Text = nameHeaderTable[i + 2];
                                            wordCellRange.Rows.HeadingFormat = -1;
                                            wordCellRange.Font.Bold = 1;
                                        }
                                        oTable.Rows.Add();
                                        for (int i = 1; i < 14; i++)
                                        {
                                            Word.Range wordCellRange = oTable.Cell(3, i).Range;
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                            wordCellRange.Text = Convert.ToString(i);
                                            wordCellRange.Rows.HeadingFormat = -1;
                                            wordCellRange.Font.Bold = 1;
                                        }
                                        namePositionFactoryInWord = vke.codeFactoryPostPotrVKEKontrol;
                                    }
                                    label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: печать потребности " + printVKECount + " из " + potrVKEResultList.Count));
                                    printVKECount++;
                                    oTable.Rows.Add();
                                    int positionNewRows = positionRows;
                                    for (int j = 0; j < 13; j++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                        wordCellRange.Rows.HeadingFormat = 0;
                                        wordCellRange.Font.Bold = 0;
                                        if (j == 0)
                                        {
                                            wordCellRange.Text = "     " + vke.codeElementPotrVKEKontrol + "\n" + vke.pictureElementPotrVKEKontrol + "\n" + vke.indexElementPotrVKEKontrol + "\n" + vke.nameElementPotrVKEKontrol;
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                        }
                                        if (j == 1)
                                        {
                                            wordCellRange.Text = vke.codeFactoryPostPotrVKEKontrol + "\n" + vke.nameFactoryPostPotrVKEKontrol + ",\nИНН\n" + vke.innFactoryPostPotrVKEKontrol;
                                        }
                                        if (j == 2)
                                        {
                                            int countNewRows = 0;
                                            foreach (ClassPlIspKontrol pl in vke.ispEl)
                                            {
                                                wordCellRange = oTable.Cell(positionNewRows, j + 1).Range;
                                                wordCellRange.Font.Bold = 0;
                                                wordCellRange.Text = "     " + pl.codeElementPlIspKontrol + "\n" + pl.pictureElementPlIspKontrol + "\n" + pl.indexElementPlIspKontrol + "\n" + pl.nameElementPlIspKontrol;
                                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                                wordCellRange = oTable.Cell(positionNewRows, j + 2).Range;
                                                wordCellRange.Font.Bold = 0;
                                                wordCellRange.Rows.HeadingFormat = 0;
                                                if (form21.typePrint == 1)
                                                    wordCellRange.Text = "ФКП \"НТИИМ\" г. Нижний Тагил\nИНН\n6668000472 (для сборки " + pl.nameFactoryPlIspKontrol + ")";
                                                else
                                                    wordCellRange.Text = "ФКП \"НТИИМ\" г. Нижний Тагил\nИНН\n6668000472 (для испытаний " + pl.nameFactoryPlIspKontrol + ")";
                                                if (countNewRows < vke.ispEl.Count - 1)
                                                {
                                                    oTable.Rows.Add();
                                                    positionNewRows++;
                                                }
                                                countNewRows++;
                                            }
                                        }
                                        if (j == 4)
                                            wordCellRange.Text = vke.nameEdIzmPotrVKEKontrol;
                                        if (j == 5)
                                            wordCellRange.Text = "";
                                        if (j == 6)
                                            wordCellRange.Text = Convert.ToString(vke.vYearPotrVKEKontrol);
                                        if (j == 7)
                                            wordCellRange.Text = Convert.ToString(vke.vOnePotrVKEKontrol);
                                        if (j == 8)
                                            wordCellRange.Text = Convert.ToString(vke.vTwoPotrVKEKontrol);
                                        if (j == 9)
                                            wordCellRange.Text = Convert.ToString(vke.vThrePotrVKEKontrol);
                                        if (j == 10)
                                            wordCellRange.Text = Convert.ToString(vke.vThourPotrVKEKontrol);
                                        if (j == 11)
                                            wordCellRange.Text = "";
                                        if (j == 12)
                                            wordCellRange.Text = "";
                                    }
                                    positionRows = positionNewRows;
                                    positionRows++;
                                    bool proverkaEndList = false;
                                    if (positionInSortedList < sortedList.Count() - 1)
                                    {
                                        if (sortedList.ToArray()[positionInSortedList + 1].codeFactoryPostPotrVKEKontrol != namePositionFactoryInWord)
                                        {
                                            proverkaEndList = true;
                                        }
                                    }
                                    else
                                    {
                                        proverkaEndList = true;
                                    }
                                    if (proverkaEndList)
                                    {
                                        wordDocument.Paragraphs.Add();
                                        Word.Range endParagraph = wordDocument.GoTo(Word.WdGoToItem.wdGoToLine, Word.WdGoToDirection.wdGoToLast);
                                        endParagraph.Text = "Генеральный директор ФКП \"НТИИМ\"\t\t\t\t\t\tН.П.Смирнов\nСОГЛАСОВАНО:\n";
                                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание экземпляров"));
                                        //Создание экземпляров
                                        wordDocument.Range().Copy();
                                        var rangeAllDocumentEkz = wordDocument.Content;
                                        rangeAllDocumentEkz.Find.ClearFormatting();
                                        for (int j = 0; j < plIspResultList.Count; j++)
                                        {
                                            functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                                        }
                                        for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                                        {
                                            //В конец документа
                                            object what = Word.WdGoToItem.wdGoToLine;
                                            object which = Word.WdGoToDirection.wdGoToLast;
                                            Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                            //Создаем разрыв РАЗДЕЛА (не страниц)
                                            endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                            //Вставляем
                                            endRange.Paste();
                                            rangeAllDocumentEkz = wordDocument.Content;
                                            rangeAllDocumentEkz.Find.ClearFormatting();
                                            rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                        }
                                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: сохранение документа"));
                                        //Сохранение
                                        dateNowFileName = DateTime.Now;
                                        string strSaveName = Convert.ToString(dateNowFileName);
                                        strSaveName = strSaveName.Replace(':', '-');
                                        if (form21.typePrint == 1)
                                            wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\" + Regex.Replace(vke.nameFactoryPostPotrVKEKontrol, @"[^\w\.@-]", "") + " ЗАЯВКА НА КОМПЛЕКТУЮЩИЕ ДЛЯ СБОРКИ " + strSaveName + ".docx");
                                        else
                                            wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\" + Regex.Replace(vke.nameFactoryPostPotrVKEKontrol, @"[^\w\.@-]", "") + " ЗАЯВКА НА КОМПЛЕКТУЮЩИЕ ДЛЯ ИСПЫТАНИЙ " + strSaveName + ".docx");
                                        wordDocument.Close();
                                        if (DialogResult.Yes == MessageBox.Show("Вы желаете распечатать письмо?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                                            printMessageQuery(Regex.Replace(vke.nameFactoryPostPotrVKEKontrol, @"[^\w\.@-]", ""));
                                    }
                                    positionInSortedList++;
                                }
                            }
                            catch
                            {
                                MessageBox.Show("Ошибка!");
                                printProverka = false;
                            }
                            finally
                            {
                                oWord.Quit();
                                if (printProverka)
                                    if (form21.typePrint == 1)
                                        functionMessageShow(2, "Заявки на комплектующие для сборки напечатаны!");
                                    else
                                        functionMessageShow(2, "Заявки на комплектующие для испытаний напечатаны!");
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = ""));
                                button215.BeginInvoke((MethodInvoker)(() => this.button215.Enabled = true));
                                button214.BeginInvoke((MethodInvoker)(() => this.button214.Enabled = true));
                                button213.BeginInvoke((MethodInvoker)(() => this.button213.Enabled = true));
                                button212.BeginInvoke((MethodInvoker)(() => this.button212.Enabled = true));
                                button274.BeginInvoke((MethodInvoker)(() => this.button274.Enabled = true));
                                button286.BeginInvoke((MethodInvoker)(() => this.button286.Enabled = true));
                                button218.BeginInvoke((MethodInvoker)(() => this.button218.Enabled = true));
                                button287.BeginInvoke((MethodInvoker)(() => this.button287.Enabled = true));
                                button288.BeginInvoke((MethodInvoker)(() => this.button288.Enabled = true));
                                button289.BeginInvoke((MethodInvoker)(() => this.button289.Enabled = true));
                            }
                        }).Start();
                    }
                    else
                        functionMessageShow(1, "Не найдена потребность в комплектующих элементах!");
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //Печать заявок на матчасть
        private void button288_Click(object sender, EventArgs e)
        {
            Form21 form21 = new Form21(true, true);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                functionQueryPlIspResult(yearPrintResult, numberPrintResult);
                functionCreateMC();
                if (plIspResultList.Count > 0)
                {
                    if (potrMCList.Count > 0)
                    {
                        bool printProverka = true;
                        button215.Enabled = false;
                        button214.Enabled = false;
                        button213.Enabled = false;
                        button212.Enabled = false;
                        button274.Enabled = false;
                        button286.Enabled = false;
                        button218.Enabled = false;
                        button287.Enabled = false;
                        button288.Enabled = false;
                        button289.Enabled = false;
                        //Количество экземпляров
                        string countEkz = form21.textBox2.Text;
                        //Учетный номер
                        string uchNumber = form21.textBox1.Text;
                        //WORD
                        label286.Text = "Печать: подготовка документа к печати";
                        new Thread(() =>
                        {
                            Word.Application oWord = new Word.Application();
                            oWord.Visible = true;
                            try
                            {
                                string namePositionFactoryInWord = null;
                                int positionInSortedList = 0;
                                int positionRows = 4;
                                int printVKECount = 1;
                                var sortedList = potrMCList.OrderBy(a => a.codeFactoryPost).ThenBy(b => b.codeMC5);
                                Word.Document wordDocument = null;
                                Word.Table oTable = null;
                                foreach (ClassPotrMC mc in sortedList)
                                {
                                    if (namePositionFactoryInWord == null || namePositionFactoryInWord != mc.codeFactoryPost)
                                    {
                                        positionRows = 4;
                                        //Открытие документа
                                        if (form21.typePrint == 1)
                                            wordDocument = oWord.Documents.Open(templateFileNameWordQueryResult);
                                        else
                                            wordDocument = oWord.Documents.Open(templateFileNameWordQueryResult);
                                        //Поиск и замена текста
                                        functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                                        if (uchNumber.Length > 0)
                                            uchNumber = Convert.ToString(Convert.ToInt32(uchNumber) + 1);
                                        functionReplaceInText(wordDocument, oWord, "{year}", yearPrintResult);
                                        functionReplaceInText(wordDocument, oWord, "{nameQuery}", "матчасти");
                                        //Добавление в файл таблицы
                                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание титульного листа"));
                                        Object autoFitBehavior = Word.WdAutoFitBehavior.wdAutoFitWindow;
                                        //Добавление в файл таблицы
                                        var range = wordDocument.Paragraphs[wordDocument.Paragraphs.Count - 1].Range;
                                        wordDocument.Tables.Add(range, 1, 9, autoFitBehavior);
                                        oTable = wordDocument.Tables[1];
                                        string[] nameHeaderTable = { "Наименование комплектующего изделия, код ОКП", "Организация поставщик, ИНН", "Наименование комплектуемого (ремонтируемого) изделия, код ОКП", "Организация потребитель, ИНН", "Единица измерения", "Стоимость единицы продукции в ценах на 01.01.2015г. (тыс.руб.)", "Объем поставок", "Стоимость продукции (тыс.руб.)", "Результилизационное задание применительно к условиям 2010 года (объем поставок)", "год", "1 кв", "2 кв", "3 кв", "4 кв" };
                                        for (int i = 0; i < oTable.Columns.Count; i++)
                                        {
                                            Word.Range wordCellRange = oTable.Cell(1, i + 1).Range;
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                            wordCellRange.Text = nameHeaderTable[i];
                                            wordCellRange.Rows.HeadingFormat = -1;
                                            wordCellRange.Font.Name = "Times New Roman";
                                            wordCellRange.Font.Bold = 1;
                                        }
                                        /*oTable.Cell(1, 1).Width = 35;
                                        oTable.Cell(1, 2).Width = 120;
                                        oTable.Cell(1, 3).Width = 60;
                                        oTable.Cell(1, 4).Width = 80;
                                        oTable.Cell(1, 5).Width = 50;
                                        oTable.Cell(1, 6).Width = 320;
                                        oTable.Cell(1, 7).Width = 120;*/
                                        oTable.Cell(1, 7).Split(2, 1);
                                        oTable.Cell(2, 7).Split(1, 5);
                                        /*oTable.Cell(2, 6).Width = 80;
                                        oTable.Cell(2, 7).Width = 60;
                                        oTable.Cell(2, 8).Width = 60;
                                        oTable.Cell(2, 9).Width = 60;
                                        oTable.Cell(2, 10).Width = 60;
                                        oTable.Cell(1, 7).Merge(oTable.Cell(2, 11));*/
                                        for (int i = 7; i < 12; i++)
                                        {
                                            Word.Range wordCellRange = oTable.Cell(2, i).Range;
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                            wordCellRange.Text = nameHeaderTable[i + 2];
                                            wordCellRange.Rows.HeadingFormat = -1;
                                            wordCellRange.Font.Bold = 1;
                                        }
                                        oTable.Rows.Add();
                                        for (int i = 1; i < 14; i++)
                                        {
                                            Word.Range wordCellRange = oTable.Cell(3, i).Range;
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                            wordCellRange.Text = Convert.ToString(i);
                                            wordCellRange.Rows.HeadingFormat = -1;
                                            wordCellRange.Font.Bold = 1;
                                        }
                                        namePositionFactoryInWord = mc.codeFactoryPost;
                                    }
                                    label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: печать матчасти " + printVKECount + " из " + potrMCList.Count));
                                    printVKECount++;
                                    oTable.Rows.Add();
                                    int positionNewRows = positionRows;
                                    for (int j = 0; j < 13; j++)
                                    {
                                        Word.Range wordCellRange = oTable.Cell(positionRows, j + 1).Range;
                                        wordCellRange.Rows.HeadingFormat = 0;
                                        wordCellRange.Font.Bold = 0;
                                        if (j == 0)
                                        {
                                            wordCellRange.Text = "     " + mc.codeMC5 + "\n" + mc.fullNameMC;
                                            wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                        }
                                        if (j == 1)
                                        {
                                            wordCellRange.Text = mc.codeFactoryPost + "\n" + mc.nameFactoryPost + ", ИНН " + mc.innFactoryPost;
                                        }
                                        if (j == 2)
                                        {
                                            int countNewRows = 0;
                                            foreach (ClassPlIspKontrol pl in mc.plIspList)
                                            {
                                                wordCellRange = oTable.Cell(positionNewRows, j + 1).Range;
                                                wordCellRange.Font.Bold = 0;
                                                wordCellRange.Text = "     " + pl.codeElementPlIspKontrol + "\n" + pl.pictureElementPlIspKontrol + "\n" + pl.indexElementPlIspKontrol + "\n" + pl.nameElementPlIspKontrol;
                                                wordCellRange.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                                wordCellRange = oTable.Cell(positionNewRows, j + 2).Range;
                                                wordCellRange.Font.Bold = 0;
                                                wordCellRange.Rows.HeadingFormat = 0;
                                                if (form21.typePrint == 1)
                                                    wordCellRange.Text = "ФКП \"НТИИМ\" г. Нижний Тагил ИНН 6668000472 (для сборки " + pl.nameFactoryPlIspKontrol + ")";
                                                else
                                                    wordCellRange.Text = "ФКП \"НТИИМ\" г. Нижний Тагил ИНН 6668000472 (для испытаний " + pl.nameFactoryPlIspKontrol + ")";
                                                if (countNewRows < mc.plIspList.Count - 1)
                                                {
                                                    oTable.Rows.Add();
                                                    positionNewRows++;
                                                }
                                                countNewRows++;
                                            }
                                        }
                                        if (j == 4)
                                            wordCellRange.Text = mc.nameEdIzm;
                                        if (j == 5)
                                            wordCellRange.Text = "";
                                        if (j == 6)
                                        {
                                            double promPotrMCYear = 0;
                                            foreach (string strMC in mc.vYearPotrMC)
                                                promPotrMCYear += Convert.ToDouble(strMC);
                                            wordCellRange.Text = Convert.ToString(Math.Ceiling(promPotrMCYear));
                                        }
                                        if (j == 7)
                                        {
                                            double promPotrMCOne = 0;
                                            foreach (string strMC in mc.vOnePotrMC)
                                                promPotrMCOne += Convert.ToDouble(strMC);
                                            if (Math.Floor(promPotrMCOne) > 0)
                                                wordCellRange.Text = Convert.ToString(Math.Floor(promPotrMCOne));
                                        }
                                        if (j == 8)
                                        {
                                            double promPotrMCTwo = 0;
                                            foreach (string strMC in mc.vTwoPotrMC)
                                                promPotrMCTwo += Convert.ToDouble(strMC);
                                            if (Math.Floor(promPotrMCTwo) > 0)
                                                wordCellRange.Text = Convert.ToString(Math.Floor(promPotrMCTwo));
                                        }
                                        if (j == 9)
                                        {
                                            double promPotrMCThree = 0;
                                            foreach (string strMC in mc.vThreePotrMC)
                                                promPotrMCThree += Convert.ToDouble(strMC);
                                            if (Math.Floor(promPotrMCThree) > 0)
                                                wordCellRange.Text = Convert.ToString(Math.Floor(promPotrMCThree));
                                        }
                                        if (j == 10)
                                        {
                                            double promPotrMCThour = 0;
                                            foreach (string strMC in mc.vThourPotrMC)
                                                promPotrMCThour += Convert.ToDouble(strMC);
                                            if (Math.Floor(promPotrMCThour) > 0)
                                                wordCellRange.Text = Convert.ToString(Math.Floor(promPotrMCThour));
                                        }
                                        if (j == 11)
                                            wordCellRange.Text = "";
                                        if (j == 12)
                                            wordCellRange.Text = "";
                                    }
                                    positionRows = positionNewRows;
                                    positionRows++;
                                    bool proverkaEndList = false;
                                    if (positionInSortedList < sortedList.Count() - 1)
                                    {
                                        if (sortedList.ToArray()[positionInSortedList + 1].codeFactoryPost != namePositionFactoryInWord)
                                        {
                                            proverkaEndList = true;
                                        }
                                    }
                                    else
                                    {
                                        proverkaEndList = true;
                                    }
                                    if (proverkaEndList)
                                    {
                                        wordDocument.Paragraphs.Add();
                                        Word.Range endParagraph = wordDocument.GoTo(Word.WdGoToItem.wdGoToLine, Word.WdGoToDirection.wdGoToLast);
                                        endParagraph.Text = "Генеральный директор ФКП \"НТИИМ\"\t\t\t\t\t\tН.П.Смирнов\nСОГЛАСОВАНО:\n";
                                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание экземпляров"));
                                        //Создание экземпляров
                                        wordDocument.Range().Copy();
                                        var rangeAllDocumentEkz = wordDocument.Content;
                                        rangeAllDocumentEkz.Find.ClearFormatting();
                                        for (int j = 0; j < plIspResultList.Count; j++)
                                        {
                                            functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                                        }
                                        for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                                        {
                                            //В конец документа
                                            object what = Word.WdGoToItem.wdGoToLine;
                                            object which = Word.WdGoToDirection.wdGoToLast;
                                            Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                                            //Создаем разрыв РАЗДЕЛА (не страниц)
                                            endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                                            //Вставляем
                                            endRange.Paste();
                                            rangeAllDocumentEkz = wordDocument.Content;
                                            rangeAllDocumentEkz.Find.ClearFormatting();
                                            rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                                        }
                                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: сохранение документа"));
                                        //Сохранение
                                        dateNowFileName = DateTime.Now;
                                        string strSaveName = Convert.ToString(dateNowFileName);
                                        strSaveName = strSaveName.Replace(':', '-');
                                        if (form21.typePrint == 1)
                                            wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\" + Regex.Replace(mc.nameFactoryPost, @"[^\w\.@-]", "") + " ЗАЯВКА НА МАТЧАСТЬ ДЛЯ СБОРКИ " + strSaveName + ".docx");
                                        else
                                            wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\" + Regex.Replace(mc.nameFactoryPost, @"[^\w\.@-]", "") + " ЗАЯВКА НА МАТЧАСТЬ ДЛЯ ИСПЫТАНИЙ " + strSaveName + ".docx");
                                        wordDocument.Close();
                                    }
                                    positionInSortedList++;
                                }
                            }
                            catch
                            {
                                MessageBox.Show("Ошибка!");
                                printProverka = false;
                            }
                            finally
                            {
                                oWord.Quit();
                                if (printProverka)
                                    if (form21.typePrint == 1)
                                        functionMessageShow(2, "Заявки на матчасть для сборки напечатаны!");
                                    else
                                        functionMessageShow(2, "Заявки на матчасть для испытаний напечатаны!");
                                label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = ""));
                                button215.BeginInvoke((MethodInvoker)(() => this.button215.Enabled = true));
                                button214.BeginInvoke((MethodInvoker)(() => this.button214.Enabled = true));
                                button213.BeginInvoke((MethodInvoker)(() => this.button213.Enabled = true));
                                button212.BeginInvoke((MethodInvoker)(() => this.button212.Enabled = true));
                                button274.BeginInvoke((MethodInvoker)(() => this.button274.Enabled = true));
                                button286.BeginInvoke((MethodInvoker)(() => this.button286.Enabled = true));
                                button218.BeginInvoke((MethodInvoker)(() => this.button218.Enabled = true));
                                button287.BeginInvoke((MethodInvoker)(() => this.button287.Enabled = true));
                                button288.BeginInvoke((MethodInvoker)(() => this.button288.Enabled = true));
                                button289.BeginInvoke((MethodInvoker)(() => this.button289.Enabled = true));
                            }
                        }).Start();
                    }
                    else
                        functionMessageShow(1, "Не найдена потребность в матчасти!");
                }
                else
                    functionMessageShow(1, "Не найден план испытаний на данный период!");
            }
        }

        //Печать заявок на бронеплиты
        private void button289_Click(object sender, EventArgs e)
        {

        }

        private void printMessageQuery(string nameFactoryQuery)
        {
            Form21 form21 = new Form21(false, false);
            form21.ShowDialog();
            if (form21.exitAgree)
            {
                bool printProverka = true;
                //Количество экземпляров
                string countEkz = form21.textBox2.Text;
                //Учетный номер
                string uchNumber = form21.textBox1.Text;
                //WORD
                label286.Text = "Печать: подготовка документа к печати";
                new Thread(() =>
                {
                    Word.Application oWord = new Word.Application();
                    oWord.Visible = false;
                    try
                    {
                        //Открытие документа
                        Word.Document wordDocument;
                        wordDocument = oWord.Documents.Open(templateFileNameWordKrImuResult);
                        //Поиск и замена текста
                        functionReplaceInText(wordDocument, oWord, "{uchNumber}", uchNumber);
                        functionReplaceInText(wordDocument, oWord, "{year}", yearPrintResult);
                        //Замена основного текста
                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание титульного листа"));

                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: создание экземпляров"));
                        //Создание экземпляров
                        wordDocument.Range().Copy();
                        var rangeAllDocumentEkz = wordDocument.Content;
                        rangeAllDocumentEkz.Find.ClearFormatting();
                        for (int j = 0; j < plIspResultList.Count; j++)
                        {
                            functionReplaceInText(wordDocument, oWord, "{numberEkz}", "1");
                        }
                        for (int i = 0; i < Convert.ToInt32(countEkz) - 1; i++)
                        {
                            //В конец документа
                            object what = Word.WdGoToItem.wdGoToLine;
                            object which = Word.WdGoToDirection.wdGoToLast;
                            Word.Range endRange = wordDocument.GoTo(ref what, ref which);
                            //Создаем разрыв РАЗДЕЛА (не страниц)
                            endRange.InsertBreak(Word.WdBreakType.wdSectionBreakNextPage);
                            //Вставляем
                            endRange.Paste();
                            rangeAllDocumentEkz = wordDocument.Content;
                            rangeAllDocumentEkz.Find.ClearFormatting();
                            rangeAllDocumentEkz.Find.Execute(FindText: "{numberEkz}", ReplaceWith: i + 2);
                        }
                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = "Печать: сохранение документа"));
                        //Сохранение
                        dateNowFileName = DateTime.Now;
                        string strSaveName = Convert.ToString(dateNowFileName);
                        strSaveName = strSaveName.Replace(':', '-');
                        wordDocument.SaveAs(mainDirectoryForSave + @"Результ ПЛАН\" + nameFactoryQuery + " ПИСЬМО " + strSaveName + ".docx");
                        wordDocument.Close();
                    }
                    catch
                    {
                        MessageBox.Show("Ошибка при печати письма!");
                        printProverka = false;
                    }
                    finally
                    {
                        oWord.Quit();
                        if (printProverka)
                            functionMessageShow(2, "Письмо напечатано!");
                        label286.BeginInvoke((MethodInvoker)(() => this.label286.Text = ""));
                    }
                }).Start();
            }
        }

        //Определение текущей страницы
        private Tuple <bool, int> listPositionInWordDocument(int page, Word.Range range)
        {
            if (page == range.Information[Word.WdInformation.wdActiveEndPageNumber])
                return Tuple.Create(true, page);
            else
                return Tuple.Create(false, range.Information[Word.WdInformation.wdActiveEndPageNumber]);
        }


        //------------------------------ПРОВЕРКА TEXTBOX------------------------------
        //Авторизация
        private void textBox355_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == 13)
            {
                functionFocusTextBox(false, textBox355, textBox356);
            }
        }

        private void textBox356_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == 13)
            {
                functionFocusTextBox(false, textBox356, button217);
            }
        }

        private void tabControl1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyValue == 123)
            {
                MessageBox.Show(Convert.ToString(Form1.ActiveForm.ActiveControl.Name));
            }
            if (e.KeyValue == 13)
            {
                switch (Convert.ToString(Form1.ActiveForm.ActiveControl.Name))
                {
                    //Справочники
                    //Справочник наименований элементов
                    case "textBox2":
                        functionFocusTextBox(true, textBox2, textBox3, "Элемент", false);
                        break;
                    case "textBox3":
                        functionFocusTextBox(false, textBox3, textBox4);
                        break;
                    case "textBox4":
                        functionFocusTextBox(false, textBox4, textBox5);
                        break;
                    case "textBox246":
                        if (button8.Visible)
                            functionFocusTextBox(false, textBox246, button8, "Предприятие");
                        else
                            functionFocusTextBox(false, textBox246, button9, "Предприятие");
                        break;
                    //Справочник предприятий
                    case "textBox6":
                        functionFocusTextBox(true, textBox6, textBox7, "Предприятие", false);
                        break;
                    case "textBox7":
                        functionFocusTextBox(false, textBox7, textBox8);
                        break;
                    case "textBox8":
                        functionFocusTextBox(true, textBox8, textBox9);
                        break;
                    case "textBox9":
                        functionFocusTextBox(true, textBox9, textBox10);
                        break;
                    case "textBox10":
                        functionFocusTextBox(false, textBox10, textBox11);
                        break;
                    case "textBox11":
                        functionFocusTextBox(false, textBox11, textBox13);
                        break;
                    //Справочник преград
                    case "textBox14":
                        functionFocusTextBox(true, textBox14, textBox16, "Преграда", false);
                        break;
                    case "textBox16":
                        functionFocusTextBox(true, textBox16, textBox17);
                        break;
                    case "textBox17":
                        functionFocusTextBox(false, textBox17, textBox18);
                        break;
                    case "textBox18":
                        if (button26.Visible)
                            functionFocusTextBox(false, textBox18, button26);
                        else
                            functionFocusTextBox(false, textBox18, button27);
                        break;
                    //Справочник ненужных ВК
                    case "textBox24":
                        functionFocusTextBox(true, textBox24, comboBox5);
                        break;
                    case "textBox23":
                        if (button44.Visible)
                            functionFocusTextBox(true, textBox23, button44);
                        else
                            functionFocusTextBox(true, textBox23, button45);
                        break;
                    //Справочник видов испытаний
                    case "textBox19":
                        functionFocusTextBox(true, textBox19, textBox20, "Вид испытания", false);
                        break;
                    case "textBox20":
                        if (button35.Visible)
                            functionFocusTextBox(true, textBox20, button35);
                        else
                            functionFocusTextBox(true, textBox20, button36);
                        break;
                    //Справочник наименований матчасти
                    case "textBox30":
                        functionFocusTextBox(true, textBox30, textBox31, "Мат часть", false);
                        break;
                    case "textBox31":
                        functionFocusTextBox(true, textBox31, textBox32, "Мат часть", false);
                        break;
                    case "textBox32":
                        functionFocusTextBox(false, textBox32, textBox73);
                        break;
                    case "textBox73":
                        functionFocusTextBox(false, textBox73, textBox33);
                        break;
                    case "textBox33":
                        functionFocusTextBox(false, textBox33, textBox35);
                        break;
                    case "textBox35":
                        functionFocusTextBox(false, textBox35, textBox36);
                        break;
                    case "textBox36":
                        functionFocusTextBox(false, textBox36, textBox34);
                        break;
                    //Справочник наименований единиц измерений
                    case "textBox22":
                        functionFocusTextBox(false, textBox22, textBox25, "Ед. измерения", false);
                        break;
                    case "textBox25":
                        functionFocusTextBox(false, textBox25, textBox27, "Ед. измерения", false);
                        break;
                    case "textBox27":
                        functionFocusTextBox(true, textBox27, textBox28);
                        break;
                    case "textBox28":
                        if (button53.Visible)
                            functionFocusTextBox(false, textBox28, button53);
                        else
                            functionFocusTextBox(false, textBox28, button54);
                        break;
                    //Справочник полигонов
                    case "textBox38":
                        functionFocusTextBox(false, textBox38, textBox39, "Полигон", false);
                        break;
                    case "textBox39":
                        functionFocusTextBox(false, textBox39, textBox40);
                        break;
                    case "textBox40":
                        if (button65.Visible)
                            functionFocusTextBox(false, textBox40, button65, "Предприятие");
                        else
                            functionFocusTextBox(false, textBox40, button64, "Предприятие");
                        break;
                    //Справочник цен видов испытаний
                    case "textBox112":
                        functionFocusTextBox(false, textBox112, textBox108, "Полигон");
                        break;
                    case "textBox108":
                        functionFocusTextBox(true, textBox108, textBox114, "Элемент");
                        break;
                    case "textBox114":
                        functionFocusTextBox(true, textBox114, textBox115, "Вид испытания");
                        break;
                    case "textBox115":
                        functionFocusTextBox(true, textBox115, textBox116, "Мат часть");
                        break;
                    case "textBox116":
                        functionFocusTextBox(true, textBox116, button130);
                        break;
                    //Справочник цен на комплектующие элементы
                    case "textBox120":
                        functionFocusTextBox(true, textBox120, textBox121, "Элемент");
                        break;
                    case "textBox121":
                        functionFocusTextBox(true, textBox121, textBox122, "Ед. измерения");
                        break;
                    case "textBox122":
                        functionFocusTextBox(true, textBox122, textBox123);
                        break;
                    case "textBox125":
                        if (button133.Visible)
                            functionFocusTextBox(false, textBox125, button133);
                        else
                            functionFocusTextBox(false, textBox125, button132);
                        break;
                    //Справочник норм времени на проведение испытаний
                    case "textBox126":
                        functionFocusTextBox(true, textBox126, textBox130, "Элемент");
                        break;
                    case "textBox130":
                        functionFocusTextBox(true, textBox130, textBox131, "Вид испытания");
                        break;
                    case "textBox131":
                        functionFocusTextBox(false, textBox131, textBox140);
                        break;
                    case "textBox140":
                        functionFocusTextBox(false, textBox140, textBox132);
                        break;
                    case "textBox132":
                        functionFocusTextBox(false, textBox132, textBox141);
                        break;
                    case "textBox141":
                        functionFocusTextBox(false, textBox141, textBox359);
                        break;
                    case "textBox359":
                        functionFocusTextBox(false, textBox359, textBox360);
                        break;
                    case "textBox360":
                        functionFocusTextBox(false, textBox360, textBox133);
                        break;
                    case "textBox133":
                        functionFocusTextBox(false, textBox133, textBox142);
                        break;
                    case "textBox142":
                        functionFocusTextBox(false, textBox142, textBox150);
                        break;
                    case "textBox150":
                        functionFocusTextBox(false, textBox150, textBox151);
                        break;
                    case "textBox151":
                        functionFocusTextBox(false, textBox151, textBox134);
                        break;
                    case "textBox134":
                        functionFocusTextBox(false, textBox134, textBox143);
                        break;
                    case "textBox143":
                        functionFocusTextBox(false, textBox143, textBox361);
                        break;
                    case "textBox361":
                        functionFocusTextBox(false, textBox361, textBox362);
                        break;
                    case "textBox362":
                        functionFocusTextBox(false, textBox362, textBox136);
                        break;
                    case "textBox135":
                        functionFocusTextBox(false, textBox135, textBox144);
                        break;
                    case "textBox144":
                        functionFocusTextBox(false, textBox144, textBox136);
                        break;
                    case "textBox136":
                        functionFocusTextBox(false, textBox136, textBox145);
                        break;
                    case "textBox145":
                        functionFocusTextBox(false, textBox145, textBox137);
                        break;
                    case "textBox137":
                        functionFocusTextBox(false, textBox137, textBox146);
                        break;
                    case "textBox146":
                        functionFocusTextBox(false, textBox146, textBox138);
                        break;
                    case "textBox138":
                        functionFocusTextBox(false, textBox138, textBox147);
                        break;
                    case "textBox147":
                        functionFocusTextBox(false, textBox147, textBox139);
                        break;
                    case "textBox139":
                        functionFocusTextBox(false, textBox139, textBox148);
                        break;
                    case "textBox148":
                        functionFocusTextBox(false, textBox148, textBox357);
                        break;
                    case "textBox357":
                        functionFocusTextBox(false, textBox357, textBox358);
                        break;
                    case "textBox358":
                        functionFocusTextBox(false, textBox358, textBox363);
                        break;
                    case "textBox363":
                        functionFocusTextBox(false, textBox363, textBox367);
                        break;
                    case "textBox367":
                        functionFocusTextBox(false, textBox367, textBox364);
                        break;
                    case "textBox364":
                        functionFocusTextBox(false, textBox364, textBox368);
                        break;
                    case "textBox368":
                        functionFocusTextBox(false, textBox368, textBox365);
                        break;
                    case "textBox365":
                        functionFocusTextBox(false, textBox365, textBox369);
                        break;
                    case "textBox369":
                        functionFocusTextBox(false, textBox369, textBox366);
                        break;
                    case "textBox366":
                        functionFocusTextBox(false, textBox366, textBox370);
                        break;
                    case "textBox370":
                        if (button144.Visible)
                            functionFocusTextBox(false, textBox370, button144);
                        else
                            functionFocusTextBox(false, textBox370, button143);
                        break;
                    //Месячный план
                    //Месячный план испытаний
                    case "textBox99":
                        functionFocusTextBox(false, textBox99, textBox100);
                        break;
                    case "textBox100":
                        functionFocusTextBox(false, textBox100, textBox82);
                        break;
                    case "textBox82":
                        functionFocusTextBox(true, textBox82, textBox97, "Элемент");
                        break;
                    case "textBox97":
                        functionFocusTextBox(true, textBox97, textBox87, "Предприятие");
                        break;
                    case "textBox87":
                        if (textBox88.Visible)
                            functionFocusTextBox(true, textBox87, textBox88, "Вид испытания");
                        else
                            functionFocusTextBox(true, textBox87, textBox89, "Вид испытания");
                        break;
                    case "textBox89":
                        functionFocusTextBox(false, textBox89, textBox90);
                        break;
                    case "textBox90":
                        functionFocusTextBox(false, textBox90, textBox91);
                        break;
                    case "textBox91":
                        functionFocusTextBox(false, textBox91, textBox98);
                        break;
                    case "textBox88":
                        functionFocusTextBox(false, textBox88, textBox93, "Мат часть");
                        break;
                    case "textBox93":
                        functionFocusTextBox(false, textBox93, textBox94);
                        break;
                    case "textBox94":
                        functionFocusTextBox(false, textBox94, textBox95);
                        break;
                    case "textBox95":
                        functionFocusTextBox(false, textBox95, textBox96);
                        break;
                    case "textBox96":
                        functionFocusTextBox(false, textBox96, textBox98);
                        break;
                    case "textBox98":
                        if (button103.Visible)
                            functionFocusTextBox(false, textBox98, button103);
                        else
                            functionFocusTextBox(false, textBox98, button102);
                        break;
                    //Форматки испытаний
                    case "textBox42":
                        functionFocusTextBox(true, textBox42, textBox43, "Элемент");
                        break;
                    case "textBox43":
                        functionFocusTextBox(true, textBox43, textBox47, "Вид испытания");
                        break;
                    case "textBox47":
                        functionFocusTextBox(true, textBox47, textBox48);
                        break;
                    case "textBox48":
                        functionFocusTextBox(false, textBox48, textBox49);
                        break;
                    case "textBox49":
                        functionFocusTextBox(false, textBox49, textBox50);
                        break;
                    case "textBox50":
                        functionFocusTextBox(true, textBox50, textBox51);
                        break;
                    case "textBox51":
                        functionFocusTextBox(true, textBox51, textBox52);
                        break;
                    case "textBox52":
                        functionFocusTextBox(false, textBox52, textBox53);
                        break;
                    case "textBox53":
                        functionFocusTextBox(false, textBox53, textBox54);
                        break;
                    case "textBox54":
                        functionFocusTextBox(false, textBox54, textBox55);
                        break;
                    case "textBox55":
                        functionFocusTextBox(false, textBox55, textBox56);
                        break;
                    case "textBox56":
                        functionFocusTextBox(true, textBox56, textBox57);
                        break;
                    case "textBox57":
                        functionFocusTextBox(false, textBox57, textBox58);
                        break;
                    case "textBox58":
                        functionFocusTextBox(true, textBox58, textBox59);
                        break;
                    case "textBox59":
                        functionFocusTextBox(false, textBox59, textBox60);
                        break;
                    case "textBox60":
                        functionFocusTextBox(false, textBox60, textBox61);
                        break;
                    case "textBox61":
                        functionFocusTextBox(false, textBox61, textBox62);
                        break;
                    case "textBox62":
                        functionFocusTextBox(true, textBox62, textBox63);
                        break;
                    case "textBox63":
                        functionFocusTextBox(false, textBox63, textBox64);
                        break;
                    case "textBox64":
                        functionFocusTextBox(false, textBox64, textBox65);
                        break;
                    case "textBox65":
                        functionFocusTextBox(true, textBox65, textBox66);
                        break;
                    case "textBox66":
                        functionFocusTextBox(false, textBox66, textBox67);
                        break;
                    case "textBox67":
                        functionFocusTextBox(false, textBox67, textBox68);
                        break;
                    case "textBox68":
                        functionFocusTextBox(false, textBox68, textBox69);
                        break;
                    case "textBox69":
                        functionFocusTextBox(false, textBox69, textBox70);
                        break;
                    case "textBox70":
                        functionFocusTextBox(false, textBox70, textBox71);
                        break;
                    case "textBox71":
                        functionFocusTextBox(false, textBox71, textBox72);
                        break;
                    case "textBox72":
                        if (button81.Visible)
                            functionFocusTextBox(true, textBox72, button81, "Ед. измерения");
                        else
                            functionFocusTextBox(true, textBox72, button80, "Ед. измерения");
                        break;
                    //Ведомость комплектаций
                    case "textBox75":
                        functionFocusTextBox(true, textBox75, textBox79, "Элемент");
                        break;
                    case "textBox79":
                        functionFocusTextBox(true, textBox79, textBox102, "Вид испытания");
                        break;
                    case "textBox102":
                        functionFocusTextBox(true, textBox102, textBox103, "Элемент");
                        break;
                    case "textBox103":
                        functionFocusTextBox(true, textBox103, textBox104, "Ед. измерения");
                        break;
                    case "textBox104":
                        functionFocusTextBox(true, textBox104, button112);
                        break;
                    //Годовой план
                    //План производства
                    case "textBox223":
                        functionFocusTextBox(true, textBox223, textBox224, "Элемент");
                        break;
                    case "textBox224":
                        functionFocusTextBox(true, textBox224, textBox231, "Предприятие");
                        break;
                    case "textBox231":
                        functionFocusTextBox(true, textBox231, textBox228, "Ед. измерения");
                        break;
                    case "textBox228":
                        functionFocusTextBox(false, textBox228, textBox227);
                        break;
                    case "textBox227":
                        functionFocusTextBox(false, textBox227, textBox226);
                        break;
                    case "textBox226":
                        functionFocusTextBox(false, textBox226, textBox225);
                        break;
                    case "textBox225":
                        if (button193.Visible)
                            functionFocusTextBox(false, textBox225, button193);
                        else
                            functionFocusTextBox(false, textBox225, button192);
                        break;
                    //План испытаний
                    case "textBox219":
                        functionFocusTextBox(true, textBox219, textBox194, "Предприятие");
                        break;
                    case "textBox194":
                        functionFocusTextBox(true, textBox194, textBox196, "Полигон");
                        break;
                    case "textBox196":
                        functionFocusTextBox(false, textBox196, textBox197);
                        break;
                    case "textBox197":
                        functionFocusTextBox(false, textBox197, textBox198);
                        break;
                    case "textBox198":
                        functionFocusTextBox(true, textBox198, textBox202, "Элемент");
                        break;
                    case "textBox202":
                        functionFocusTextBox(true, textBox202, textBox204, "Вид испытания");
                        break;
                    case "textBox204":
                        functionFocusTextBox(false, textBox204, textBox206);
                        break;
                    case "textBox206":
                        functionFocusTextBox(false, textBox206, textBox208);
                        break;
                    case "textBox208":
                        functionFocusTextBox(false, textBox208, textBox216);
                        break;
                    case "textBox216":
                        functionFocusTextBox(false, textBox216, textBox215);
                        break;
                    case "textBox215":
                        functionFocusTextBox(false, textBox215, textBox214);
                        break;
                    case "textBox214":
                        functionFocusTextBox(false, textBox214, textBox213);
                        break;
                    case "textBox213":
                        functionFocusTextBox(false, textBox213, textBox212);
                        break;
                    case "textBox212":
                        if (button183.Visible)
                            functionFocusTextBox(false, textBox212, button183);
                        else
                            functionFocusTextBox(false, textBox212, button182);
                        break;
                    //Форматки испытаний
                    case "textBox183":
                        functionFocusTextBox(true, textBox183, textBox182, "Элемент");
                        break;
                    case "textBox182":
                        functionFocusTextBox(true, textBox182, textBox178, "Вид испытания");
                        break;
                    case "textBox178":
                        functionFocusTextBox(true, textBox178, textBox177);
                        break;
                    case "textBox177":
                        functionFocusTextBox(false, textBox177, textBox176);
                        break;
                    case "textBox176":
                        functionFocusTextBox(false, textBox176, textBox175);
                        break;
                    case "textBox175":
                        functionFocusTextBox(true, textBox175, textBox174);
                        break;
                    case "textBox174":
                        functionFocusTextBox(true, textBox174, textBox173);
                        break;
                    case "textBox173":
                        functionFocusTextBox(false, textBox173, textBox172);
                        break;
                    case "textBox172":
                        functionFocusTextBox(false, textBox172, textBox171);
                        break;
                    case "textBox171":
                        functionFocusTextBox(false, textBox171, textBox170);
                        break;
                    case "textBox170":
                        functionFocusTextBox(false, textBox170, textBox169);
                        break;
                    case "textBox169":
                        functionFocusTextBox(true, textBox169, textBox168);
                        break;
                    case "textBox168":
                        functionFocusTextBox(false, textBox168, textBox167);
                        break;
                    case "textBox167":
                        functionFocusTextBox(true, textBox167, textBox166);
                        break;
                    case "textBox166":
                        functionFocusTextBox(false, textBox166, textBox165);
                        break;
                    case "textBox165":
                        functionFocusTextBox(false, textBox165, textBox164);
                        break;
                    case "textBox164":
                        functionFocusTextBox(false, textBox164, textBox163);
                        break;
                    case "textBox163":
                        functionFocusTextBox(true, textBox163, textBox162);
                        break;
                    case "textBox162":
                        functionFocusTextBox(false, textBox162, textBox161);
                        break;
                    case "textBox161":
                        functionFocusTextBox(false, textBox161, textBox160);
                        break;
                    case "textBox160":
                        functionFocusTextBox(true, textBox160, textBox159);
                        break;
                    case "textBox159":
                        functionFocusTextBox(false, textBox159, textBox158);
                        break;
                    case "textBox158":
                        functionFocusTextBox(false, textBox158, textBox157);
                        break;
                    case "textBox157":
                        functionFocusTextBox(false, textBox157, textBox156);
                        break;
                    case "textBox156":
                        functionFocusTextBox(false, textBox156, textBox155);
                        break;
                    case "textBox155":
                        functionFocusTextBox(false, textBox155, textBox154);
                        break;
                    case "textBox154":
                        functionFocusTextBox(false, textBox154, textBox153);
                        break;
                    case "textBox153":
                        if (button160.Visible)
                            functionFocusTextBox(true, textBox153, button160, "Ед. измерения");
                        else
                            functionFocusTextBox(true, textBox153, button158, "Ед. измерения");
                        break;
                    //Ведомость комплектаций
                    case "textBox193":
                        functionFocusTextBox(true, textBox193, textBox189, "Элемент");
                        break;
                    case "textBox189":
                        functionFocusTextBox(true, textBox189, textBox186, "Вид испытания");
                        break;
                    case "textBox186":
                        functionFocusTextBox(true, textBox186, textBox185, "Элемент");
                        break;
                    case "textBox185":
                        functionFocusTextBox(true, textBox185, textBox184, "Ед. измерения");
                        break;
                    case "textBox184":
                        functionFocusTextBox(true, textBox184, button168);
                        break;
                    //Результ план
                    //Результ план производства
                    case "textBox273":
                        functionFocusTextBox(true, textBox273, textBox269, "Элемент");
                        break;
                    case "textBox269":
                        functionFocusTextBox(true, textBox269, textBox262, "Предприятие");
                        break;
                    case "textBox262":
                        functionFocusTextBox(true, textBox262, textBox267, "Ед. измерения");
                        break;
                    case "textBox267":
                        functionFocusTextBox(false, textBox267, textBox266);
                        break;
                    case "textBox266":
                        functionFocusTextBox(false, textBox266, textBox265);
                        break;
                    case "textBox265":
                        functionFocusTextBox(false, textBox265, textBox264);
                        break;
                    case "textBox264":
                        if (button226.Visible)
                            functionFocusTextBox(false, textBox264, button226);
                        else
                            functionFocusTextBox(false, textBox264, button225);
                        break;
                    //Результ план испытаний
                    case "textBox274":
                        functionFocusTextBox(true, textBox274, textBox299, "Предприятие");
                        break;
                    case "textBox299":
                        functionFocusTextBox(true, textBox299, textBox297, "Полигон");
                        break;
                    case "textBox297":
                        functionFocusTextBox(false, textBox297, textBox296);
                        break;
                    case "textBox296":
                        functionFocusTextBox(false, textBox296, textBox295);
                        break;
                    case "textBox295":
                        functionFocusTextBox(true, textBox295, textBox291, "Элемент");
                        break;
                    case "textBox291":
                        functionFocusTextBox(true, textBox291, textBox289, "Вид испытания");
                        break;
                    case "textBox289":
                        functionFocusTextBox(false, textBox289, textBox287);
                        break;
                    case "textBox287":
                        functionFocusTextBox(false, textBox287, textBox285);
                        break;
                    case "textBox285":
                        functionFocusTextBox(false, textBox285, textBox280);
                        break;
                    case "textBox280":
                        functionFocusTextBox(false, textBox280, textBox279);
                        break;
                    case "textBox279":
                        functionFocusTextBox(false, textBox279, textBox278);
                        break;
                    case "textBox278":
                        functionFocusTextBox(false, textBox278, textBox277);
                        break;
                    case "textBox277":
                        functionFocusTextBox(false, textBox277, textBox276);
                        break;
                    case "textBox276":
                        if (button236.Visible)
                            functionFocusTextBox(false, textBox276, button236);
                        else
                            functionFocusTextBox(false, textBox276, button235);
                        break;
                    //Крешерное имущество
                    case "textBox353":
                        functionFocusTextBox(true, textBox353, textBox352, "Предприятие");
                        break;
                    case "textBox352":
                        functionFocusTextBox(false, textBox352, textBox345);
                        break;
                    case "textBox345":
                        functionFocusTextBox(true, textBox345, textBox351, "Элемент");
                        break;
                    case "textBox351":
                        functionFocusTextBox(true, textBox351, textBox349, "Ед. измерения");
                        break;
                    case "textBox349":
                        functionFocusTextBox(false, textBox349, textBox348);
                        break;
                    case "textBox348":
                        functionFocusTextBox(false, textBox348, textBox347);
                        break;
                    case "textBox347":
                        functionFocusTextBox(false, textBox347, textBox346);
                        break;
                    case "textBox346":
                        if (button278.Visible)
                            functionFocusTextBox(false, textBox346, button278);
                        else
                            functionFocusTextBox(false, textBox346, button277);
                        break;
                    //Форматки испытаний
                    case "textBox341":
                        functionFocusTextBox(true, textBox341, textBox340, "Элемент");
                        break;
                    case "textBox340":
                        functionFocusTextBox(true, textBox340, textBox336, "Вид испытания");
                        break;
                    case "textBox336":
                        functionFocusTextBox(true, textBox336, textBox335);
                        break;
                    case "textBox335":
                        functionFocusTextBox(false, textBox335, textBox334);
                        break;
                    case "textBox334":
                        functionFocusTextBox(false, textBox334, textBox333);
                        break;
                    case "textBox333":
                        functionFocusTextBox(true, textBox333, textBox332);
                        break;
                    case "textBox332":
                        functionFocusTextBox(true, textBox332, textBox331);
                        break;
                    case "textBox331":
                        functionFocusTextBox(false, textBox331, textBox330);
                        break;
                    case "textBox330":
                        functionFocusTextBox(false, textBox330, textBox329);
                        break;
                    case "textBox329":
                        functionFocusTextBox(false, textBox329, textBox328);
                        break;
                    case "textBox328":
                        functionFocusTextBox(false, textBox328, textBox327);
                        break;
                    case "textBox327":
                        functionFocusTextBox(true, textBox327, textBox326);
                        break;
                    case "textBox326":
                        functionFocusTextBox(false, textBox326, textBox325);
                        break;
                    case "textBox325":
                        functionFocusTextBox(true, textBox325, textBox324);
                        break;
                    case "textBox324":
                        functionFocusTextBox(false, textBox324, textBox323);
                        break;
                    case "textBox323":
                        functionFocusTextBox(false, textBox323, textBox322);
                        break;
                    case "textBox322":
                        functionFocusTextBox(false, textBox322, textBox321);
                        break;
                    case "textBox321":
                        functionFocusTextBox(true, textBox321, textBox320);
                        break;
                    case "textBox320":
                        functionFocusTextBox(false, textBox320, textBox319);
                        break;
                    case "textBox319":
                        functionFocusTextBox(false, textBox319, textBox318);
                        break;
                    case "textBox318":
                        functionFocusTextBox(true, textBox318, textBox317);
                        break;
                    case "textBox317":
                        functionFocusTextBox(false, textBox317, textBox316);
                        break;
                    case "textBox316":
                        functionFocusTextBox(false, textBox316, textBox315);
                        break;
                    case "textBox315":
                        functionFocusTextBox(false, textBox315, textBox314);
                        break;
                    case "textBox314":
                        functionFocusTextBox(false, textBox314, textBox313);
                        break;
                    case "textBox313":
                        functionFocusTextBox(false, textBox313, textBox312);
                        break;
                    case "textBox312":
                        functionFocusTextBox(false, textBox312, textBox311);
                        break;
                    case "textBox311":
                        if (button260.Visible)
                            functionFocusTextBox(true, textBox311, button260, "Ед. измерения");
                        else
                            functionFocusTextBox(true, textBox311, button258, "Ед. измерения");
                        break;
                    //Ведомость комплектаций
                    case "textBox309":
                        functionFocusTextBox(true, textBox309, textBox305, "Элемент");
                        break;
                    case "textBox305":
                        functionFocusTextBox(true, textBox305, textBox302, "Вид испытания");
                        break;
                    case "textBox302":
                        functionFocusTextBox(true, textBox302, textBox301, "Элемент");
                        break;
                    case "textBox301":
                        functionFocusTextBox(true, textBox301, textBox300, "Ед. измерения");
                        break;
                    case "textBox300":
                        functionFocusTextBox(true, textBox300, button243);
                        break;
                    default:
                        break;
                }
            }
        }

        private void functionFocusTextBox(bool nullCheck, TextBox textBoxFocus, Control controlNewFocus, string nameSp="all", bool isInSp = true)
        {
            bool proverkaInSpravochnik = true;
            string endString = "";
            switch (nameSp)
            {
                case "all":
                    break;
                case "Элемент":
                    if (functionSearchIDElInSp(textBoxFocus.Text) < 0)
                        proverkaInSpravochnik = false;
                    break;
                case "Предприятие":
                    proverkaInSpravochnik = functionSearchFactory(textBoxFocus);
                    endString = "о";
                    break;
                case "Преграда":
                    if (functionSearchPregrada(textBoxFocus.Text) < 0)
                        proverkaInSpravochnik = false;
                    endString = "а";
                    break;
                case "Вид испытания":
                    if (functionSearchVidIsp(textBoxFocus.Text) < 0)
                        proverkaInSpravochnik = false;
                    endString = "";
                    break;
                case "Мат часть":
                    if (functionSearchMatChast(textBoxFocus.Text) < 0)
                        proverkaInSpravochnik = false;
                    endString = "а";
                    break;
                case "Ед. измерения":
                    if (functionSearcgIDEdIzmInSp(textBoxFocus.Text) < 0)
                        proverkaInSpravochnik = false;
                    endString = "а";
                    break;
                case "Полигон":
                    if (functionSearchPoligon(textBoxFocus.Text) < 0)
                        proverkaInSpravochnik = false;
                    endString = "";
                    break;
                default:
                    break;
            }
            if (!textBoxFocus.ReadOnly && proverkaInSpravochnik && isInSp || (!textBoxFocus.ReadOnly && !proverkaInSpravochnik && !isInSp))
                if (nullCheck)
                {
                    if (textBoxFocus.Text.Length > 0)
                        controlNewFocus.Focus();
                }else
                    controlNewFocus.Focus();
            if (!proverkaInSpravochnik && isInSp)
                functionMessageShow(1, nameSp + " с данным кодом не найден" + endString + " в справочнике!");
            if(proverkaInSpravochnik && !isInSp)
                functionMessageShow(1, nameSp + " с данным кодом уже записан" + endString + " в справочник!");
        }

        private void tabControl1_KeyPress(object sender, KeyPressEventArgs e)
        {
            char newChar = e.KeyChar;
            if (Convert.ToInt32(newChar) == 27)
            {
                if (spElementEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    functionVisibleAddNewElement();
                if (spFactoryEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    functionDisableShowNewFactory();
                if (spPregradEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    functionDisableShowNewPregrad();
                if (spVidIspEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    functionDisableShoeNewVidIsp();
                if (spNoneVkEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    functionDisableShowNewNoneVk();
                if (spEdIzmEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    functionDisableShowNewEdIzm();
                if (spMCEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    functionDisableShowNewMC();
                if (spPoligonsEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    functionDisableShowNewPoligons();
                if (spCenaVidIspEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    functionDisableShowCenaVidIsp();
                if (spCenaKEEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    functionDisableShowCenaKE();
                if (spNormTimeIspEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    functionDisableShowNormTimeIsp();
                if (panel34.Visible == false && tabControl1.SelectedIndex == 0 && (!spFIResultEdit && !spVKResultEdit && !spPlIspResultEdit && !spPlIndResultEdit && !spPotrVKEResultEdit && !spPotrVKIResultEdit))
                    functionCancelResult();
                else
                {
                    if (spFIResultEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewFIResult();
                    if (spVKResultEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewVKResult();
                    if (spPlIspResultEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewPlIspResult();
                    if (spPlIndResultEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewPlIndResult();
                    if (spPotrVKEResultEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewVKResult();
                    if (spPotrVKIResultEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewPotrVKIResult();
                }
                if (panel19.Visible == false && tabControl1.SelectedIndex == 1 && (!spFIKontrolEdit && !spVKKontrolEdit && !spPlIspKontrolEdit && !spPlIndKontrolEdit && !spPotrVKEKontrolEdit))
                    functionCancelKontrol();
                else
                {
                    if (spFIKontrolEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewFIKontrol();
                    if (spVKKontrolEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewVKKontrol();
                    if (spPlIspKontrolEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewPlIspKontrol();
                    if (spPlIndKontrolEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewPlIndKontrol();
                    if (spPotrVKEKontrolEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewVKKontrol();
                }
                if (panel9.Visible == false && tabControl1.SelectedIndex == 2 && (!spFIMesplEdit && !spVKMesplEdit && !spPlIspMesplEdit))
                    functionCancelMespl();
                else
                {
                    if (spFIMesplEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewFIMespl();
                    if (spVKMesplEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShoeNewVKMespl();
                    if (spPlIspMesplEdit && DialogResult.Yes == MessageBox.Show("Вы подтверждаете отмену?", "Подтверждение", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                        functionDisableShowNewIspMespl();
                }
            }
            if (Convert.ToInt32(newChar) != 13)
            {
                switch (Convert.ToString(Form1.ActiveForm.ActiveControl.Name))
                {
                    //Справочники
                    //Справочник наименований элементов
                    case "textBox2":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox246":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    //Справочник предприятий
                    case "textBox6":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    case "textBox7":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox10":
                        functionCheckTypeTextBox(0, "alpha", newChar, e);
                        break;
                    case "textBox11":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    //Справочник преград
                    case "textBox14":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox16":
                        functionCheckTypeTextBox(0, "stars", newChar, e);
                        break;
                    //Справочник видов испытаний
                    case "textBox19":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    //Справочник наименований матчасти
                    case "textBox30":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox31":
                        functionCheckTypeTextBox(5, "number", newChar, e);
                        break;
                    case "textBox32":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    case "textBox35":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    case "textBox36":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    //Справочник наименований единиц измерений
                    case "textBox22":
                        functionCheckTypeTextBox(2, "number", newChar, e);
                        break;
                    case "textBox25":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    //Справочник полигонов
                    case "textBox38":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox40":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    //Справочник цен видов испытаний
                    case "textBox112":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox108":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox114":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox115":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox116":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    //Справочник цен на комплектующие элементы
                    case "textBox120":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox121":
                        functionCheckTypeTextBox(2, "number", newChar, e);
                        break;
                    case "textBox122":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox125":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    //Справочник норм времени на проведение испытаний
                    case "textBox126":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox130":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox131":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox140":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox132":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox141":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox359":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox360":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox133":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox142":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox150":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox151":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox134":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox143":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox361":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox362":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox135":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox144":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox136":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox145":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox137":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox146":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox138":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox147":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox139":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox148":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox357":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox358":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox363":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox367":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox364":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox368":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox365":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox369":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox366":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox370":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    //Месячный план
                    //План испытаний
                    case "textBox99":
                        functionCheckTypeTextBox(5, "number", newChar, e);
                        break;
                    case "textBox100":
                        functionCheckTypeTextBox(5, "number", newChar, e);
                        break;
                    case "textBox82":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox97":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    case "textBox87":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox88":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox93":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox94":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox95":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox96":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox90":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    //Форматки испытаний
                    case "textBox42":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox43":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox47":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox48":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox49":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox50":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox51":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox52":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox53":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox54":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox55":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox56":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox57":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox58":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox59":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox60":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox61":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox62":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox63":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox64":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox65":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox66":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox67":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox68":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox69":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox70":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox71":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox72":
                        functionCheckTypeTextBox(2, "number", newChar, e);
                        break;
                    //Ведомость комплектацияй
                    case "textBox75":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox79":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox102":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox103":
                        functionCheckTypeTextBox(2, "number", newChar, e);
                        break;
                    case "textBox104":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    //Годовой план
                    //План производства
                    case "textBox223":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox224":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    case "textBox231":
                        functionCheckTypeTextBox(2, "number", newChar, e);
                        break;
                    case "textBox228":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox227":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox226":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox225":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    //План испытаний
                    case "textBox219":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    case "textBox194":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox196":
                        functionCheckTypeTextBox(5, "number", newChar, e);
                        break;
                    case "textBox197":
                        functionCheckTypeTextBox(5, "number", newChar, e);
                        break;
                    case "textBox198":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox202":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox204":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox206":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox208":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox216":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox215":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox214":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox213":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    //Потребность в КЭ
                    case "textBox235":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox236":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox237":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    case "textBox238":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    case "textBox244":
                        functionCheckTypeTextBox(2, "number", newChar, e);
                        break;
                    case "textBox242":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox241":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox240":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox239":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    //Форматки испытаний
                    case "textBox183":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox182":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox178":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox177":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox176":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox175":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox174":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox173":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox172":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox171":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox170":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox169":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox168":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox167":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox166":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox165":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox164":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox163":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox162":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox161":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox160":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox159":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox158":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox157":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox156":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox155":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox154":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox153":
                        functionCheckTypeTextBox(2, "number", newChar, e);
                        break;
                    //Ведомость комплектаций
                    case "textBox193":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox189":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox186":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox185":
                        functionCheckTypeTextBox(2, "number", newChar, e);
                        break;
                    case "textBox184":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    //Результ план
                    //План производства
                    case "textBox273":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox269":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    case "textBox262":
                        functionCheckTypeTextBox(2, "number", newChar, e);
                        break;
                    case "textBox267":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox266":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox265":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox264":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    //План испытаний
                    case "textBox274":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    case "textBox299":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox297":
                        functionCheckTypeTextBox(5, "number", newChar, e);
                        break;
                    case "textBox296":
                        functionCheckTypeTextBox(5, "number", newChar, e);
                        break;
                    case "textBox295":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox291":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox289":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox287":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox285":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox280":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox279":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox278":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox277":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    //Крешерное имущество
                    case "textBox353":
                        functionCheckTypeTextBox(6, "number", newChar, e);
                        break;
                    case "textBox345":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox351":
                        functionCheckTypeTextBox(2, "number", newChar, e);
                        break;
                    case "textBox349":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox348":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox347":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox346":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    //Форматки испытаний
                    case "textBox341":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox340":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox336":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox335":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox334":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox333":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox332":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox331":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox330":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox329":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox328":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox327":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox326":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox325":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox324":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox323":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox322":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox321":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox320":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox319":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox318":
                        functionCheckTypeTextBox(4, "number", newChar, e);
                        break;
                    case "textBox317":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox316":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox315":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox314":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox313":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    case "textBox312":
                        functionCheckTypeTextBox(0, "number", newChar, e);
                        break;
                    case "textBox311":
                        functionCheckTypeTextBox(2, "number", newChar, e);
                        break;
                    //Ведомость комплектаций
                    case "textBox309":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox305":
                        functionCheckTypeTextBox(3, "number", newChar, e);
                        break;
                    case "textBox302":
                        functionCheckTypeTextBox(10, "number", newChar, e);
                        break;
                    case "textBox301":
                        functionCheckTypeTextBox(2, "number", newChar, e);
                        break;
                    case "textBox300":
                        functionCheckTypeTextBox(0, "double", newChar, e);
                        break;
                    default:
                        break;
                }
            }
        }

        private void functionCheckTypeTextBox(int lenghtText, string typeCheck, char newChar, KeyPressEventArgs e)
        {
            if (Form1.ActiveForm.ActiveControl.Text.Length < lenghtText || newChar == 8 || lenghtText == 0)
            {
                //MessageBox.Show(Convert.ToString(Convert.ToInt32(newChar)));
                switch (typeCheck)
                {
                    case "all":
                        break;
                    case "alpha":
                        if (Char.IsDigit(newChar) && newChar != 8)
                            e.Handled = true;
                        break;
                    case "number":
                        if (!Char.IsDigit(newChar) && newChar != 8)
                            e.Handled = true;
                        break;
                    case "stars":
                        if (!Char.IsDigit(newChar) && newChar != 42 && newChar != 8)
                            e.Handled = true;
                        break;
                    case "double":
                        if (newChar == 46)
                        {
                            e.KeyChar = Convert.ToChar(44);
                            newChar = e.KeyChar;
                        }
                        if (!Char.IsDigit(newChar) && newChar != 44 && newChar != 8)
                            e.Handled = true;
                        break;
                    default:
                        break;
                }
            }
            else
                e.Handled = true;
        }

        //------------------------------ПРОВЕРКИ НА НАЛИЧИЕ В СПРАВОЧНИКАХ------------------------------
        //Проверка предприятия
        private bool functionSearchFactory(TextBox textBoxFocus)
        {
            foreach (ClassFactorys fc in factorysList)
                if (fc.getCode() == textBoxFocus.Text)
                {
                    return true;
                }
            return false;
        }

        //Функция поиска ID форматки испытания
        private int functionSearchIDFIMespl(string code, string vid)
        {
            int prIdFIMespl = -1;
            foreach (ClassFI el in fiList)
                if (el.codeElementFIMespl == code && el.codeVidIspFIMespl == vid)
                    prIdFIMespl = el.id;
            return prIdFIMespl;
        }

        //Функция поиска форматки испытания
        private ClassFI functionSearchFIMespl(string code, string vid)
        {
            ClassFI prFIMespl = null;
            foreach (ClassFI el in fiList)
                if (el.codeElementFIMespl == code && el.codeVidIspFIMespl == vid)
                    prFIMespl = el;
            return prFIMespl;
        }

        //Функция поиска элемента в справочнике
        private int functionSearchIDElInSp(string code)
        {
            int prIdEl = -1;
            foreach (ClassElements el in elementsList)
                if (el.getCode() == code)
                    prIdEl = el.getId();
            return prIdEl;
        }

        //Функция поиска ID ед. измерения в справочнике
        private int functionSearcgIDEdIzmInSp(string code)
        {
            int prIdEdIzm = -1;
            foreach (ClassEdIzm el in edIzmList)
                if (el.code2 == code || el.code3 == code)
                    prIdEdIzm = el.id;
            return prIdEdIzm;
        }

        //Функция поиска ед. измерения в справочнике
        private ClassEdIzm functionSearchEdIzmInSp(string code)
        {
            ClassEdIzm prEdIzm = null;
            foreach (ClassEdIzm el in edIzmList)
                if (el.code2 == code || el.code3 == code)
                    prEdIzm = el;
            return prEdIzm;
        }

        //Функция поиска преграды
        private int functionSearchPregrada(string code)
        {
            int prId = -1;
            foreach (ClassPregrads pr in pregradsList)
                if (pr.getCode() == code)
                    prId = pr.getId();
            return prId;
        }

        //Функция поиска вида испытания
        private int functionSearchVidIsp(string code)
        {
            int prId = -1;
            foreach (ClassVidIsp vi in vidIspList)
                if (vi.code == code)
                    prId = vi.id;
            return prId;
        }

        //Функция поиска мат части
        private int functionSearchMatChast(string code)
        {
            int prId = -1;
            foreach (ClassMC mc in mcList)
                if (mc.codeMC3 == code || mc.codeMC5 == code)
                    prId = mc.id;
            return prId;
        }

        //Функция поиска полигонов
        private int functionSearchPoligon(string number)
        {
            int prId = -1;
            foreach (ClassPoligons pol in poligonsList)
                if (pol.numberPl == number)
                    prId = pol.id;
            return prId;
        }
    }
}
