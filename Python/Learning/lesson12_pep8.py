# -*- coding: utf-8 -*-

# PEP8
# Используются 4 пробела для отступов!

foo = long_function_name(var_one, var_two,
                         var_three, var_four)

def long_function_name(
        var_one, var_two, var_three,
        var_four):
    print(var_one)

my_list = [
    1, 2, 3,
    4, 5, 6,
    ]
result = some_function_that_takes_arguments(
    'a', 'b', 'c',
    'd', 'e', 'f',
    )
my_another_list = [
    1, 2, 3,
    4, 5, 6,
]
result = another_function_that_takes_arguments(
    'a', 'b', 'c',
    'd', 'e', 'f',
)

# 79 символов - длина строки

with open('/path/to/some/file/you/want/to/read') as file_1, \
         open('/path/to/some/file/being/written', 'w') as file_2:
    file_2.write(file_1.read())

sum_of_elements = value1 + \
    value2

income = (gross_wages
          + taxable_interest
          + (dividends - qualifield_dividends)
          - ira_deduction
          - student_loan_interest)

# Функции верхнего уровня и определения классов отделяются двумя пустыми строками
# Методы внутри класса разделяются одной пустой строкой
# Можно использовать пустые строки для логического разделения кода

# Кодировка Python должна быть UTF-8
# Файлы не должны иметь объявления кодировки
# Используются символы ASCII
# Исключение: test case и имена авторов

# Каждый импорт должен быть на отдельной строке
import os
import sys
from subprocess import Popen, PIPE
# Импорты помещаются в начале
# Группировка: стандартные, сторонние библиотеки, модули текущего проекта
# Пустая строка между каждой группой импортов

# Пробелы
spam(ham[1], {eggs: 2})

if x == 4: print(x, y); x, y = y, x

spam(1)

my_dict['key'] = my_list[index]

# Вокруг операторов
# =, +=, -=
# ==, <, >, !=, <>, <=, >=, in, not in, is, is not
# Если используются арифметические операторы с разными приоритетами,
# попробуйте добавить пробелы вокруг операторов с самым низким приоритетом
i = i + 1
submitted += 1
x = x*2 - 1
hypot2 = x*x + y*y
c = (a+b) * (a-b)
# Не используйте пробелы вокруг знака =
# если он используется для обозначения именованного аргумента
# или значения параметров по умолчанию
def complex(real, imag=0.0):
    return magic(r=real, i=img);

# Для всех публичных частей необходимо писать строки документации
# Закрывающие кавычки документации должны стоять в новой строке
# Для однострочной документации можно оставить в той же строке

# Имена
# Имена модулей коротки, маленькие буквы, предпочтительно не использовать _
# Имена классов пишутся в виде нескольки слов, каждое с заглавной буквы
# Исключение - тоже класс
# Имена функций пишутся с маленькой буквы, слова разделяются _
# Имена переменных или открытых атрибутов класса состоят из маленьких и _
# Имена глобальных констант из заглавных букв и _
mymodule
UserClassName
ExceptionAreAlsoClasses
function_name
notDesiredFunctionName # допустимо, но не желательно
variable_name
GLOBAL_CONSTANT

# _
# Один символ подчёркивания в начале атрибута - для внутренних нужд
# Один символ _ в конце - для избежания конфликта имён с зарезервированным словом
# Два символа __ в начале - скрываемая функция или атрибут
# Два в начале и два в конце для магических методов
# Свои магические методы изобретать не следует

# Нежелательно использовать l, I, O
